<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>spring 笔记</title>
    <url>/2020/08/25/spring-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、IoC容器（控制反转，也叫DI：依赖注入）"><a href="#一、IoC容器（控制反转，也叫DI：依赖注入）" class="headerlink" title="一、IoC容器（控制反转，也叫DI：依赖注入）"></a>一、IoC容器（控制反转，也叫DI：依赖注入）</h1><h2 id="1、搭建spring环境"><a href="#1、搭建spring环境" class="headerlink" title="1、搭建spring环境"></a>1、搭建spring环境</h2><h3 id="1-1导包（5-1）"><a href="#1-1导包（5-1）" class="headerlink" title="1.1导包（5+1）"></a>1.1导包（5+1）</h3><a id="more"></a>

<blockquote>
<p>spring-aop.jar    开发<code>AOP</code>特性时需要</p>
<p>spring-beans.jar    处理bean的jar，例如在applicationContext.xml中的<bean></bean></p>
<p>spring-context.jar    处理上下文的jar</p>
<p>spring-core.jar    spring的核心jar</p>
<p>spring-expression.jar    spring表达式</p>
</blockquote>
<p><a href="https://maven.springframework.org/release/org/springframework/spring/">spring-framework 下载</a></p>
<blockquote>
<p>commons-logging.jar 日志，由第三方提供</p>
</blockquote>
<p><a href="https://mvnrepository.com/">推荐Maven Repository下载</a></p>
<hr>
<h3 id="1-2生成配置文件"><a href="#1-2生成配置文件" class="headerlink" title="1.2生成配置文件"></a>1.2生成配置文件</h3><h4 id="1-2-1工具：sts（spring-tool-suite）"><a href="#1-2-1工具：sts（spring-tool-suite）" class="headerlink" title="1.2.1工具：sts（spring tool suite）"></a>1.2.1工具：sts（spring tool suite）</h4><blockquote>
<p>方式一：安装插件</p>
<p>方式二：下载sts工具</p>
</blockquote>
<p>创建配置文件：</p>
<blockquote>
<p>new 一个<code>Bean Configuration File</code>文件，取名<code>applicationContext.xml</code></p>
</blockquote>
<img src="http://qflrz833q.hn-bkt.clouddn.com/image-20200825121122619.png" style="zoom: 33%;" />



<h4 id="1-2-2配置文件配置方法："><a href="#1-2-2配置文件配置方法：" class="headerlink" title="1.2.2配置文件配置方法："></a>1.2.2配置文件配置方法：</h4><h5 id="方式一：编写applicationContext-xml文件"><a href="#方式一：编写applicationContext-xml文件" class="headerlink" title="方式一：编写applicationContext.xml文件"></a>方式一：编写applicationContext.xml文件</h5><h6 id="【1】先看一个例子："><a href="#【1】先看一个例子：" class="headerlink" title="【1】先看一个例子："></a>【1】先看一个例子：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;cn.nap.entity.Student&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuNo&quot; value&#x3D;&quot;1&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuName&quot; value&#x3D;&quot;zhao&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuAge&quot; value&#x3D;&quot;18&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【2】依赖注入的3种方法："><a href="#【2】依赖注入的3种方法：" class="headerlink" title="【2】依赖注入的3种方法："></a>【2】依赖注入的<code>3种方法</code>：</h6><p> 1、<code>set注入</code>:必须要有set()方法</p>
<p>①实际表现形式：<code>&lt;property ……&gt;&lt;/property&gt;</code></p>
<p>②参数：</p>
<p>③例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;cn.nap.entity.Student&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuNo&quot; value&#x3D;&quot;1&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuName&quot; value&#x3D;&quot;zhao&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuAge&quot; value&#x3D;&quot;18&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p>2、<code>构造器注入</code>:必须要提供空构造器以及相应的构造器</p>
<p>①实际表现形式：<code>&lt;constructor-arg ……&gt;&lt;/constructor-arg&gt;</code></p>
<p>②参数：</p>
<blockquote>
<p>name：构造器的属性引用名称</p>
<p>value：构造器的属性对象值</p>
<p>ref：与<code>value</code>区别在于<code>ref</code>后要接除了8种基本类型、String外的引用类型</p>
<p>index：指定顺序<code>&lt;constructor-arg ……&gt;&lt;/constructor-arg&gt;</code></p>
<p>type：辅助指定顺序</p>
</blockquote>
<p>③例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;cn.nap.entity.Student&quot;&gt;</span><br><span class="line">	&lt;constructor-arg name&#x3D;&quot;stuNo&quot; value&#x3D;&quot;2&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">	&lt;constructor-arg name&#x3D;&quot;stuName&quot; value&#x3D;&quot;liu&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">	&lt;constructor-arg name&#x3D;&quot;stuAge&quot; value&#x3D;&quot;20&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p> 3、p命名空间注入：</p>
<p>①实际表现形式：<code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p>
<p>② 参数：</p>
<blockquote>
<p><code>p:</code>：后面接简单类型（含String），如果是引用类型需要在加<code>-ref</code>(p:teacher-ref=”……”)</p>
</blockquote>
<p>③例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;cn.nap.entity.Student&quot; p:stuName&#x3D;&quot;zhao&quot; p:stuNo&#x3D;&quot;3&quot; p:stuAge&#x3D;&quot;22&quot;&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【3】容器的注入"><a href="#【3】容器的注入" class="headerlink" title="【3】容器的注入"></a>【3】容器的注入</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;allcollectiontype&quot; class&#x3D;&quot;cn.nap.entity.AllCollectionType&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;list&quot;&gt;</span><br><span class="line">		&lt;list&gt;</span><br><span class="line">			&lt;value&gt;list1&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;list2&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;list3&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;……&lt;&#x2F;value&gt;			</span><br><span class="line">		&lt;&#x2F;list&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;array&quot;&gt;</span><br><span class="line">		&lt;array&gt;</span><br><span class="line">			&lt;value&gt;array1&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;array2&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;array3&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;……&lt;&#x2F;value&gt;						</span><br><span class="line">		&lt;&#x2F;array&gt;	</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;set&quot;&gt;</span><br><span class="line">		&lt;set&gt;</span><br><span class="line">			&lt;value&gt;set1&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;value&gt;set2&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;value&gt;set3&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;value&gt;……&lt;&#x2F;value&gt;</span><br><span class="line">		&lt;&#x2F;set&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;map&quot;&gt;</span><br><span class="line">		&lt;map&gt;</span><br><span class="line">			&lt;entry&gt;</span><br><span class="line">				&lt;key&gt;</span><br><span class="line">					&lt;value&gt;key1&lt;&#x2F;value&gt;</span><br><span class="line">				&lt;&#x2F;key&gt;</span><br><span class="line">				&lt;value&gt;value1&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;&#x2F;entry&gt;</span><br><span class="line">			&lt;entry&gt;</span><br><span class="line">				&lt;key&gt;</span><br><span class="line">					&lt;value&gt;key2&lt;&#x2F;value&gt;</span><br><span class="line">				&lt;&#x2F;key&gt;</span><br><span class="line">				&lt;value&gt;value2&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;&#x2F;entry&gt;</span><br><span class="line">			&lt;entry&gt;</span><br><span class="line">				&lt;key&gt;</span><br><span class="line">					&lt;value&gt;key3&lt;&#x2F;value&gt;</span><br><span class="line">				&lt;&#x2F;key&gt;</span><br><span class="line">				&lt;value&gt;value3&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;&#x2F;entry&gt;</span><br><span class="line">			&lt;entry&gt;</span><br><span class="line">				&lt;key&gt;</span><br><span class="line">					&lt;value&gt;……&lt;&#x2F;value&gt;</span><br><span class="line">				&lt;&#x2F;key&gt;</span><br><span class="line">				&lt;value&gt;……&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;&#x2F;entry&gt;</span><br><span class="line">		&lt;&#x2F;map&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;props&quot;&gt;</span><br><span class="line">		&lt;props&gt;</span><br><span class="line">			&lt;prop key&#x3D;&quot;props1&quot;&gt;props1&lt;&#x2F;prop&gt;</span><br><span class="line">			&lt;prop key&#x3D;&quot;props2&quot;&gt;props2&lt;&#x2F;prop&gt;</span><br><span class="line">			&lt;prop key&#x3D;&quot;props3&quot;&gt;props3&lt;&#x2F;prop&gt;</span><br><span class="line">			&lt;prop key&#x3D;&quot;……&quot;&gt;……&lt;&#x2F;prop&gt;</span><br><span class="line">		&lt;&#x2F;props&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【4】特殊值的注入"><a href="#【4】特殊值的注入" class="headerlink" title="【4】特殊值的注入"></a>【4】特殊值的注入</h6><p>①value与<value>注入方式的区别</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"><value>……</value></th>
<th align="center">value属性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">位置</td>
<td align="center">写在首尾标签（<value></value>）的中间(不加双引号)</td>
<td align="center">写在value的属性值中（必须加双引号）</td>
</tr>
<tr>
<td align="center"><code>type</code>属性</td>
<td align="center">有（可选）<br />可以通过type属性指定数据类型（<code>全类名</code>）</td>
<td align="center">/</td>
</tr>
<tr>
<td align="center">特殊值的注入</td>
<td align="center">①使用<code>&lt;![CDATA[ ]]&gt;</code><br />②使用XML预定义的实体引用</td>
<td align="center">只能使用XML预定义的实体引用</td>
</tr>
</tbody></table>
<p>②XML预定义的实体引用：</p>
<table>
<thead>
<tr>
<th align="center">实体引用</th>
<th align="center">表示符号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&amp;lt;</code></td>
<td align="center">&lt;</td>
</tr>
<tr>
<td align="center"><code>&amp;amp;</code></td>
<td align="center">&amp;</td>
</tr>
<tr>
<td align="center"><code>&amp;gt;</code></td>
<td align="center">&gt;</td>
</tr>
</tbody></table>
<p>③例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;stuName&quot;&gt;&lt;value&gt;zhao&lt;![CDATA[&lt;&amp;&gt;]]&gt;&lt;&#x2F;value&gt;&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;stuName&quot; value&#x3D;&quot;zhao&lt;&amp;&gt;&quot;&gt;&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<p>④<code>null</code>与<code>&quot;&quot;</code>两种空值的注入</p>
<p>给对象类型赋值null ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;stuName&quot; &gt;  </span><br><span class="line">		&lt;null&#x2F;&gt;       --&gt;注意 没有&lt;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<p>赋空值 “”  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;name&quot; &gt;  </span><br><span class="line">		&lt;value&gt;&lt;&#x2F;value&gt;  </span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【5】自动装配（只用于引用类型）"><a href="#【5】自动装配（只用于引用类型）" class="headerlink" title="【5】自动装配（只用于引用类型）"></a>【5】自动装配（只用于引用类型）</h6><p>①实际表现形式：<code>autowire=</code></p>
<p>②参数：</p>
<blockquote>
<p>“default”：默认值</p>
<p>“byName”：通过id（实际为”byId”）自动在IoC容器中查找，所以IoC容器中必须有需要引用的对象</p>
<p>“byType”：通过引用（ref）类型自动在IoC容器中查找相应的其他bean的类型（class），<code>此参数需满足当前IOC容器中只有一个其他bean满足条件</code></p>
<p>“constructor”：通过该类的构造方法参数自动在IoC容器中查找相应的其他bean的类型（class）</p>
</blockquote>
<p>③例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;cn.nap.entity.Student&quot; autowire&#x3D;&quot;byName&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>④统一自动装配方式：在命名空间内配置，<code>可以在具体bean后面写具体方式，覆盖统一方式</code></p>
<p><code>&lt;beans ……     default-autowire=&quot;default&quot;&gt;</code></p>
<h5 id="方式二：注解"><a href="#方式二：注解" class="headerlink" title="方式二：注解"></a>方式二：注解</h5><h6 id="【1】配置扫描器：扫描器-会将-指定的包-中的-Componet-Service-Respository-Controller修饰的类产生的对象-增加到IOC容器中"><a href="#【1】配置扫描器：扫描器-会将-指定的包-中的-Componet-Service-Respository-Controller修饰的类产生的对象-增加到IOC容器中" class="headerlink" title="【1】配置扫描器：扫描器 会将 指定的包 中的  @Componet @Service  @Respository   @Controller修饰的类产生的对象 增加到IOC容器中"></a>【1】配置扫描器：扫描器 会将 指定的包 中的  @Componet @Service  @Respository   @Controller修饰的类产生的对象 增加到IOC容器中</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置扫描器 --&gt;</span><br><span class="line">	&lt;context:component-scan base-package&#x3D;&quot;package cn.nap.dao&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【2】注入流程"><a href="#【2】注入流程" class="headerlink" title="【2】注入流程"></a>【2】注入流程</h6><p>Spring在启动的时候，会根据base-package在 该包中扫描所有类，查找这些类是否有注解@Component(“studentDao”),如果有，则将该类 加入spring Ioc容器。</p>
<h6 id="【3】-Component细化："><a href="#【3】-Component细化：" class="headerlink" title="【3】@Component细化："></a>【3】@Component细化：</h6><p>dao层注解：@Repository<br>service层注解：@Service<br>控制器层注解：@Controller</p>
<h6 id="【4】注解形式依赖注入"><a href="#【4】注解形式依赖注入" class="headerlink" title="【4】注解形式依赖注入"></a>【4】注解形式依赖注入</h6><p>@Autowire</p>
<p>@Qualifier（”id 值”）//byName</p>
<h3 id="1-3开发IoC程序：在原本要new的地方通过以下方式获得"><a href="#1-3开发IoC程序：在原本要new的地方通过以下方式获得" class="headerlink" title="1.3开发IoC程序：在原本要new的地方通过以下方式获得"></a>1.3开发IoC程序：在原本要<code>new</code>的地方通过以下方式获得</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext context&#x3D;new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">Student student&#x3D;(Student)context.getBean(&quot;student&quot;);</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="2、使用注解实现声明式事务"><a href="#2、使用注解实现声明式事务" class="headerlink" title="2、使用注解实现声明式事务"></a>2、使用注解实现声明式事务</h2><h3 id="2-1-添加jar包（6）"><a href="#2-1-添加jar包（6）" class="headerlink" title="2.1 添加jar包（6）"></a>2.1 添加jar包（<code>6</code>）</h3><blockquote>
<p>spring-tx-4.3.9.RELEASE.jar 事务包</p>
<p>mysql-connector-java-8.0.20.jar 驱动包</p>
<p>commons-dbcp.jar  连接池使用到数据源</p>
<p>commons-pool.jar  连接池</p>
<p>spring-jdbc-4.3.9.RELEASE.jar</p>
<p>aopalliance.jar   aop依赖的包</p>
</blockquote>
<h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><p>①增加事务tx的命名空间</p>
<p>②</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置数据库 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;maven?serverTimezone&#x3D;UTC&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root123&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置事务管理器&quot;transactionManager&quot; --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">	</span><br><span class="line">&lt;!-- 增加对事务的支持 --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h3><p>将需要 成为事务的方法 前增加注解：<br>@Transactional(readOnly=false,propagation=Propagation.REQUIRED)</p>
<h1 id="二、AOP"><a href="#二、AOP" class="headerlink" title="二、AOP"></a>二、AOP</h1><h2 id="1、通过实现接口实现通知"><a href="#1、通过实现接口实现通知" class="headerlink" title="1、通过实现接口实现通知"></a>1、通过实现接口实现通知</h2><h3 id="1-1-导包"><a href="#1-1-导包" class="headerlink" title="1.1 导包"></a>1.1 导包</h3><blockquote>
<p>aopalliance.jar   aop依赖的包</p>
<p>aspectjweaver.jar</p>
</blockquote>
<h3 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h3><p>①前置通知</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置前置通知 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 方法所在的类 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;studentserviceimpl&quot; class&#x3D;&quot;cn.nap.service.impl.StudentServiceImpl&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;studentDao&quot; ref&#x3D;&quot;StudentDaoImpl&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;!-- 通知类 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;logBefore&quot; class&#x3D;&quot;cn.nap.aop.LogBefore&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;!-- 关联 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">	&lt;!-- 配置切入点 --&gt;</span><br><span class="line">	&lt;aop:pointcut expression&#x3D;&quot;execution(public void cn.nap.service.impl.StudentServiceImpl.addStudent(cn.nap.entity.Student))&quot; id&#x3D;&quot;pointcut&quot;&#x2F;&gt;</span><br><span class="line">	&lt;aop:advisor advice-ref&#x3D;&quot;logBefore&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>

<p>②表达式<code>expression=&quot;execution(…)&quot; </code>用法</p>
<table>
<thead>
<tr>
<th>public boolean addStudent(org.lanqiao.entity.Student))</th>
<th>所有返回类型为boolean、参数类型为org.lanqiao.entity.Student的addStudent()方法</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean org.lanqiao.service.IStudentService.<br />addStudent(org.lanqiao.entity.Student)</td>
<td>org.lanqiao.service.IStudentService类（或接口）中的addStudent()方法，并且返回类型是boolean、参数类型是org.lanqiao.entity.Student</td>
</tr>
<tr>
<td>public * addStudent(org.lanqiao.entity.Student)</td>
<td>“*”代表任意返回类型</td>
</tr>
<tr>
<td>public void *( org.lanqiao.entity.Student)</td>
<td>“*”代表任意方法名</td>
</tr>
<tr>
<td>public void addStudent(..)</td>
<td>“..”代表任意参数列表</td>
</tr>
<tr>
<td>* org.lanqiao.service.<em>.</em>(..)</td>
<td>org.lanqiao.service.IStudentService包中，包含的所有方法（不包含子包中的方法）</td>
</tr>
<tr>
<td>* org.lanqiao.service..<em>.</em>(..)</td>
<td>org.lanqiao.service.IStudentService包中，包含的所有方法（包含子包中的方法）</td>
</tr>
</tbody></table>
<h3 id="1-3使用"><a href="#1-3使用" class="headerlink" title="1.3使用"></a>1.3使用</h3><p>①前置通知：实现接口 <code>MethodBeforeAdvice</code>重写方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LogBefore implements MethodBeforeAdvice&#123;</span><br><span class="line">	@Override</span><br><span class="line">	public void before(Method arg0, Object[] arg1, Object arg2) throws Throwable &#123;</span><br><span class="line">		System.out.println(&quot;前置通知&quot;);</span><br><span class="line">	&#125;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②后置通知：实现接口<code>AfterReturningAdvice</code>重写方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LogAfter implements AfterReturningAdvice&#123;</span><br><span class="line">	@Override</span><br><span class="line">	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable &#123;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③异常通知：实现接口<code>ThrowsAdvice</code>自己添加方法，具体见源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LogException implements ThrowsAdvice&#123;</span><br><span class="line">	public void afterThrowing(Method method, Object[] args,Object target, Throwable ex) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>④环绕通知：实现接口<code>MethodInterceptor</code>重写方法</p>
<pre><code>在使用环绕通知时，目标方法的一切信息 都可以通过invocation参数获取到
环绕通知 底层是通过拦截器实现的。</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LogAround implements MethodInterceptor&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Object invoke(MethodInvocation invocation) throws Throwable &#123;</span><br><span class="line">		Object result&#x3D;null;</span><br><span class="line">		try &#123;</span><br><span class="line">			&#x2F;&#x2F;前置通知</span><br><span class="line">			result&#x3D;invocation.proceed();</span><br><span class="line">			&#x2F;&#x2F;后置通知</span><br><span class="line">		&#125;catch(Exception e) &#123;</span><br><span class="line">			&#x2F;&#x2F;异常通知</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			&#x2F;&#x2F;最终通知</span><br><span class="line">		&#125;	</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、通过注解实现通知"><a href="#2、通过注解实现通知" class="headerlink" title="2、通过注解实现通知"></a>2、通过注解实现通知</h2><h3 id="2-1导包：与接口实现一样"><a href="#2-1导包：与接口实现一样" class="headerlink" title="2.1导包：与接口实现一样"></a>2.1导包：与接口实现一样</h3><h3 id="2-2配置："><a href="#2-2配置：" class="headerlink" title="2.2配置："></a>2.2配置：</h3><p>@Aspect不需要 加入扫描器，只需要开启即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开启 注解对AOP的支持 --&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy&gt;&lt;&#x2F;aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-表现形式"><a href="#2-3-表现形式" class="headerlink" title="2.3 表现形式"></a>2.3 表现形式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Aspect &#x2F;&#x2F;声明该类是一个通知</span><br><span class="line">public class LogAspectAnnotation &#123;</span><br><span class="line">	&#x2F;&#x2F;前置通知</span><br><span class="line">	@Before(&quot;execution(public void addStudent(..))&quot;)</span><br><span class="line">	public void logBefore(JoinPoint jp) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;后置通知</span><br><span class="line">	@AfterReturning(pointcut&#x3D;&quot;execution(public void addStudent(..))&quot;,returning&#x3D;&quot;returningValue&quot;)</span><br><span class="line">	public void logAfter(JoinPoint jp,Object returningValue) &#123;&#x2F;&#x2F;returningValue需要在@AfterReturning后面声明</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;异常通知，如果只捕获特定异常，则可以通过第二个参数实现：e</span><br><span class="line">	@AfterThrowing(pointcut&#x3D;&quot;execution(public void addStudent(..))&quot;,throwing&#x3D;&quot;e&quot;)</span><br><span class="line">	public void logException(JoinPoint jp,NullPointerException e) &#123;&#x2F;&#x2F;e需要在@AfterThrowing后面声明		</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;环绕通知，参数为ProceedingJoinPoint对象</span><br><span class="line">	@Around(&quot;execution(public void addStudent(..))&quot;)</span><br><span class="line">	public void logAround(ProceedingJoinPoint jp) &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			jp.proceed();</span><br><span class="line">	</span><br><span class="line">		&#125; catch (Throwable e) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;最终通知</span><br><span class="line">	@After(&quot;execution(public void addStudent(..))&quot;)</span><br><span class="line">	public void logAfter(JoinPoint jp) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;		</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-4-通过注解形式获取目标对象参数，需要使用一个对象：JoinPoint"><a href="#2-4-通过注解形式获取目标对象参数，需要使用一个对象：JoinPoint" class="headerlink" title="2.4 通过注解形式获取目标对象参数，需要使用一个对象：JoinPoint"></a>2.4 通过注解形式获取目标对象参数，需要使用一个对象：JoinPoint</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@AfterReturning(pointcut&#x3D;&quot;execution(public void addStudent(..))&quot;,returning&#x3D;&quot;returningValue&quot;)</span><br><span class="line">	public void logAfter(JoinPoint jp,Object returningValue) &#123;&#x2F;&#x2F;returningValue需要在@AfterReturning后面声明</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、通过配置将类转换为通知"><a href="#3、通过配置将类转换为通知" class="headerlink" title="3、通过配置将类转换为通知"></a>3、通过配置将类转换为通知</h2><h4 id="3-1基于Schema"><a href="#3-1基于Schema" class="headerlink" title="3.1基于Schema"></a>3.1基于Schema</h4><p>①编写一个普通类  public class LogAfter {}<br>②将该类 通过配置，转为一个“通知”</p>
<h4 id="3-2配置"><a href="#3-2配置" class="headerlink" title="3.2配置"></a>3.2配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 将要转换的类纳入容器 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;logSchema&quot; class&#x3D;&quot;cn.nap.aop.LogSchema&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">	&lt;!-- 关联 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">	&lt;!-- 配置切入点 --&gt;</span><br><span class="line">	&lt;aop:pointcut expression&#x3D;&quot;execution(public void cn.nap.service.impl.StudentServiceImpl.addStudent(cn.nap.entity.Student))&quot; id&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">	&lt;!-- &lt;aop:advisor advice-ref&#x3D;&quot;logSchema&quot; pointcut-ref&#x3D;&quot;pointcut1&quot;&#x2F;&gt; --&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- Schema方法 --&gt;</span><br><span class="line">	&lt;aop:aspect ref&#x3D;&quot;logSchema&quot;&gt;</span><br><span class="line">		&lt;aop:before method&#x3D;&quot;before&quot; pointcut&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">		&lt;aop:after-returning method&#x3D;&quot;afterReturning&quot; returning&#x3D;&quot;returningValue&quot; pointcut&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">		&lt;aop:after-throwing method&#x3D;&quot;exception&quot; throwing&#x3D;&quot;e&quot; pointcut&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">		&lt;aop:around method&#x3D;&quot;around&quot; pointcut&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">		&lt;aop:after method&#x3D;&quot;after&quot; pointcut&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">		</span><br><span class="line">	&lt;&#x2F;aop:aspect&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-3表现形式"><a href="#3-3表现形式" class="headerlink" title="3.3表现形式"></a>3.3表现形式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LogSchema &#123;</span><br><span class="line">	&#x2F;&#x2F;前置通知</span><br><span class="line">	public void before() &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;后置通知：JoinPoint，返回值returningValue在.xml文件中配置</span><br><span class="line">	public void afterReturning(JoinPoint js,Object returningValue) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;异常通知：</span><br><span class="line">	public void exception(NullPointerException e) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;环绕通知</span><br><span class="line">	public Object around(ProceedingJoinPoint jp) &#123;</span><br><span class="line">		&#x2F;&#x2F;前置</span><br><span class="line">		Object result&#x3D;null;</span><br><span class="line">		try &#123;</span><br><span class="line">			result&#x3D;jp.proceed();</span><br><span class="line">		&#125;catch(Throwable e) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;最终通知</span><br><span class="line">	public void after() &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="三、Spring开发Web项目"><a href="#三、Spring开发Web项目" class="headerlink" title="三、Spring开发Web项目"></a>三、Spring开发Web项目</h1><h2 id="1、Web项目初始化IOC容器"><a href="#1、Web项目初始化IOC容器" class="headerlink" title="1、Web项目初始化IOC容器"></a>1、Web项目初始化IOC容器</h2><h3 id="1-1过程"><a href="#1-1过程" class="headerlink" title="1.1过程"></a>1.1过程</h3><p>当服务启动时（tomcat），通过监听器将SpringIOC容器初始化一次（该监听器 spring-web.jar已经提供）<br>因此用spring开发web项目 至少需要7个jar： spring-java的6个jar + spring-web.jar，注意：web项目的jar包 是存入到WEB-INF/lib中</p>
<p>web项目启动时 ，会自动加载web.xml，因此需要在web.xml中加载 监听器（ioc容器初始化）。</p>
<h3 id="1-2配置"><a href="#1-2配置" class="headerlink" title="1.2配置"></a>1.2配置</h3><p>①方式一：自已配置<code>web.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 指定容器applicationContext.xml的位置 --&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">	&lt;!-- 监听器的父类ContextLoader中有一个contextConfigLocation属性保存着容器applicationContext.xml的位置 --&gt;</span><br><span class="line">	&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">	&lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">&lt;&#x2F;context-param&gt;</span><br><span class="line"></span><br><span class="line">&lt;listener&gt;</span><br><span class="line">		&lt;!-- 配置监听器，初始化容器applicationContext.xml --&gt;</span><br><span class="line">&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line">&lt;&#x2F;listener&gt;</span><br></pre></td></tr></table></figure>

<p>②方式二：在默认位置<code>WEB-INF</code>放置容器<code>applicationContext.xml</code></p>
<h2 id="2、Spring配置文件的拆分"><a href="#2、Spring配置文件的拆分" class="headerlink" title="2、Spring配置文件的拆分"></a>2、Spring配置文件的拆分</h2><h3 id="2-1按照三层结构拆分"><a href="#2-1按照三层结构拆分" class="headerlink" title="2.1按照三层结构拆分"></a>2.1按照三层结构拆分</h3><p>①拆分</p>
<blockquote>
<p>UI(html/css/jsp  、Servlet)  applicationContext-Controller.xml<br>Service :applicationContext-Service.xml<br>Dao :applicationContext-Dao.xml<br>公共 数据库:applicationContext-DB.xml</p>
</blockquote>
<p>②配置（3种方式）</p>
<blockquote>
<p>方式一：配置<code>web.xml</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">	&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">	&lt;param-value&gt;classpath:applicationContext-Controller.xml,</span><br><span class="line">				classpath:applicationContext-Service.xml,</span><br><span class="line">				classpath:applicationContext-Dao.xml</span><br><span class="line">	&lt;&#x2F;param-value&gt;</span><br><span class="line">&lt;&#x2F;context-param&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方式二：配置<code>web.xml</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">	&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">	&lt;param-value&gt;classpath:applicationContext-*.xml</span><br><span class="line">	&lt;&#x2F;param-value&gt;</span><br><span class="line">&lt;&#x2F;context-param&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方式三：在<code>applicationContext.xml</code>主容器中通过import引入其他容器，再在<code>web.xml</code>中配置主容器</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">	xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">	xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line">	&lt;import resource&#x3D;&quot;applicationContext-Controller.xml&quot;&#x2F;&gt;</span><br><span class="line">	&lt;import resource&#x3D;&quot;applicationContext-Service.xml&quot;&#x2F;&gt;</span><br><span class="line">	&lt;import resource&#x3D;&quot;applicationContext-Dao.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2按照功能拆分"><a href="#2-2按照功能拆分" class="headerlink" title="2.2按照功能拆分"></a>2.2按照功能拆分</h3><p>①例如：</p>
<blockquote>
<p>学生相关配置 applicationContextStudent.xml<br>班级相关配置 applicationContextClass.xml</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-themes-Next Setting</title>
    <url>/2020/08/25/hexo-themes-Next%20Setting/</url>
    <content><![CDATA[<h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><p>【1】Config：  <strong><em>_config.xml</em></strong>（themes）</p>
<p><code>avatar: </code></p>
<p><code>url: /images/头像.jpg</code></p>
<a id="more"></a>

<hr>
<h3 id="头像设置为圆形及头像旋转"><a href="#头像设置为圆形及头像旋转" class="headerlink" title="头像设置为圆形及头像旋转"></a>头像设置为圆形及头像旋转</h3><p>【1】Config ： <strong><em>\themes\next\source\css_common\outline\sidebar\sidebar-author.styl</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: site-author-image-border-width solid site-author-image-border-color;</span><br><span class="line">  &#x2F;&#x2F;头像设置为圆形</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  -webkit-border-radius: 50%;</span><br><span class="line">  -moz-border-radius: 50%;</span><br><span class="line">  transition: 1.4s all;</span><br><span class="line">&#125;</span><br><span class="line"> &#x2F;&#x2F;鼠标点击360度旋转</span><br><span class="line">.site-author-image:hover &#123;</span><br><span class="line">    -webkit-transform: rotate(360deg);</span><br><span class="line">    -moz-transform: rotate(360deg);</span><br><span class="line">    -ms-transform: rotate(360deg);</span><br><span class="line">    -transform: rotate(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-author-name &#123;</span><br><span class="line">  margin: $site-author-name-margin;</span><br><span class="line">  text-align: $site-author-name-align;</span><br><span class="line">  color: $site-author-name-color;</span><br><span class="line">  font-weight: $site-author-name-weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-description &#123;</span><br><span class="line">  margin-top: $site-description-margin-top;</span><br><span class="line">  text-align: $site-description-align;</span><br><span class="line">  font-size: $site-description-font-size;</span><br><span class="line">  color: $site-description-color;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="背景图片及透明度"><a href="#背景图片及透明度" class="headerlink" title="背景图片及透明度"></a>背景图片及透明度</h3><p>【1】Config（custom_file_path）：  <strong><em>_config.xml</em></strong>（themes）</p>
<blockquote>
<p> 只要取消最后一行的 #</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source&#x2F;_data&#x2F;head.njk</span><br><span class="line">  #header: source&#x2F;_data&#x2F;header.njk</span><br><span class="line">  #sidebar: source&#x2F;_data&#x2F;sidebar.njk</span><br><span class="line">  #postMeta: source&#x2F;_data&#x2F;post-meta.njk</span><br><span class="line">  #postBodyEnd: source&#x2F;_data&#x2F;post-body-end.njk</span><br><span class="line">  #footer: source&#x2F;_data&#x2F;footer.njk</span><br><span class="line">  #bodyEnd: source&#x2F;_data&#x2F;body-end.njk</span><br><span class="line">  #variable: source&#x2F;_data&#x2F;variables.styl</span><br><span class="line">  #mixin: source&#x2F;_data&#x2F;mixins.styl</span><br><span class="line">  style: source&#x2F;_data&#x2F;styles.styl</span><br></pre></td></tr></table></figure>

<p>【2】创建 source/_data/styles.styl（此source为blog根目录下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line"> 	background:url(&#x2F;images&#x2F;background.jpg);</span><br><span class="line"> 	background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【3】创建source/images文件夹，用于放置背景图片（此source为blog根目录下）</p>
<hr>
<h3 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h3><p>【1】主题自带：Config <code>_config.yml</code>（themes）</p>
<blockquote>
<figure class="highlight plain"><figcaption><span>Canvas ribbon</span></figcaption><table><tr><td class="code"><pre><span class="line"># Canvas ribbon</span><br><span class="line"># For more information: https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;ribbon.js</span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 300 # The width of the ribbon</span><br><span class="line">  alpha: 0.6 # The transparency of the ribbon</span><br><span class="line">  zIndex: -1 # The display level of the ribbon</span><br></pre></td></tr></table></figure>
</blockquote>
<p>【2】自己添加：</p>
<p>①在<code>\themes\next\layout\layout.njk</code>添加以下代码：</p>
<p><code>&lt;body&gt;</code>中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;bg_content&quot;&gt;</span><br><span class="line">  &lt;canvas id&#x3D;&quot;canvas&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><code>文件末</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;dynamic_bg.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>②创建 \themes\next\source\js\dynamic_bg.js 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var canvas &#x3D; document.getElementById(&quot;canvas&quot;);</span><br><span class="line">var ctx &#x3D; canvas.getContext(&quot;2d&quot;);</span><br><span class="line">var cw &#x3D; canvas.width &#x3D; window.innerWidth,</span><br><span class="line">  cx &#x3D; cw &#x2F; 2;</span><br><span class="line">var ch &#x3D; canvas.height &#x3D; window.innerHeight,</span><br><span class="line">  cy &#x3D; ch &#x2F; 2;</span><br><span class="line"></span><br><span class="line">ctx.fillStyle &#x3D; &quot;#000&quot;;</span><br><span class="line">var linesNum &#x3D; 16;</span><br><span class="line">var linesRy &#x3D; [];</span><br><span class="line">var requestId &#x3D; null;</span><br><span class="line"></span><br><span class="line">function Line(flag) &#123;</span><br><span class="line">  this.flag &#x3D; flag;</span><br><span class="line">  this.a &#x3D; &#123;&#125;;</span><br><span class="line">  this.b &#x3D; &#123;&#125;;</span><br><span class="line">  if (flag &#x3D;&#x3D; &quot;v&quot;) &#123;</span><br><span class="line">    this.a.y &#x3D; 0;</span><br><span class="line">    this.b.y &#x3D; ch;</span><br><span class="line">    this.a.x &#x3D; randomIntFromInterval(0, ch);</span><br><span class="line">    this.b.x &#x3D; randomIntFromInterval(0, ch);</span><br><span class="line">  &#125; else if (flag &#x3D;&#x3D; &quot;h&quot;) &#123;</span><br><span class="line">    this.a.x &#x3D; 0;</span><br><span class="line">    this.b.x &#x3D; cw;</span><br><span class="line">    this.a.y &#x3D; randomIntFromInterval(0, cw);</span><br><span class="line">    this.b.y &#x3D; randomIntFromInterval(0, cw);</span><br><span class="line">  &#125;</span><br><span class="line">  this.va &#x3D; randomIntFromInterval(25, 100) &#x2F; 100;</span><br><span class="line">  this.vb &#x3D; randomIntFromInterval(25, 100) &#x2F; 100;</span><br><span class="line"></span><br><span class="line">  this.draw &#x3D; function() &#123;</span><br><span class="line">    ctx.strokeStyle &#x3D; &quot;#ccc&quot;;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(this.a.x, this.a.y);</span><br><span class="line">    ctx.lineTo(this.b.x, this.b.y);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.update &#x3D; function() &#123;</span><br><span class="line">    if (this.flag &#x3D;&#x3D; &quot;v&quot;) &#123;</span><br><span class="line">      this.a.x +&#x3D; this.va;</span><br><span class="line">      this.b.x +&#x3D; this.vb;</span><br><span class="line">    &#125; else if (flag &#x3D;&#x3D; &quot;h&quot;) &#123;</span><br><span class="line">      this.a.y +&#x3D; this.va;</span><br><span class="line">      this.b.y +&#x3D; this.vb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.edges();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.edges &#x3D; function() &#123;</span><br><span class="line">    if (this.flag &#x3D;&#x3D; &quot;v&quot;) &#123;</span><br><span class="line">      if (this.a.x &lt; 0 || this.a.x &gt; cw) &#123;</span><br><span class="line">        this.va *&#x3D; -1;</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.b.x &lt; 0 || this.b.x &gt; cw) &#123;</span><br><span class="line">        this.vb *&#x3D; -1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (flag &#x3D;&#x3D; &quot;h&quot;) &#123;</span><br><span class="line">      if (this.a.y &lt; 0 || this.a.y &gt; ch) &#123;</span><br><span class="line">        this.va *&#x3D; -1;</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.b.y &lt; 0 || this.b.y &gt; ch) &#123;</span><br><span class="line">        this.vb *&#x3D; -1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (var i &#x3D; 0; i &lt; linesNum; i++) &#123;</span><br><span class="line">  var flag &#x3D; i % 2 &#x3D;&#x3D; 0 ? &quot;h&quot; : &quot;v&quot;;</span><br><span class="line">  var l &#x3D; new Line(flag);</span><br><span class="line">  linesRy.push(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Draw() &#123;</span><br><span class="line">  requestId &#x3D; window.requestAnimationFrame(Draw);</span><br><span class="line">  ctx.clearRect(0, 0, cw, ch);</span><br><span class="line"></span><br><span class="line">  for (var i &#x3D; 0; i &lt; linesRy.length; i++) &#123;</span><br><span class="line">    var l &#x3D; linesRy[i];</span><br><span class="line">    l.draw();</span><br><span class="line">    l.update();</span><br><span class="line">  &#125;</span><br><span class="line">  for (var i &#x3D; 0; i &lt; linesRy.length; i++) &#123;</span><br><span class="line">    var l &#x3D; linesRy[i];</span><br><span class="line">    for (var j &#x3D; i + 1; j &lt; linesRy.length; j++) &#123;</span><br><span class="line">      var l1 &#x3D; linesRy[j]</span><br><span class="line">      Intersect2lines(l, l1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Init() &#123;</span><br><span class="line">  linesRy.length &#x3D; 0;</span><br><span class="line">  for (var i &#x3D; 0; i &lt; linesNum; i++) &#123;</span><br><span class="line">    var flag &#x3D; i % 2 &#x3D;&#x3D; 0 ? &quot;h&quot; : &quot;v&quot;;</span><br><span class="line">    var l &#x3D; new Line(flag);</span><br><span class="line">    linesRy.push(l);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (requestId) &#123;</span><br><span class="line">    window.cancelAnimationFrame(requestId);</span><br><span class="line">    requestId &#x3D; null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cw &#x3D; canvas.width &#x3D; window.innerWidth,</span><br><span class="line">    cx &#x3D; cw &#x2F; 2;</span><br><span class="line">  ch &#x3D; canvas.height &#x3D; window.innerHeight,</span><br><span class="line">    cy &#x3D; ch &#x2F; 2;</span><br><span class="line"></span><br><span class="line">  Draw();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">  Init();</span><br><span class="line"></span><br><span class="line">  addEventListener(&#39;resize&#39;, Init, false);</span><br><span class="line">&#125;, 15);</span><br><span class="line"></span><br><span class="line">function Intersect2lines(l1, l2) &#123;</span><br><span class="line">  var p1 &#x3D; l1.a,</span><br><span class="line">    p2 &#x3D; l1.b,</span><br><span class="line">    p3 &#x3D; l2.a,</span><br><span class="line">    p4 &#x3D; l2.b;</span><br><span class="line">  var denominator &#x3D; (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);</span><br><span class="line">  var ua &#x3D; ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) &#x2F; denominator;</span><br><span class="line">  var ub &#x3D; ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) &#x2F; denominator;</span><br><span class="line">  var x &#x3D; p1.x + ua * (p2.x - p1.x);</span><br><span class="line">  var y &#x3D; p1.y + ua * (p2.y - p1.y);</span><br><span class="line">  if (ua &gt; 0 &amp;&amp; ub &gt; 0) &#123;</span><br><span class="line">    markPoint(&#123;</span><br><span class="line">      x: x,</span><br><span class="line">      y: y</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function markPoint(p) &#123;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.arc(p.x, p.y, 2, 0, 2 * Math.PI);</span><br><span class="line">  ctx.fill();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function randomIntFromInterval(mn, mx) &#123;</span><br><span class="line">  return ~~(Math.random() * (mx - mn + 1) + mn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="增加卡通人物"><a href="#增加卡通人物" class="headerlink" title="增加卡通人物"></a>增加卡通人物</h3><p>【1】Installation</p>
<p><code>npm install --save hexo-helper-live2d</code></p>
<p>【2】Models</p>
<p><code>npm install &#123;packagename&#125;</code></p>
<blockquote>
<p> {packagename} ==</p>
<ul>
<li><code>live2d-widget-model-chitose</code></li>
<li><code>live2d-widget-model-epsilon2_1</code></li>
<li><code>live2d-widget-model-gf</code></li>
<li><code>live2d-widget-model-haru/01</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>
<li><code>live2d-widget-model-haru/02</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>
<li><code>live2d-widget-model-haruto</code></li>
<li><code>live2d-widget-model-hibiki</code></li>
<li><code>live2d-widget-model-hijiki</code></li>
<li><code>live2d-widget-model-izumi</code></li>
<li><code>live2d-widget-model-koharu</code></li>
<li><code>live2d-widget-model-miku</code></li>
<li><code>live2d-widget-model-ni-j</code></li>
<li><code>live2d-widget-model-nico</code></li>
<li><code>live2d-widget-model-nietzsche</code></li>
<li><code>live2d-widget-model-nipsilon</code></li>
<li><code>live2d-widget-model-nito</code></li>
<li><code>live2d-widget-model-shizuku</code></li>
<li><code>live2d-widget-model-tororo</code></li>
<li><code>live2d-widget-model-tsumiki</code></li>
<li><code>live2d-widget-model-unitychan</code></li>
<li><code>live2d-widget-model-wanko</code></li>
<li><code>live2d-widget-model-z16</code></li>
</ul>
</blockquote>
<p>【3】Config  <strong><em>_config.xml</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  tagMode: false</span><br><span class="line">  log: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">  react:</span><br><span class="line">    opacity: 0.7</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h3><p>【1】创建~\source_data\styles.styl 在<code>&lt;body&gt;</code>添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    cursor: url(https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;TRHX&#x2F;CDN-for-itrhx.com@2.1.6&#x2F;images&#x2F;mouse.cur),auto;</span><br><span class="line">    background-color: @theme_background;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【2】鼠标样式：图片格式为.ico、.ani、.cur，建议使用.cur，如果使用.ani或者其他格式无效，原因是浏览器兼容问题，请阅读<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Basic_User_Interface/Using_URL_values_for_the_cursor_property">参考文档</a></p>
<p> <a href="https://www.axialis.com/">Axialis CursorWorkshop</a> 制作样</p>
<hr>
<h3 id="鼠标点击出现爱心"><a href="#鼠标点击出现爱心" class="headerlink" title="鼠标点击出现爱心"></a>鼠标点击出现爱心</h3><p>【1】创建 themes\next\source\js\love.js ，添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e&#x3D;0;e&lt;d.length;e++)d[e].alpha&lt;&#x3D;0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+&#x3D;.004,d[e].alpha-&#x3D;.013,d[e].el.style.cssText&#x3D;&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t&#x3D;&quot;function&quot;&#x3D;&#x3D;typeof e.onclick&amp;&amp;e.onclick;e.onclick&#x3D;function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a&#x3D;t.createElement(&quot;div&quot;);a.className&#x3D;&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a&#x3D;t.createElement(&quot;style&quot;);a.type&#x3D;&quot;text&#x2F;css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText&#x3D;e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d&#x3D;[];e.requestAnimationFrame&#x3D;function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3&#x2F;60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>



<p>【2】在 themes\next\layout\layout.njk 文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;love.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="鼠标点击显示字体"><a href="#鼠标点击显示字体" class="headerlink" title="鼠标点击显示字体"></a>鼠标点击显示字体</h3><p>【1】创建 themes\next\source\js\text.js ，添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a_idx &#x3D; 0;</span><br><span class="line">jQuery(document).ready(function($) &#123;</span><br><span class="line">    $(&quot;body&quot;).click(function(e) &#123;</span><br><span class="line">        var a &#x3D; new Array</span><br><span class="line">        (&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot;, &quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;);</span><br><span class="line">        var $i &#x3D; $(&quot;&lt;span&#x2F;&gt;&quot;).text(a[a_idx]);</span><br><span class="line">        a_idx &#x3D; (a_idx + 1) % a.length;</span><br><span class="line">        var x &#x3D; e.pageX,</span><br><span class="line">        y &#x3D; e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            &quot;z-index&quot;: 5,</span><br><span class="line">            &quot;top&quot;: y - 20,</span><br><span class="line">            &quot;left&quot;: x,</span><br><span class="line">            &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">            &quot;font-weight&quot;: &quot;bold&quot;,</span><br><span class="line">            &quot;color&quot;: &quot;#FF0000&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">        $(&quot;body&quot;).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">            &quot;top&quot;: y - 180,</span><br><span class="line">            &quot;opacity&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">      3000,</span><br><span class="line">      function() &#123;</span><br><span class="line">          $i.remove();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(&#39;delay()&#39;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function delay() &#123;</span><br><span class="line">    $(&quot;.buryit&quot;).removeAttr(&quot;onclick&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【2】在 themes\next\layout\layout.njk 文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--单击显示文字--&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;text.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="鼠标点击出现烟花效果"><a href="#鼠标点击出现烟花效果" class="headerlink" title="鼠标点击出现烟花效果"></a>鼠标点击出现烟花效果</h3><p>【1】创建 themes\next\source\js\fireworks.js ，添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX&#x3D;(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY&#x3D;e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t&#x3D;anime.random(0,360)*Math.PI&#x2F;180,a&#x3D;anime.random(50,180),n&#x3D;[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;colors[anime.random(0,colors.length-1)],a.radius&#x3D;anime.random(16,32),a.endPos&#x3D;setParticuleDirection(a),a.draw&#x3D;function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle&#x3D;a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;&quot;#F00&quot;,a.radius&#x3D;0.1,a.alpha&#x3D;0.5,a.lineWidth&#x3D;6,a.draw&#x3D;function()&#123;ctx.globalAlpha&#x3D;a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth&#x3D;a.lineWidth,ctx.strokeStyle&#x3D;a.color,ctx.stroke(),ctx.globalAlpha&#x3D;1&#125;,a&#125;function renderParticule(e)&#123;for(var t&#x3D;0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a&#x3D;createCircle(e,t),n&#x3D;[],i&#x3D;0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n&#x3D;this,i&#x3D;arguments;clearTimeout(a),a&#x3D;setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl&#x3D;document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx&#x3D;canvasEl.getContext(&quot;2d&quot;),numberOfParticules&#x3D;30,pointerX&#x3D;0,pointerY&#x3D;0,tap&#x3D;&quot;mousedown&quot;,colors&#x3D;[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize&#x3D;debounce(function()&#123;canvasEl.width&#x3D;2*window.innerWidth,canvasEl.height&#x3D;2*window.innerHeight,canvasEl.style.width&#x3D;window.innerWidth+&quot;px&quot;,canvasEl.style.height&#x3D;window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render&#x3D;anime(&#123;duration:1&#x2F;0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;A&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;&quot;IMG&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX&#x3D;(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY&#x3D;e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t&#x3D;anime.random(0,360)*Math.PI&#x2F;180,a&#x3D;anime.random(50,180),n&#x3D;[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;colors[anime.random(0,colors.length-1)],a.radius&#x3D;anime.random(16,32),a.endPos&#x3D;setParticuleDirection(a),a.draw&#x3D;function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle&#x3D;a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;&quot;#F00&quot;,a.radius&#x3D;0.1,a.alpha&#x3D;0.5,a.lineWidth&#x3D;6,a.draw&#x3D;function()&#123;ctx.globalAlpha&#x3D;a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth&#x3D;a.lineWidth,ctx.strokeStyle&#x3D;a.color,ctx.stroke(),ctx.globalAlpha&#x3D;1&#125;,a&#125;function renderParticule(e)&#123;for(var t&#x3D;0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a&#x3D;createCircle(e,t),n&#x3D;[],i&#x3D;0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n&#x3D;this,i&#x3D;arguments;clearTimeout(a),a&#x3D;setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl&#x3D;document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx&#x3D;canvasEl.getContext(&quot;2d&quot;),numberOfParticules&#x3D;30,pointerX&#x3D;0,pointerY&#x3D;0,tap&#x3D;&quot;mousedown&quot;,colors&#x3D;[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize&#x3D;debounce(function()&#123;canvasEl.width&#x3D;2*window.innerWidth,canvasEl.height&#x3D;2*window.innerHeight,canvasEl.style.width&#x3D;window.innerWidth+&quot;px&quot;,canvasEl.style.height&#x3D;window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render&#x3D;anime(&#123;duration:1&#x2F;0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;A&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;&quot;IMG&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</span><br></pre></td></tr></table></figure>

<p>【2】在 themes\next\layout\layout.njk 文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt; </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt; </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;fireworks.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h3 id="增加背景音乐"><a href="#增加背景音乐" class="headerlink" title="增加背景音乐"></a>增加背景音乐</h3><p>【1】选择<a href="https://music.163.com/#">音乐</a>，生成外链</p>
<img src="http://qflrz833q.hn-bkt.clouddn.com/Snipaste_2020-08-25_21-30-01.png" style="zoom: 50%;" />

<p>【2】复制代码</p>
<img src="http://qflrz833q.hn-bkt.clouddn.com/Snipaste_2020-08-25_21-31-28.png" style="zoom:50%;" />

<p>【3】增加到相对应的位置（比如：themes\next\layout_macro\sidebar.njk）</p>
<hr>
<h3 id="增加背景音乐（aplayer）"><a href="#增加背景音乐（aplayer）" class="headerlink" title="增加背景音乐（aplayer）"></a>增加背景音乐（aplayer）</h3><p>【1】下载<a href="https://github.com/MoePlayer/APlayer">aplayer</a>,解压后将<code>disk</code>文件夹复制到 \themes\next\source 中</p>
<p>【2】创建 \themes\next\source\dist\music.js ,添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const ap &#x3D; new APlayer(&#123;</span><br><span class="line">    container: document.getElementById(&#39;aplayer&#39;),</span><br><span class="line">    autoplay: false,</span><br><span class="line">    loop: &#39;all&#39;,</span><br><span class="line">    volume: 0.7,</span><br><span class="line">    listFolded: true,</span><br><span class="line">    listMaxHeight: 60,</span><br><span class="line">    audio: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#39;name1&#39;,</span><br><span class="line">            artist: &#39;artist1&#39;,</span><br><span class="line">            url: &#39;url1.mp3&#39;,</span><br><span class="line">            cover: &#39;cover1.jpg&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#39;name2&#39;,</span><br><span class="line">            artist: &#39;artist2&#39;,</span><br><span class="line">            url: &#39;url2.mp3&#39;,</span><br><span class="line">            cover: &#39;cover2.jpg&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>【3】配置：</p>
<ul>
<li>普通模式代码</li>
<li>播放列表模式代码</li>
<li>吸底模式代码</li>
<li>迷你模式代码</li>
</ul>
<blockquote>
<p>参考<a href="%5Bhttps://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html#%E4%B8%8B%E8%BD%BDaplayer%5D(https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html#%E4%B8%8B%E8%BD%BDaplayer)">blog</a> </p>
<p><a href="https://aplayer.js.org/#/zh-Hans/">中文文档</a></p>
</blockquote>
<p>【4】参数解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const ap &#x3D; new APlayer(&#123;</span><br><span class="line">    container: document.getElementById(&#39;aplayer&#39;), &#x2F;&#x2F;播放器容器元素</span><br><span class="line">    mini: false, &#x2F;&#x2F;迷你模式</span><br><span class="line">    autoplay: false, &#x2F;&#x2F;自动播放</span><br><span class="line">    theme: &#39;#FADFA3&#39;, &#x2F;&#x2F;主题色</span><br><span class="line">    loop: &#39;all&#39;, &#x2F;&#x2F;音频循环播放, 可选值: &#39;all&#39;全部循环, &#39;one&#39;单曲循环, &#39;none&#39;不循环</span><br><span class="line">    order: &#39;random&#39;, &#x2F;&#x2F;音频循环顺序, 可选值: &#39;list&#39;列表循环, &#39;random&#39;随机循环</span><br><span class="line">    preload: &#39;auto&#39;, &#x2F;&#x2F;预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;</span><br><span class="line">    volume: 0.7, &#x2F;&#x2F;默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span><br><span class="line">    mutex: true, &#x2F;&#x2F;互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</span><br><span class="line">    listFolded: false, &#x2F;&#x2F;列表默认折叠</span><br><span class="line">    listMaxHeight: 90, &#x2F;&#x2F;列表最大高度</span><br><span class="line">    lrcType: 3, &#x2F;&#x2F;歌词传递方式</span><br><span class="line">    audio: [ &#x2F;&#x2F;音频信息,包含以下</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#39;name1&#39;, &#x2F;&#x2F;音频名称</span><br><span class="line">            artist: &#39;artist1&#39;, &#x2F;&#x2F;音频艺术家</span><br><span class="line">            url: &#39;url1.mp3&#39;, &#x2F;&#x2F;音频外链</span><br><span class="line">            cover: &#39;cover1.jpg&#39;, &#x2F;&#x2F;音频封面</span><br><span class="line">            lrc: &#39;lrc1.lrc&#39;, &#x2F;&#x2F;音频歌词，配合上面的lrcType使用</span><br><span class="line">            theme: &#39;#ebd0c2&#39; &#x2F;&#x2F;切换到此音频时的主题色，比上面的 theme 优先级高</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#39;name2&#39;, &#x2F;&#x2F;如果只有一首歌，删掉这一块，如有更多歌曲按此格式逐渐往下添加</span><br><span class="line">            artist: &#39;artist2&#39;,</span><br><span class="line">            url: &#39;url2.mp3&#39;,</span><br><span class="line">            cover: &#39;cover2.jpg&#39;,</span><br><span class="line">            lrc: &#39;lrc2.lrc&#39;,</span><br><span class="line">            theme: &#39;#46718b&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>【5】部署：放置在自己想的位置（比如：\themes\next\layout_macro\sidebar.njk）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;dist&#x2F;APlayer.min.css&quot;&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;aplayer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;dist&#x2F;APlayer.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;dist&#x2F;music.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="添加博客运行时间"><a href="#添加博客运行时间" class="headerlink" title="添加博客运行时间"></a>添加博客运行时间</h3><p>【1】在 \themes\next\layout_partials\footer.njk 下添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span id&#x3D;&quot;timeDate&quot;&gt;载入天数...&lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;times&quot;&gt;载入时分秒...&lt;&#x2F;span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now &#x3D; new Date(); </span><br><span class="line">    function createtime() &#123; </span><br><span class="line">        var grt&#x3D; new Date(&quot;08&#x2F;10&#x2F;2018 17:38:00&quot;);&#x2F;&#x2F;在此处修改你的建站时间，格式：月&#x2F;日&#x2F;年 时:分:秒</span><br><span class="line">        now.setTime(now.getTime()+250); </span><br><span class="line">        days &#x3D; (now - grt ) &#x2F; 1000 &#x2F; 60 &#x2F; 60 &#x2F; 24; dnum &#x3D; Math.floor(days); </span><br><span class="line">        hours &#x3D; (now - grt ) &#x2F; 1000 &#x2F; 60 &#x2F; 60 - (24 * dnum); hnum &#x3D; Math.floor(hours); </span><br><span class="line">        if(String(hnum).length &#x3D;&#x3D;1 )&#123;hnum &#x3D; &quot;0&quot; + hnum;&#125; minutes &#x3D; (now - grt ) &#x2F; 1000 &#x2F;60 - (24 * 60 * dnum) - (60 * hnum); </span><br><span class="line">        mnum &#x3D; Math.floor(minutes); if(String(mnum).length &#x3D;&#x3D;1 )&#123;mnum &#x3D; &quot;0&quot; + mnum;&#125; </span><br><span class="line">        seconds &#x3D; (now - grt ) &#x2F; 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span><br><span class="line">        snum &#x3D; Math.round(seconds); if(String(snum).length &#x3D;&#x3D;1 )&#123;snum &#x3D; &quot;0&quot; + snum;&#125; </span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML &#x3D; &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;; </span><br><span class="line">        document.getElementById(&quot;times&quot;).innerHTML &#x3D; hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;; </span><br><span class="line">    &#125; </span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="增加动态线条效果"><a href="#增加动态线条效果" class="headerlink" title="增加动态线条效果"></a>增加动态线条效果</h3><p>【1】在 \themes\next\layout\layout.njk 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--动态线条背景--&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;</span><br><span class="line">color&#x3D;&quot;220,220,220&quot; opacity&#x3D;&#39;0.7&#39; zIndex&#x3D;&quot;-2&quot; count&#x3D;&quot;200&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;canvas-nest.js&#x2F;1.0.0&#x2F;canvas-nest.min.js&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="数字雨效果"><a href="#数字雨效果" class="headerlink" title="数字雨效果"></a>数字雨效果</h3><p>【1】创建 themes\next\source\js\DigitalRain.js ，添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    &#x2F;&#x2F;获取画布对象</span><br><span class="line">    var canvas &#x3D; document.getElementById(&quot;canvas&quot;);</span><br><span class="line">    &#x2F;&#x2F;获取画布的上下文</span><br><span class="line">    var context &#x3D;canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    var s &#x3D; window.screen;</span><br><span class="line">    var W &#x3D; canvas.width &#x3D; s.width;</span><br><span class="line">    var H &#x3D; canvas.height;</span><br><span class="line">    &#x2F;&#x2F;获取浏览器屏幕的宽度和高度</span><br><span class="line">    &#x2F;&#x2F;var W &#x3D; window.innerWidth;</span><br><span class="line">    &#x2F;&#x2F;var H &#x3D; window.innerHeight;</span><br><span class="line">    &#x2F;&#x2F;设置canvas的宽度和高度</span><br><span class="line">    canvas.width &#x3D; W;</span><br><span class="line">    canvas.height &#x3D; H;</span><br><span class="line">    &#x2F;&#x2F;每个文字的字体大小</span><br><span class="line">    var fontSize &#x3D; 12;</span><br><span class="line">    &#x2F;&#x2F;计算列</span><br><span class="line">    var colunms &#x3D; Math.floor(W &#x2F;fontSize);	</span><br><span class="line">    &#x2F;&#x2F;记录每列文字的y轴坐标</span><br><span class="line">    var drops &#x3D; [];</span><br><span class="line">    &#x2F;&#x2F;给每一个文字初始化一个起始点的位置</span><br><span class="line">    for(var i&#x3D;0;i&lt;colunms;i++)&#123;</span><br><span class="line">        drops.push(0);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;运动的文字</span><br><span class="line">    var str &#x3D;&quot;WELCOME TO WWW.ITRHX.COM&quot;;</span><br><span class="line">    &#x2F;&#x2F;4:fillText(str,x,y);原理就是去更改y的坐标位置</span><br><span class="line">    &#x2F;&#x2F;绘画的函数</span><br><span class="line">    function draw()&#123;</span><br><span class="line">        context.fillStyle &#x3D; &quot;rgba(238,238,238,.08)&quot;;&#x2F;&#x2F;遮盖层</span><br><span class="line">        context.fillRect(0,0,W,H);</span><br><span class="line">        &#x2F;&#x2F;给字体设置样式</span><br><span class="line">        context.font &#x3D; &quot;600 &quot;+fontSize+&quot;px  Georgia&quot;;</span><br><span class="line">        &#x2F;&#x2F;给字体添加颜色</span><br><span class="line">        context.fillStyle &#x3D; [&quot;#33B5E5&quot;, &quot;#0099CC&quot;, &quot;#AA66CC&quot;, &quot;#9933CC&quot;, &quot;#99CC00&quot;, &quot;#669900&quot;, &quot;#FFBB33&quot;, &quot;#FF8800&quot;, &quot;#FF4444&quot;, &quot;#CC0000&quot;][parseInt(Math.random() * 10)];&#x2F;&#x2F;randColor();可以rgb,hsl, 标准色，十六进制颜色</span><br><span class="line">        &#x2F;&#x2F;写入画布中</span><br><span class="line">        for(var i&#x3D;0;i&lt;colunms;i++)&#123;</span><br><span class="line">            var index &#x3D; Math.floor(Math.random() * str.length);</span><br><span class="line">            var x &#x3D; i*fontSize;</span><br><span class="line">            var y &#x3D; drops[i] *fontSize;</span><br><span class="line">            context.fillText(str[index],x,y);</span><br><span class="line">            &#x2F;&#x2F;如果要改变时间，肯定就是改变每次他的起点</span><br><span class="line">            if(y &gt;&#x3D; canvas.height &amp;&amp; Math.random() &gt; 0.99)&#123;</span><br><span class="line">                drops[i] &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">            drops[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    function randColor()&#123;&#x2F;&#x2F;随机颜色</span><br><span class="line">        var r &#x3D; Math.floor(Math.random() * 256);</span><br><span class="line">        var g &#x3D; Math.floor(Math.random() * 256);</span><br><span class="line">        var b &#x3D; Math.floor(Math.random() * 256);</span><br><span class="line">        return &quot;rgb(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    draw();</span><br><span class="line">    setInterval(draw,35);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>【2】在 \themes\next\source\css\main.styl 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canvas &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  right: 0px;</span><br><span class="line">  bottom: 0px;</span><br><span class="line">  min-width: 100%;</span><br><span class="line">  min-height: 100%;</span><br><span class="line">  height: auto;</span><br><span class="line">  width: auto;</span><br><span class="line">  z-index: -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【3】在 \themes\next\layout\layout.njk 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 数字雨 --&gt;</span><br><span class="line">&lt;canvas id&#x3D;&quot;canvas&quot; width&#x3D;&quot;1440&quot; height&#x3D;&quot;900&quot; &gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;DigitalRain.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="icon修改"><a href="#icon修改" class="headerlink" title="icon修改"></a>icon修改</h3><p>【1】Config <code>_config.yml</code>（themes）</p>
<hr>
<h3 id="字体修改"><a href="#字体修改" class="headerlink" title="字体修改"></a>字体修改</h3><p><a href="https://fonts.google.com/">Google Fonts</a></p>
<p>【1】Config <code>_config.yml</code>（themes）</p>
<hr>
<h3 id="添加文章结束标语"><a href="#添加文章结束标语" class="headerlink" title="添加文章结束标语"></a>添加文章结束标语</h3><p>【1】创建 \themes\next\layout_macro\passage-end-tag.njk 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style&#x3D;&quot;text-align:center;color: #FA8072;font-size:10px;&quot;&gt;------------- End  &lt;i class&#x3D;&quot;fa fa-hourglass-end&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;  Thank For Your Reading -------------&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>其中的icon可以去<a href="http://www.fontawesome.com.cn/faicons/">Font Awesome</a>自行查找替换。字体大小修改其中的<code>font-size</code>，位置修改其中的<code>text-align</code>，颜色修改其中的<code>color</code>,可以参考<a href="https://blog.yleao.com/2018/0731/%E5%AD%97%E4%BD%93%E3%80%81%E5%AD%97%E5%8F%B7%E4%B8%8E%E9%A2%9C%E8%89%B2%E6%B5%8B%E8%AF%95.html#%E9%A2%9C%E8%89%B2%E5%88%97%E8%A1%A8">这里</a>。</p>
<p>【2】在 \themes\next\layout_macro\post.njk 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#39;passage-end-tag.njk&#39; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>【3】Config <code>_config.yml</code>（themes）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="tag标记的更改"><a href="#tag标记的更改" class="headerlink" title="tag标记的更改"></a>tag标记的更改</h3><p>【1】替换 \themes\next\layout_macro\post.njk 中的<code>&#123;%- set tag_indicate = '<i class="fa fa-tag"></i>' if theme.tag_icon else '#"></i>' %&#125;</code>为<code>&#123;%- set tag_indicate = '<i class="fa fa-tag"></i>' if theme.tag_icon else '<i class="fa fa-tag"></i>' %&#125;</code></p>
<p>想使用其他图标可在<a href="http://www.fontawesome.com.cn/faicons/">Fontawesome</a>内自行查找。</p>
<hr>
<h3 id="给文章添加脚注"><a href="#给文章添加脚注" class="headerlink" title="给文章添加脚注"></a>给文章添加脚注</h3><p>【1】<code>npm install hexo-footnotes --save</code></p>
<p>【2】Config <code>_config.yml</code>（hexo）增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins:</span><br><span class="line">  - hexo-footnotes</span><br></pre></td></tr></table></figure>

<p>【3】安装完成后按官方<a href="https://githut.com/LouisBarranqueiro/hexo-footnotes#syntax">readme</a>的方式书写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">basic footnote[^1]</span><br><span class="line">here is an inline footnote[^2](inline footnote)</span><br><span class="line">and another one[^3]</span><br><span class="line">and another one[^4]</span><br><span class="line"></span><br><span class="line">[^1]: basic footnote content</span><br><span class="line">[^3]: paragraph</span><br><span class="line">footnote</span><br><span class="line">content</span><br><span class="line">[^4]: footnote content with some [markdown](https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Markdown)</span><br></pre></td></tr></table></figure>

<p>注脚的内容最好放在文章的最后面，否则可能会出错误。</p>
<hr>
<h3 id="增加本地搜索"><a href="#增加本地搜索" class="headerlink" title="增加本地搜索"></a>增加本地搜索</h3><p>【1】<code>npm install hexo-generator-searchdb --save</code></p>
<p>【2】Config <code>_config.yml</code>（hexo）增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: excerpt</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>【3】Config <code>_config.yml</code>（themes）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>【1】创建 \themes\next\source\404.html 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8;&quot;&#x2F;&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge,chrome&#x3D;1&quot; &#x2F;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;all&quot; &#x2F;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;index,follow&quot;&#x2F;&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;style&#x2F;404style.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;plain&quot; src&#x3D;&quot;http:&#x2F;&#x2F;www.qq.com&#x2F;404&#x2F;search_children.js&quot;</span><br><span class="line">          charset&#x3D;&quot;utf-8&quot; homePageUrl&#x3D;&quot;&#x2F;&quot;</span><br><span class="line">          homePageName&#x3D;&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;data.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;page.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>其中<code>homePageUrl</code>与<code>homePageName</code>可自定义。</p>
<hr>
<h3 id="添加置顶"><a href="#添加置顶" class="headerlink" title="添加置顶"></a>添加置顶</h3><p>【1】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>【2】在文章中加入<code>top: x</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: </span><br><span class="line">tags:</span><br><span class="line">  - life</span><br><span class="line">  - music</span><br><span class="line">categories:</span><br><span class="line">  - </span><br><span class="line">abbrlink: 31015</span><br><span class="line">date: </span><br><span class="line">top: 1</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>【3】在 \themes\next\layout_macro\post.njk文件中<code>&lt;div class=&quot;post-meta-container&quot;&gt;</code>后 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    &lt;font color&#x3D;#FFFFFF&gt;&lt;b style&#x3D;&quot;background-color:#A9A9A9&quot;&gt;　Top　&lt;&#x2F;b&gt;&lt;&#x2F;font&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="加密文章"><a href="#加密文章" class="headerlink" title="加密文章"></a>加密文章</h3><p>首先<code>npm install --save hexo-blog-encrypt</code>下载插件。</p>
<p>下好插件后将<code>password, abstract, message</code>等字段添加到要加密文章的头部，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2020-05-02 18:00:00</span><br><span class="line">password: 设定的密码</span><br><span class="line">abstract: 该博客的摘要，会显示在博客的列表页</span><br><span class="line">message:  查看博客时，密码输入框上面的描述性文字</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<p>最后再使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>在本地预览加密的文章。</p>
<hr>
<h3 id="Hitokoto"><a href="#Hitokoto" class="headerlink" title="Hitokoto"></a>Hitokoto</h3><p><a href="https://hitokoto.cn/api">点击此处 </a>访问官方  API</p>
<p>【1】创建 ~blog\source_data\sidebar.njk 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- none-select-br --&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- hitokoto --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;hitokoto-title&quot;&gt;</span><br><span class="line">	&lt;i class&#x3D;&quot;fa fa-paragraph&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">	&lt;b&gt;一言&lt;&#x2F;b&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;hitokoto&quot;&gt;:D 获取中...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;i id&#x3D;&quot;hitofrom&quot;&gt;:D 获取中...&lt;&#x2F;i&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bluebird@3&#x2F;js&#x2F;browser&#x2F;bluebird.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;whatwg-fetch@2.0.3&#x2F;fetch.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  fetch(&#39;https:&#x2F;&#x2F;v1.hitokoto.cn&#39;)</span><br><span class="line">    .then(function (res)&#123;</span><br><span class="line">      return res.json();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(function (data) &#123;</span><br><span class="line">      var hitokoto &#x3D; document.getElementById(&#39;hitokoto&#39;);</span><br><span class="line">      hitokoto.innerText &#x3D; &#39;\xa0\xa0\xa0\xa0\xa0\xa0\xa0&#39; + data.hitokoto;</span><br><span class="line">      var hitofrom &#x3D; document.getElementById(&#39;hitofrom&#39;);</span><br><span class="line">      hitofrom.innerText &#x3D; &quot;——&quot; + data.from + &#39;\xa0&#39;; </span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(function (err) &#123;</span><br><span class="line">      console.error(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>【2】在~blog\source_data\styles.styl 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;hitokoto</span><br><span class="line"></span><br><span class="line">.hitokoto-title &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#hitokoto &#123;</span><br><span class="line">  text-align: left;</span><br><span class="line">  font-family: &quot;Microsoft YaHei&quot;;</span><br><span class="line">  font-size: 11px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#hitofrom &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  font-family: &quot;Microsoft YaHei&quot;;</span><br><span class="line">  font-size: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【3】Config <code>_congig.yml</code> （themes）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source&#x2F;_data&#x2F;head.njk</span><br><span class="line">  #header: source&#x2F;_data&#x2F;header.njk</span><br><span class="line">  sidebar: source&#x2F;_data&#x2F;sidebar.njk</span><br><span class="line">  #postMeta: source&#x2F;_data&#x2F;post-meta.njk</span><br><span class="line">  #postBodyEnd: source&#x2F;_data&#x2F;post-body-end.njk</span><br><span class="line">  #footer: source&#x2F;_data&#x2F;footer.njk</span><br><span class="line">  #bodyEnd: source&#x2F;_data&#x2F;body-end.njk</span><br><span class="line">  #variable: source&#x2F;_data&#x2F;variables.styl</span><br><span class="line">  #mixin: source&#x2F;_data&#x2F;mixins.styl</span><br><span class="line">  style: source&#x2F;_data&#x2F;styles.styl</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h3><p>【1】创建 blog\scripts\tags\fold_tag.js 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* global hexo *&#x2F;</span><br><span class="line">&#x2F;&#x2F; Usage: &#123;% fold 点击显&#x2F;隐内容 %&#125; Something &#123;% endfold %&#125;</span><br><span class="line">function fold (args, content) &#123;</span><br><span class="line">  var text &#x3D; args[0];</span><br><span class="line">  if(!text) text &#x3D; &quot;点击显&#x2F;隐&quot;;</span><br><span class="line">  return &#39;&lt;div&gt;&lt;div class&#x3D;&quot;fold_hider&quot;&gt;&lt;div class&#x3D;&quot;close hider_title&quot;&gt;&#39; + text + &#39;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;fold&quot;&gt;\n&#39; + hexo.render.renderSync(&#123;text: content, engine: &#39;markdown&#39;&#125;) + &#39;\n&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">hexo.extend.tag.register(&#39;fold&#39;, fold, &#123;ends: true&#125;);</span><br></pre></td></tr></table></figure>

<p>【2】创建 blog\source\js\fold_action.js 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $(document).on(&#39;click&#39;, &#39;.fold_hider&#39;, function()&#123;</span><br><span class="line">        $(&#39;&gt;.fold&#39;, this.parentNode).slideToggle();</span><br><span class="line">        $(&#39;&gt;:first&#39;, this).toggleClass(&#39;open&#39;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F;默认情况下折叠</span><br><span class="line">    $(&quot;div.fold&quot;).css(&quot;display&quot;,&quot;none&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>【3】创建 blog\source_data\body-end.njk 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 代码压缩 #&#125;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;fold_action.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>【4】在 blog\source_data\style.styl 添加样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 代码折叠功能添加</span><br><span class="line">.hider_title&#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    color: #ef4a05;</span><br><span class="line">&#125;</span><br><span class="line">.close:before&#123;</span><br><span class="line">    content: &quot;▼&quot;;</span><br><span class="line">&#125;</span><br><span class="line">.open:before&#123;</span><br><span class="line">    content: &quot;▲&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div><div class="fold_hider"><div class="close hider_title">【5】使用</div></div><div class="fold">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% fold 点击显&#x2F;隐内容 %&#125;</span><br><span class="line">something you want to fold, include code block.</span><br><span class="line">&#123;% endfold %&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<hr>
<h3 id="简体-繁体切换"><a href="#简体-繁体切换" class="headerlink" title="简体/繁体切换"></a>简体/繁体切换</h3><p>【1】创建 blog\source\js\tw_cn.js 添加<a href="https://tding.top/js/tw_cn.js">这里</a>复制的代码</p>
<p>【2】创建 blog\source_data\footer.njk 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;translate-style&quot;&gt;</span><br><span class="line">繁&#x2F;简：&lt;a id&#x3D;&quot;translateLink&quot; href&#x3D;&quot;javascript:translatePage();&quot;&gt;繁体</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;tw_cn.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var defaultEncoding &#x3D; 2; &#x2F;&#x2F;网站编写字体是否繁体，1-繁体，2-简体</span><br><span class="line">var translateDelay &#x3D; 0; &#x2F;&#x2F;延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span><br><span class="line">var cookieDomain &#x3D; &quot;https:&#x2F;&#x2F;tding.top&#x2F;&quot;; &#x2F;&#x2F;Cookie地址, 一定要设定, 通常为你的网址</span><br><span class="line">var msgToTraditionalChinese &#x3D; &quot;繁体&quot;; &#x2F;&#x2F;此处可以更改为你想要显示的文字</span><br><span class="line">var msgToSimplifiedChinese &#x3D; &quot;简体&quot;; &#x2F;&#x2F;同上，但两处均不建议更改</span><br><span class="line">var translateButtonId &#x3D; &quot;translateLink&quot;; &#x2F;&#x2F;默认互换id</span><br><span class="line">translateInitilization();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>主题设置 going……</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud</title>
    <url>/2020/10/20/springcloud/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Spring 进阶</title>
    <url>/2020/10/09/Spring-%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="一、IOC容器"><a href="#一、IOC容器" class="headerlink" title="一、IOC容器"></a>一、IOC容器</h1><p>方式一：applicationContext.xml</p>
<blockquote>
<p>存bean：</p>
<p>取bean：ApplicationContext context= new ClassPathXmlApplicationContext(“applicationContext.xml”);<br>        context.getBean();</p>
</blockquote>
<p>方式二：配置类（带有@Configuration注解的类）</p>
<blockquote>
<p>非三层组件：</p>
<p>存bean：@Bean（id默认是方法名，可以用@Bean(“id”)指定）+方法返回值</p>
<p>取bean：ApplicationContext context  = new AnnotationConfigApplicationContext(MyConfig.class) ;</p>
<p>还可以通过import、FactoryBean</p>
</blockquote>
<blockquote>
<p>对于三层组件（@Component）：@Controller，@Service，@Repository</p>
<p>存bean：</p>
<p>①在三层组件前加@Controller，@Service，@Repository或@Component</p>
<p>②将注解所在的包纳入IOC容器（ComponentScan）</p>
<ul>
<li><p>方式一：纳入xml配置文件</p>
</li>
<li><ul>
<li><pre><code class="xml">&lt;context:component-scan base-package=&quot;cn.nap.controller&quot;  &gt;&lt;/context:component-scan&gt;</code></pre>
</li>
</ul>
</li>
<li><p>方式二：在配置类上加入注解@ComponentScan（value=”cn.nap.controller”）</p>
</li>
</ul>
</blockquote>
<h1 id="二、Bean作用域（Scope指定-常见singleton、prototype）"><a href="#二、Bean作用域（Scope指定-常见singleton、prototype）" class="headerlink" title="二、Bean作用域（Scope指定,常见singleton、prototype）"></a>二、Bean作用域（Scope指定,常见singleton、prototype）</h1><p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/Spring%E4%B8%ADBean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F.png"></p>
<p>方式一：xml文件形式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：注解形式(配置类)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br></pre></td></tr></table></figure>

<p>关于prototype：原型、多实例</p>
<blockquote>
<p>容器在初始化时，不创建对象；只是在每次使用时（每次从容器获取对象时 ，context.getBean(Xxxx)）,再创建对象;并且  每次getBean()都会创建一个新的对象</p>
</blockquote>
<p>关于singleton:</p>
<blockquote>
<p>容器在初始化时，就会创建对象（唯一的一个）；以后再getBean时，不再产生新的bean。singleton也支持延迟加载（懒加载）：在第一次使用时产生。 @Lazy</p>
</blockquote>
<h1 id="三、条件注解（springBoot）"><a href="#三、条件注解（springBoot）" class="headerlink" title="三、条件注解（springBoot）"></a>三、条件注解（springBoot）</h1><blockquote>
<p>a.准备 javabean<br>b.增加条件Bean：给每个Bean设置条件 ，必须实现Condition接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OilCarCondition</span>  <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前环境是 oil，则加入 OilCar</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取环境</span></span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line">        String carType = environment.getProperty(<span class="string">&quot;car.type&quot;</span>);<span class="comment">//car.type=&quot;oil&quot;</span></span><br><span class="line">        <span class="keyword">if</span>(carType.contains(<span class="string">&quot;oil&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c.根据条件，加入IoC容器        </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Conditional(OilCarCondition.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">oilCar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OilCar() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h1 id="四、import给IOC容器注入Bean"><a href="#四、import给IOC容器注入Bean" class="headerlink" title="四、import给IOC容器注入Bean"></a>四、import给IOC容器注入Bean</h1><p>直接编写@Import（XXX.class）</p>
<h1 id="五、FactoryBean给IOC容器注入Bean"><a href="#五、FactoryBean给IOC容器注入Bean" class="headerlink" title="五、FactoryBean给IOC容器注入Bean"></a>五、FactoryBean给IOC容器注入Bean</h1><blockquote>
<p>1、准备bean。实现类和重写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Apple.class;  //Apple</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2、注册bean。注册到@Bean中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FactoryBean&lt;Apple&gt; <span class="title">myFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> MyFactoryBean();<span class="comment">//到底是什么？MyFactoryBean 、Apple ？</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>3、区分第一种方式(@Bean+返回值)：通过&amp;区分 </p>
<p>不加&amp;,获取的是最内部真实的Apple；<br>如果加了&amp;，获取的 是FacotryBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = context.getBean(<span class="string">&quot;myFactoryBean&quot;</span>);</span><br><span class="line">System.out.println(obj);</span><br><span class="line"></span><br><span class="line">Object obj2 = context.getBean(<span class="string">&quot;&amp;myFactoryBean&quot;</span>);</span><br><span class="line">System.out.println(obj2);</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="六、Bean的生命周期"><a href="#六、Bean的生命周期" class="headerlink" title="六、Bean的生命周期"></a>六、Bean的生命周期</h1><p>方式一：适用于：@Bean+返回值方式</p>
<p>Bean的生命周期：创建(new …)、初始化（赋初值）、  ….、销毁</p>
<p>IoC容器在初始化时，会自动创建对象(构造方法) -&gt;init -&gt;…..-&gt;当容器关闭时 调用destroy…</p>
<blockquote>
<p>xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">init-method</span>=<span class="string">&quot;myInit&quot;</span>  <span class="attr">destroy-method</span>=<span class="string">&quot;myDestroy&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>

<p>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(value=&quot;stu&quot;,initMethod = &quot;myInit&quot;,destroyMethod = &quot;myDestroy&quot;)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>方式二：适用于功能性注解（三层注解和其他）</p>
<p>JAVA规范 ：JSR250</p>
<p>将响应组件加入 @Component注解、 给初始化方法加@PostConstruct、给销毁方法加@PreDestroy</p>
<p>@PostConstruct：相当于方法一的init<br>@PreDestroy：相当于方法一的destroy</p>
<p>方法三(接口)：适用于三层组件（扫描器+三层组件）<br>    InitializingBean初始化<br>    DisposableBean 销毁</p>
<blockquote>
<p>如果是注解形式 ， 随便写一个方法 ，然后加上相应注解即可<br>如果是接口形式，必须 实现接口中规定的方法</p>
</blockquote>
<p>方法四：（给容器中的所有Bean加初始化、销毁）一个接口<br>    接口：适用于三层组件<br>    接口BeanPostProcessor：拦截了所有中容器的Bean</p>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Premiere</title>
    <url>/2020/09/23/Premiere/</url>
    <content><![CDATA[<h2 id="序列："><a href="#序列：" class="headerlink" title="序列："></a>序列：</h2><p>设置：</p>
<img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200923201119.png" style="zoom:50%;" />

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200923202715.png"></p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>选择工具：A</p>
<p>剃刀工具：B</p>
<p>添加编辑：C</p>
<p>放大：H</p>
<p>缩小：G</p>
<p>撤销：Ctrl+Z</p>
<p>重做：Ctrl+Shift+Z</p>
<p>复制：Alt</p>
<p>速度/持续时间：Ctrl+J（更改速度、倒放）</p>
<p>比率拉伸工具：D（更改速度）</p>
<p>素材选择：I和O</p>
<p>合并素材：Delete</p>
<p>添加标记：M（时间线和素材都可以标记）</p>
<p>多选：Shift</p>
<p>启用：Ctrl+B（打开或关闭选中的音频、视频）</p>
<p>交叉溶解：Ctrl+T</p>
<p>标记剪辑：X（查看IO标记的时长）</p>
<p>取消IO标记：Alt+X</p>
<h2 id="关键帧（两种方法）"><a href="#关键帧（两种方法）" class="headerlink" title="关键帧（两种方法）"></a>关键帧（两种方法）</h2><p>方法一：效果控件</p>
<p>可以复制移动</p>
<p>方法二：时间线上按住Ctrl用鼠标点击</p>
<h2 id="转场（黑场也是素材，转场余量）"><a href="#转场（黑场也是素材，转场余量）" class="headerlink" title="转场（黑场也是素材，转场余量）"></a>转场（黑场也是素材，转场余量）</h2><p>快捷键Ctrl+T</p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200923221713.png"></p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200923222004.png"></p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>入点：I</p>
<p>出点：上键+左键+O</p>
<p>标记剪辑：X（查看IO标记的时长）</p>
<p>取消IO标记：Alt+X</p>
<p>导出：Ctrl+E</p>
<h2 id="音视频下载"><a href="#音视频下载" class="headerlink" title="音视频下载"></a>音视频下载</h2><p>火狐：Video DownloadHelper插件</p>
<h2 id="davinci"><a href="#davinci" class="headerlink" title="davinci"></a>davinci</h2><p>在交付面板：</p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200924005109.png"></p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200924005149.png"></p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200924005222.png"></p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200924005343.png"></p>
<p><img src="C:/Users/yueke/AppData/Roaming/Typora/typora-user-images/image-20200924005444897.png" alt="image-20200924005444897"></p>
<h2 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h2>]]></content>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2020/09/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、方式一：继承Thread"><a href="#一、方式一：继承Thread" class="headerlink" title="一、方式一：继承Thread"></a>一、方式一：继承Thread</h2><h3 id="1、程序、进程与线程"><a href="#1、程序、进程与线程" class="headerlink" title="1、程序、进程与线程"></a>1、程序、进程与线程</h3><blockquote>
<p>在操作系统中运行的程序就是一个进程，如看视频</p>
<p>程序是静态的，进程是动态的</p>
<p>一个进程可以有多个线程，如看视频时又声音、图像、字幕等</p>
<p>线程就是独立的执行路径</p>
<p>程序运行时，即使没有自己创建线程，后台也会有多个线程，如gc线程。主线程</p>
<p>多线程的运行顺序是有调度器安排的，调度器与操作系统紧密相关，不是人为干预的</p>
<p>对公共资源进行操作时，会存在资源抢夺的问题，需要加入并发控制</p>
</blockquote>
<table>
<thead>
<tr>
<th>区别</th>
<th>Process</th>
<th>Thread</th>
</tr>
</thead>
<tbody><tr>
<td>根本区别</td>
<td>资源分配的单位</td>
<td>调度和执行的单位</td>
</tr>
<tr>
<td>开销</td>
<td>每个进程都有独立的代码和数据空间（进程上下文），进程间切换会有较大的开销</td>
<td>同一类线程可以共享代码和数据空间，每个线程有独立的运行栈和PCRegister，线程间切换开销较进程小</td>
</tr>
<tr>
<td>所处环境</td>
<td>在操作系统中可以同时运行多个任务（程序）</td>
<td>在同一个程序中有多个线程同时执行</td>
</tr>
<tr>
<td>分配内存</td>
<td>系统在运行时会为每个进程分配不同的内存空间</td>
<td>线程所使用的资源是所属进程的资源，线程间共享资源</td>
</tr>
<tr>
<td>包含关系</td>
<td>一个进程可以只有一个线程，也可以有多个线程</td>
<td>线程是进程的一部分，可以看出是轻量级的进程</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadNew threadNew=<span class="keyword">new</span> ThreadNew();</span><br><span class="line">        threadNew.start();<span class="comment">//不保证立即执行，由CPU调用</span></span><br><span class="line"><span class="comment">//        threadNew.run();//普通调用方法，不是开启线程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="二、方式二：实现Runnable接口"><a href="#二、方式二：实现Runnable接口" class="headerlink" title="二、方式二：实现Runnable接口"></a>二、方式二：实现Runnable接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNewImplement</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadNewImplement threadNew=<span class="keyword">new</span> ThreadNewImplement();</span><br><span class="line">        <span class="keyword">new</span> Thread(threadNew).start();<span class="comment">//借助Thread代理对象启动线程，不保证立即执行，由CPU调用</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>较方法一可以对同一份资源进行多个代理：</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 12306抢票，共享资源，并发（线程安全）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> naps</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Web12306</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ticketNums=<span class="number">99</span>;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(ticketNums&lt;<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span> &#123;<span class="comment">//模拟网络延时</span></span><br><span class="line">				Thread.sleep(<span class="number">200</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+ticketNums--);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Thread.currentThread().getName();</span><br><span class="line">		Web12306 web=<span class="keyword">new</span> Web12306();</span><br><span class="line">		<span class="keyword">new</span> Thread(web,<span class="string">&quot;乘客一&quot;</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(web,<span class="string">&quot;乘客二&quot;</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(web,<span class="string">&quot;乘客三&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="三、方式三：实现Callable接口（JUC并发编程）"><a href="#三、方式三：实现Callable接口（JUC并发编程）" class="headerlink" title="三、方式三：实现Callable接口（JUC并发编程）"></a>三、方式三：实现Callable接口（JUC并发编程）</h2><p>call（）方法：可以有返回值，可以抛异常</p>
<p>方式一和方式二的run（）方法：返回值为void，不能抛异常</p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200923105501.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDownloader</span> <span class="keyword">implements</span> <span class="title">Callable</span> &lt;<span class="title">Boolean</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String url;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CDownloader</span><span class="params">(String url,String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.url=url;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		WebDownloader wd=<span class="keyword">new</span> WebDownloader();</span><br><span class="line">		wd.download(url, name);</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">		CDownloader cd1=<span class="keyword">new</span> CDownloader(<span class="string">&quot;https://imgsa.baidu.com/forum/w%3D580/sign=d7ddb480e550352ab16125006343fb1a/7656482c11dfa9ec673ded206ed0f703918fc178.jpg&quot;</span>,<span class="string">&quot;雷神.jpg&quot;</span>);</span><br><span class="line">		CDownloader cd2=<span class="keyword">new</span> CDownloader(<span class="string">&quot;https://imgsa.baidu.com/forum/w%3D580/sign=6292aff34f166d223877159c76230945/06a3d0fc1e178a828e685798fa03738da977e833.jpg&quot;</span>,<span class="string">&quot;银护.jpg&quot;</span>);</span><br><span class="line">		CDownloader cd3=<span class="keyword">new</span> CDownloader(<span class="string">&quot;https://imgsa.baidu.com/forum/w%3D580/sign=0072563ea0af2eddd4f149e1bd100102/1ca76d0e0cf3d7ca0db0174efe1fbe096a63a9cd.jpg&quot;</span>,<span class="string">&quot;选择你的英雄.jpg&quot;</span>);	</span><br><span class="line">		<span class="comment">//创建执行服务</span></span><br><span class="line">		ExecutorService ser=Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">		<span class="comment">//提交执行</span></span><br><span class="line">		Future&lt;Boolean&gt; result1=ser.submit(cd1);</span><br><span class="line">		Future&lt;Boolean&gt; result2=ser.submit(cd2);</span><br><span class="line">		Future&lt;Boolean&gt; result3=ser.submit(cd3);</span><br><span class="line">		<span class="comment">//获取结果</span></span><br><span class="line">		<span class="keyword">boolean</span> r1=result1.get();</span><br><span class="line">		<span class="keyword">boolean</span> r2=result1.get();</span><br><span class="line">		<span class="keyword">boolean</span> r3=result1.get();</span><br><span class="line">		<span class="comment">//关闭服务</span></span><br><span class="line">		ser.shutdownNow();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、线程状态"><a href="#四、线程状态" class="headerlink" title="四、线程状态"></a>四、线程状态</h2><p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200923123614.png"></p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200923125050.png"></p>
<h3 id="1、进入就绪状态"><a href="#1、进入就绪状态" class="headerlink" title="1、进入就绪状态"></a>1、进入就绪状态</h3><blockquote>
<p>1、start()</p>
<p>2、阻塞解除</p>
<ul>
<li>进入阻塞状态（wait）</li>
<li><ul>
<li>Timed_Waiting</li>
<li><ul>
<li>sleep()</li>
</ul>
</li>
<li><ul>
<li>join()</li>
</ul>
</li>
<li>Blocked</li>
<li><ul>
<li>wait()</li>
</ul>
</li>
<li><ul>
<li>IO流read、writer</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>3、yield()</p>
<p>4、jvm本身线程切换</p>
</blockquote>
<h3 id="2、线程停止（正常、中断）"><a href="#2、线程停止（正常、中断）" class="headerlink" title="2、线程停止（正常、中断）"></a>2、线程停止（正常、中断）</h3><p>加入标志位，从外部正常终止程序</p>
<h3 id="3、阻塞：解除阻塞后进入就绪状态"><a href="#3、阻塞：解除阻塞后进入就绪状态" class="headerlink" title="3、阻塞：解除阻塞后进入就绪状态"></a>3、阻塞：解除阻塞后进入就绪状态</h3><h4 id="sleep-：static-方法"><a href="#sleep-：static-方法" class="headerlink" title="sleep()：static 方法"></a>sleep()：static 方法</h4><blockquote>
<p>可以抛出异常或捕获异常InterruptException</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Date endTime=<span class="keyword">new</span> Date(System.currentTimeMillis()+<span class="number">1000</span>*<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">long</span> end=endTime.getTime();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;mm:ss&quot;</span>).format(endTime));</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            endTime=<span class="keyword">new</span> Date(endTime.getTime()-<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">if</span>(end-<span class="number">10000</span>&gt;endTime.getTime())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="yield-：static-方法"><a href="#yield-：static-方法" class="headerlink" title="yield()：static 方法"></a>yield()：static 方法</h4><blockquote>
<p>暂停当前执行的线程，礼让其他线程（不一定）</p>
<p>不是阻塞线程，而是将程序从运行状态转入就绪状态，让CPU调度器重新调度</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * yiled 礼让线程，暂停线程，直接进入就绪状态并不是阻塞状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldDemo02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Lambda&quot;</span>+i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i%<span class="number">20</span>==<span class="number">0</span>) &#123;</span><br><span class="line">				Thread.yield();</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="join-：成员方法"><a href="#join-：成员方法" class="headerlink" title="join()：成员方法"></a>join()：成员方法</h4><blockquote>
<p>合并线程，待此线程执行完毕之后再执行其他线程</p>
<p>此时其他线程进入阻塞状态</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Thread t=<span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Lambda&quot;</span>+i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		t.start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">20</span>) &#123;</span><br><span class="line">				t.join();<span class="comment">//插队，main 被阻塞</span></span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、优先级（概率大，不是绝对优先）"><a href="#4、优先级（概率大，不是绝对优先）" class="headerlink" title="4、优先级（概率大，不是绝对优先）"></a>4、优先级（概率大，不是绝对优先）</h3><blockquote>
<p>线程优先级，代表概率，不代表顺序</p>
<p>t.setPriority(10);//直接数字</p>
<p>t1.setPriority(Thread.MAX_PRIORITY);</p>
<p>getPriority():查看优先级</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程优先级，代表概率，不代表顺序</span></span><br><span class="line"><span class="comment"> * 1、NORM_PRIORITY 5 (默认)</span></span><br><span class="line"><span class="comment"> * 2、MIN_PRIORITY 1</span></span><br><span class="line"><span class="comment"> * 3、MAX_PRIORITY 10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> naps</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getPriority());</span><br><span class="line">		MyPriority mp=<span class="keyword">new</span> MyPriority();</span><br><span class="line">		Thread t=<span class="keyword">new</span> Thread(mp);</span><br><span class="line">		Thread t1=<span class="keyword">new</span> Thread(mp);</span><br><span class="line">		Thread t2=<span class="keyword">new</span> Thread(mp);</span><br><span class="line">		Thread t3=<span class="keyword">new</span> Thread(mp);</span><br><span class="line">		Thread t4=<span class="keyword">new</span> Thread(mp);</span><br><span class="line">		Thread t5=<span class="keyword">new</span> Thread(mp);</span><br><span class="line">		<span class="comment">//设置优先级在启动前</span></span><br><span class="line">		t.setPriority(<span class="number">10</span>);<span class="comment">//直接数字</span></span><br><span class="line">		t1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">		t2.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">		t3.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">		t4.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">		t5.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">		</span><br><span class="line">		t.start();</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		t3.start();</span><br><span class="line">		t4.start();</span><br><span class="line">		t5.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+Thread.currentThread().getPriority());	</span><br><span class="line">		Thread.yield();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、守护线程"><a href="#5、守护线程" class="headerlink" title="5、守护线程"></a>5、守护线程</h3><blockquote>
<p>jvm不用等待守护线程停止才能停止</p>
<p>setDaemon(true)：设置线程为守护线程</p>
</blockquote>
<h2 id="五、线程同步、并发控制"><a href="#五、线程同步、并发控制" class="headerlink" title="五、线程同步、并发控制"></a>五、线程同步、并发控制</h2><blockquote>
<p>synchronized方法：锁方法</p>
<p>synchronized块：锁对象</p>
<p>死锁：一个同步块持有多个对象锁</p>
</blockquote>
<blockquote>
<p>并发控制：</p>
<p>生产者消费者模式：</p>
<ul>
<li>管程法</li>
<li>信号灯法</li>
</ul>
<p>wait()和notify()</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2020/09/19/JVM/</url>
    <content><![CDATA[<h2 id="一、类的加载过程-加载Class文件"><a href="#一、类的加载过程-加载Class文件" class="headerlink" title="一、类的加载过程(加载Class文件)"></a>一、类的加载过程(加载Class文件)</h2><h3 id="1、加载：Loading"><a href="#1、加载：Loading" class="headerlink" title="1、加载：Loading"></a>1、加载：Loading</h3><p>1、</p>
<blockquote>
<p>通过一个类的全限定名获取定义此类的<code>二进制字节流</code></p>
<p>将这个字节流所代表的的<code>静态存储结构</code>转化为方法区的<code>运行时数据结构</code></p>
<p>在内存中生成一个代表此类的<code>java.lang.Class对象</code>，作为此类的各种数据的<code>访问入口</code></p>
</blockquote>
<p>2、加载.class文件的方式</p>
<blockquote>
<ul>
<li>从本地系统中直接加载</li>
<li>通过网络获取：例如：Web Applet</li>
<li>从压缩包中获取：jar、war</li>
<li>使用反射动态代理在运行时加载</li>
<li>有其他文件生成：JSP应用</li>
<li>从专门的数据库获取，比较少</li>
<li>从加密文件中（防止Class文件被反编译）获取，如apk文件</li>
</ul>
</blockquote>
<h3 id="2、链接：Linking-验证、准备、解析"><a href="#2、链接：Linking-验证、准备、解析" class="headerlink" title="2、链接：Linking(验证、准备、解析)"></a>2、链接：Linking(验证、准备、解析)</h3><p>1、验证：Verify（0xCAFEBABE）</p>
<blockquote>
<p>确保Class文件的字节流中包含信息符合虚拟机要求，保证被加载类的正确性和虚拟机的安全</p>
<p>包括四种验证：文件格式验证、元数据验证、字节码验证、符号引用验证</p>
</blockquote>
<p>2、准备：Prepare</p>
<blockquote>
<p>为<code>类变量</code>分配内存并设置变量的默认初始值（<code>零值</code>）</p>
<p>注意：①不包含用<code>final修饰的static</code>，final在编译时就初始化了，在该阶段会显式初始化</p>
<p>②不会初始化实例变量，<code>类变量会分配到方法区中，实例变量会随对象被分配到堆中</code></p>
</blockquote>
<p>3、解析：Resolve</p>
<blockquote>
<p>将常量池（constant pool）中的符号引用转换为直接引用的过程：</p>
<p>解析主要针对类或接口、字段、类方法、接口方法，对应常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info、CONSTANT_InterfaceMethodref_info</p>
</blockquote>
<img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200919135354.png" style="zoom:67%;" />

<h3 id="3、初始化：Initialization"><a href="#3、初始化：Initialization" class="headerlink" title="3、初始化：Initialization"></a>3、初始化：Initialization</h3><blockquote>
<p>执行类构造器方法<code>&lt;clinit&gt;()</code>的过程。</p>
<p>关于<code>&lt;clinit&gt;()</code>:</p>
<ul>
<li>不需定义，是javac编译器自动收集类中的所有<code>类变量的赋值动作</code>和<code>静态代码块</code>中的语句合并而来</li>
<li><code>&lt;clinit&gt;()</code>中指令执行顺序按照源文件的顺序执行</li>
<li>区别于类的构造器（<code>init&lt;&gt;()</code>）</li>
<li>子类在执行<code>&lt;clinit&gt;()</code>前，父类的<code>&lt;clinit&gt;()</code>已经执行完</li>
<li>虚拟机保证一个类的<code>&lt;clinit&gt;()</code>在多线程下被同步加锁</li>
</ul>
</blockquote>
<img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200919135326.png" style="zoom:50%;" />

<h2 id="二、类加载器-包含关系"><a href="#二、类加载器-包含关系" class="headerlink" title="二、类加载器(包含关系)"></a>二、类加载器(包含关系)</h2><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200919140757.png" style="zoom:67%;" />

<h3 id="1、自定义加载器（继承自ClassLoader）"><a href="#1、自定义加载器（继承自ClassLoader）" class="headerlink" title="1、自定义加载器（继承自ClassLoader）"></a>1、自定义加载器（继承自ClassLoader）</h3><p>1、ExtClassLoader、AppClassLoader(继承java.lang.ClassLoader)</p>
<img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200919141933.png" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);<span class="comment">//sun.misc.Launcher$ExtClassLoader@7ea987ac</span></span><br><span class="line"></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);<span class="comment">//null,由引导类加载器进行加载</span></span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader = TestClassLoader.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//java 核心类库由引导类加载器进行加载</span></span><br><span class="line">        ClassLoader classLoader1 = String.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader1);<span class="comment">//null，由引导类加载器进行加载</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>①ExtClassLoader：(扩展类加载器)</p>
<blockquote>
<p>父类加载器为：引导类加载器</p>
<p>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK安装目录jre/lib/ext扩展目录下加载类库。<code>如果用户创建的jar放在此目录下，也会有扩展类加载器加载</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String property = System.getProperty(<span class="string">&quot;java.ext.dirs&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String path:property.split(<span class="string">&quot;;&quot;</span>))&#123;</span><br><span class="line">            System.out.println(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下路径中的类使用扩展类加载器加载：</p>
<p>E:\……\jdk-8u261\jre\lib\ext<br>C:\WINDOWS\Sun\Java\lib\ext</p>
<p>②AppClassLoader：（应用程序类加载器）</p>
<blockquote>
<p>父类加载器为：引导类加载器</p>
<p>负责加载环境变量classpath或系统属性为java.class.path指定路径下的类库</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String property = System.getProperty(<span class="string">&quot;java.class.path&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String path:property.split(<span class="string">&quot;;&quot;</span>))&#123;</span><br><span class="line">            System.out.println(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、用户自定义加载器：（User-Defined Class Loader）</p>
<blockquote>
<p>隔离加载类</p>
<p>修改类的加载方式</p>
<p>扩展加载源</p>
<p>防止源码泄露</p>
</blockquote>
<h3 id="2、引导类加载器-Bootstrap-Class-Loader"><a href="#2、引导类加载器-Bootstrap-Class-Loader" class="headerlink" title="2、引导类加载器:(Bootstrap Class Loader)"></a>2、引导类加载器:(Bootstrap Class Loader)</h3><blockquote>
<p>引导类加载器使用C/C++实现，嵌套在JVM内部</p>
<p>加载java的核心类库，提供JVM自身需要的类</p>
<p>没有父类加载器</p>
<p>加载扩展类和应用类加载器，并指定他们的父类加载器</p>
<p>出于安全考虑，只加载包名以java、javax、sun等开头的类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootStrapClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        URL[] urLs = Launcher.getBootstrapClassPath().getURLs();</span><br><span class="line">        <span class="keyword">for</span>(URL url:urLs)&#123;</span><br><span class="line">            System.out.println(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下路径中的类的加载器为引导类加载器：</p>
<p>file:/……/jdk-8u261/jre/lib/resources.jar<br>file:/……//jdk-8u261/jre/lib/rt.jar<br>file:/……//jdk-8u261/jre/lib/sunrsasign.jar<br>file:/……//jdk-8u261/jre/lib/jsse.jar<br>file:/……//jdk-8u261/jre/lib/jce.jar<br>file:……//jdk-8u261/jre/lib/charsets.jar<br>file:/……//jdk-8u261/jre/lib/jfr.jar<br>file:/……//jdk-8u261/jre/classes</p>
<h3 id="3、双亲委派机制"><a href="#3、双亲委派机制" class="headerlink" title="3、双亲委派机制"></a>3、双亲委派机制</h3><p>1、原理：</p>
<blockquote>
<p>①当一个类加载器收到类加载请求，它不会马上直接加载，而是把加载请求委托给父类的加载器去执行</p>
<p>②如果父类加载器还有父类加载器，则进一步向父类委托，最终会委托到引导类加载器</p>
<p>③父类加载器可以完成类加载任务则返回，若父类加载器不能完成加载任务则由子类加载器去加载</p>
</blockquote>
<p>2、优势：</p>
<blockquote>
<p>①避免类的重复加载</p>
<p>②保护查询安全，防止核心API被随意篡改</p>
</blockquote>
<p>3、沙箱安全机制：保护java核心源代码</p>
<h2 id="三、运行时数据区（Runtime对象）"><a href="#三、运行时数据区（Runtime对象）" class="headerlink" title="三、运行时数据区（Runtime对象）"></a>三、运行时数据区（Runtime对象）</h2><p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200919160429.png"></p>
<blockquote>
<p>每个线程独有：Program Counter Register、JVM Stacks、Native Method Stacks</p>
<p>线程间共享：Heap、堆外内存（Metaspace、CodeCache)，主要优化对象</p>
</blockquote>
<h3 id="1、Program-Counter-Register"><a href="#1、Program-Counter-Register" class="headerlink" title="1、Program Counter Register"></a>1、Program Counter Register</h3><blockquote>
<p>存储下一条将要执行的指令的地址，配合执行引擎读取下一条指令；执行Native方法，未指定值（Undefined）</p>
<p>是一块很小的内存空间，无GC和OOM</p>
<p>线程私有</p>
</blockquote>
<img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200919165638.png" style="zoom:67%;" />

<h3 id="2、JVM-Stacks（解决程序运行的方法调用问题）"><a href="#2、JVM-Stacks（解决程序运行的方法调用问题）" class="headerlink" title="2、JVM Stacks（解决程序运行的方法调用问题）"></a>2、JVM Stacks（解决程序运行的方法调用问题）</h3><p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200920130739.png"></p>
<blockquote>
<p>java的指令是根据栈来设计的，目的在于java的跨平台性（CPU架构不同，所以不能基于寄存器）</p>
<ul>
<li><p>优点：跨平台、指令集小，编译器容易实现</p>
</li>
<li><p>缺点：性能下降、实现同样功能需要更多指令</p>
</li>
</ul>
<p>线程私有，在线程创建时创建，其内部保存的栈帧对应着方法的调用</p>
<ul>
<li>栈帧中保存着方法的局部变量（基本类型和引用）、部分结果</li>
<li>栈帧参与方法的调用和返回</li>
</ul>
<p>栈是一种快速有效的分配存储方式，访问速度仅次于PCRegister；无GC，有OOM</p>
</blockquote>
<p><a href="https://docs.oracle.com/en/java/javase/11/">自定义栈大小</a></p>
<img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200919174636.png" style="zoom:67%;" />

<p>2.1、栈帧（Stack Frame）：一一对应方法</p>
<blockquote>
<p>内部结构：</p>
<ul>
<li>局部变量表：Local Variables</li>
<li>操作数栈：Operand Stack</li>
<li>动态链接：DynamicLinking（指向运行时常量池的方法引用）</li>
<li>方法返回地址：Return Address（方法正常退出或异常退出的定义）</li>
<li>附加信息</li>
</ul>
</blockquote>
<p>①局部变量表：Local Variables</p>
<blockquote>
<p>变量槽：slot，long和double类型占用两个变量槽</p>
<p>注意：</p>
<ul>
<li>局部变量必须人为的初始化，否则在使用时会报错</li>
<li>成员变量中的类变量有两次初始化机会：准备阶段（零值）和初始化阶段（程序员在代码中定义）</li>
<li>成员变量中的实例变量随对象的创建被分配到堆中</li>
</ul>
</blockquote>
<p>②操作数栈：Operand Stack</p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200920114057.png"></p>
<p>③方法返回地址：Return Address</p>
<blockquote>
<p>方法的退出栈帧时，需要恢复上层方法的局部变量表、操作数栈、将方法返回值压入调用者栈帧的操作数栈、设置PC寄存器值等。</p>
<p>异常退出的方法不会给它的调用者产生返回值（异常表）</p>
<p>字节码返回指令包括：</p>
<ul>
<li>ireturn：返回值是boolean/byte/chat/short/int</li>
<li>lreturn：返回值是long</li>
<li>freturn：返回值是float</li>
<li>dreturn：返回值是double</li>
<li>areturn：返回值是引用类型</li>
<li>return：返回值是void、<code>&lt;clinit&gt;()</code>、<code>&lt;init&gt;()</code></li>
</ul>
</blockquote>
<h3 id="3、Native-Method-Stacks"><a href="#3、Native-Method-Stacks" class="headerlink" title="3、Native Method Stacks"></a>3、Native Method Stacks</h3><blockquote>
<p>本地方法：native修饰的非java语句(C)定义的方法</p>
<p>线程私有</p>
<p>管理本地方法的调用</p>
</blockquote>
<h3 id="4、Heap"><a href="#4、Heap" class="headerlink" title="4、Heap"></a>4、Heap</h3><blockquote>
<p>一个JVM实例对应一个堆内存，堆时java内存管理的核心区域</p>
<p>java堆在JVM启动的时候被创建，其大小也被确定了下来（-Xms10m  -Xmx10m）</p>
<p>线程共享堆内存，但是可以划分线程私有的缓冲区（Thread Local Allocation Buffer,TLAB）</p>
<p>堆内存在物理上可以不连续，但在逻辑上是连续的</p>
<p>是GC重点区域</p>
</blockquote>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200920143524.png"></p>
<p>4.1、堆内存空间大小设置：</p>
<blockquote>
<p>-Xms：表示堆的起始内存，等价于：-XX:InitialHeapSize</p>
<ul>
<li>此处对空间只是年轻代和老年代</li>
<li>-X：jvm运行参数</li>
<li>ms：memory start</li>
</ul>
<p>-Xmx：表示堆的最大内存，等价于：-XX:MaxHeapSize</p>
<ul>
<li>此处对空间只是年轻代和老年代</li>
<li>一旦内存超过设置的最大内存，将会出现OutOfMemoryError异常</li>
</ul>
<p>默认的堆空间大小：</p>
<ul>
<li><p>初始内存大小：电脑物理内存大小/64</p>
</li>
<li><p>最大内存大小：电脑物理内存大小/4</p>
</li>
<li><pre><code>Runtime.getRuntime().totalMemory()
Runtime.getRuntime().maxMemory()</code></pre>
</li>
</ul>
</blockquote>
<p>查看内存设置的参数：</p>
<p>方式一：命令行：jsp、jstat -gc 进程ID</p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200920151738.png"></p>
<p>方式二：-XX:+PrintGCDetails</p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200920152218.png"></p>
<p>4.2、新生代和老年代</p>
<blockquote>
<p>可以配置新生代和老年代在堆空间中的占比：</p>
<ul>
<li>-XX:NewRatio=2(默认为2，可以修改)：表示新生代占一份，老年代占两份，即新生代占总推内存的三分之一</li>
</ul>
</blockquote>
<p>①新生代</p>
<blockquote>
<p>在新生代中可以配置Eden区和Survivo0、survivor1区的占比：</p>
<ul>
<li>-XX:SurvivorRatio=8(默认值，<code>但是需要显式地进行设置</code>，可以修改)：Eden与其他两个区比为8:1:1</li>
<li>-XX:-UseadaptiveSizePolicy：如果内存比例不是8:1:1，需要关闭自适应内存分配策略</li>
</ul>
<p>几乎所有的对象都是在Eden区被new出来的</p>
<p>-Xmn：设置新生代空间大小，设置之后以此为准</p>
</blockquote>
<p>4.3、为对象分配内存</p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200920160859.png"></p>
<blockquote>
<p>只有当Eden区内存满时才会触发YGC/Minor GC，s0或s1满时不会</p>
<p>关于s0和s1：谁空谁是to</p>
<p>关于垃圾回收：频繁回收新生代，很少在老年代收集，几乎不再元空间收集</p>
<p>关于阈值(默认15)：设置</p>
<ul>
<li>-XX:MaxTenuringThreshold=<N></li>
</ul>
</blockquote>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200920162029.png"></p>
<p>4.4、Minor GC(YGC)、Major GC、Full GC</p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200920163404.png"></p>
<blockquote>
<p>Minor GC(YGC):</p>
<ul>
<li>Eden区满时引发</li>
<li>S0和S1区满时不会引发</li>
<li>每次YGC会清理整个新生代的内存，包括S0和S1</li>
<li>YGC会引发STW，暂停用户的线程，等回收结束后，用户线程才会恢复运行</li>
</ul>
</blockquote>
<blockquote>
<p>Major GC:</p>
<ul>
<li>老年代区满时引发</li>
<li>每次Major GC经常会伴随一次YGC（但在Parallel Scavenge收集器的收集策略中就直接进行Major GC）</li>
<li>Major GC速度比YGC慢10倍以上，STW时间更长</li>
<li>Major GC后内存还不足，就会OOM</li>
</ul>
</blockquote>
<blockquote>
<p>Full GC:</p>
<ul>
<li>调用System.gc()时，系统建议Full GC，但是不必然执行</li>
<li>老年代空间不足</li>
<li>方法区空间不足</li>
</ul>
</blockquote>
<p>4.5、内存分配策略（对象提升（Promotion）规则）</p>
<blockquote>
<p>优先分配到Eden</p>
<p>大对象直接分配到老年区</p>
<p>长期存活的对象分配到老年区</p>
<p>动态对象（频繁在S0和S1中交换）年龄判断：</p>
<ul>
<li>Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，则可以把年龄大于或等于该年龄的对象直接放在老年区</li>
</ul>
<p>空间分配担保：</p>
<ul>
<li>-XX:HandlePromotionFailure</li>
</ul>
</blockquote>
<h3 id="5、方法区（永久代或元空间）（类信息【类型信息、域信息、方法信息】、常量池、即时编译的代码缓存）"><a href="#5、方法区（永久代或元空间）（类信息【类型信息、域信息、方法信息】、常量池、即时编译的代码缓存）" class="headerlink" title="5、方法区（永久代或元空间）（类信息【类型信息、域信息、方法信息】、常量池、即时编译的代码缓存）"></a>5、方法区（永久代或元空间）（类信息【类型信息、域信息、方法信息】、常量池、即时编译的代码缓存）<img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200921092851.png"></h3><p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200921093439.png"></p>
<blockquote>
<p>方法区（Meta Area）：</p>
<ul>
<li>线程间共享</li>
<li>在JVM启动时创建，实际物理内存和堆一样可以不连续</li>
<li>用于保存类信息，类太多超内存会执行Full GC并会OOM（比如加载大量的jar包；Tomcat部署大量工程）</li>
<li>可以对方法区大小进行设置，可以固定大小或动态变换</li>
<li><ul>
<li>JDK7及以前：</li>
<li><ul>
<li>-XX:PermSize：设置永久代初始空间，默认为20.75M</li>
<li>-XX:MaxPermSize：设置永久代最大可分配空间，32位机默认为64M,64位机默认是82M</li>
</ul>
</li>
<li>JDK8及以后：</li>
<li><ul>
<li>-XX:MetaspaceSize：默认值21M</li>
<li>-XX:MaxMetaspaceSize：默认值-1，即没有限制</li>
</ul>
</li>
</ul>
</li>
<li>关闭JVM时内存被释放</li>
</ul>
</blockquote>
<p>5.1、运行时常量池</p>
<blockquote>
<p>包括：各种字面量、符号引用（类型、域和方法）</p>
<p>由字节码常量池经过类加载后存在方法区中的常量池</p>
</blockquote>
<p>5.2、Hotspot方法区的演进</p>
<blockquote>
<p>融合Jrockit：Jrockit没有永久代，不用设置</p>
<p>为永久代设置空间大小是很难确定的</p>
<p>对永久代进行调优是困难的</p>
</blockquote>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200921115154.png"></p>
<img src="https://gitee.com/devilnaps/picbed/raw/7061ff4d32ae961281c8b55e7e2f7bc799f3f36d/img/20200921115514.png" style="zoom:50%;" />

<img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200921115811.png" style="zoom:50%;" />

<p><img src="https://gitee.com/devilnaps/picbed/raw/cb626fa22fcafca7990f03a6e3a50fc7b834ce67/img/20200921115421.png"></p>
<h2 id="四、对象实例化内存布局"><a href="#四、对象实例化内存布局" class="headerlink" title="四、对象实例化内存布局"></a>四、对象实例化内存布局</h2><h3 id="1、对象实例化方式"><a href="#1、对象实例化方式" class="headerlink" title="1、对象实例化方式"></a>1、对象实例化方式</h3><p>1、new</p>
<blockquote>
<ul>
<li>new </li>
<li>Xxx的静态方法：单例模式</li>
<li>XxxFactory的静态方法</li>
</ul>
</blockquote>
<p>2、Class的newInstance()</p>
<blockquote>
<p>反射，只能调用空参的构造器，修饰分为public</p>
</blockquote>
<p>3、constructor的newInstance()</p>
<blockquote>
<p>反射，可以调用空参、带参的构造器，权限无要求</p>
</blockquote>
<p>4、clone()</p>
<blockquote>
<p>不调用构造器，需要实现Cloneable接口</p>
</blockquote>
<p>5、反序列化</p>
<blockquote>
<p>从文件中、网络小红获取二进制流</p>
</blockquote>
<p>6、第三方库Objenesis</p>
<h3 id="2、创建对象步骤"><a href="#2、创建对象步骤" class="headerlink" title="2、创建对象步骤"></a>2、创建对象步骤</h3><p>1、加载类信息</p>
<p>2、为对象分配内存</p>
<p>3、处理并发（TLAB）</p>
<p>4、属性的默认初始化（零值）</p>
<p>5、设置对象头信息</p>
<p>6、属性的显式初始化、代码块中的初始化、构造器中的初始化（<init>）</p>
<h3 id="3、内存布局-对象头、实例数据、对齐填充"><a href="#3、内存布局-对象头、实例数据、对齐填充" class="headerlink" title="3、内存布局(对象头、实例数据、对齐填充)"></a>3、内存布局(对象头、实例数据、对齐填充)</h3><p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200921132219.png"></p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200921133201.png"></p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200921133343.png"></p>
<h2 id="五、直接内存"><a href="#五、直接内存" class="headerlink" title="五、直接内存"></a>五、直接内存</h2><blockquote>
</blockquote>
<h2 id="六、执行引擎（）"><a href="#六、执行引擎（）" class="headerlink" title="六、执行引擎（）"></a>六、执行引擎（）</h2><p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200921150820.png"></p>
<p>1、解释器</p>
<blockquote>
<p>响应速度快</p>
<p>-Xint：设置只采用解释器模式执行程序</p>
<p>-Xcomp：设置只采用JIT编译器执行程序，如果即时编译器出现问题，解释器会介入</p>
<p>-Xmixed：设置两种混合模式，默认</p>
</blockquote>
<p>2、JIT编译器</p>
<blockquote>
<p>响应速度慢，但是速度快；</p>
<p>热度衰减：一段时间内方法被调用的次数不足以把它提交给即时编译器编译，这个方法的调用计数器就会减少一半，称为热度的衰减，这段时间称为半衰周期</p>
<ul>
<li>-XX:-UseCounterDecay：关闭热度衰减</li>
<li>-XX:CounterHalfLifeTime：设置半衰周期时间，单位：秒</li>
</ul>
<p>C1和C2JIT编译器：</p>
<ul>
<li>C1：-client指定，耗时短</li>
<li>C2：-server</li>
</ul>
</blockquote>
<h2 id="七、String"><a href="#七、String" class="headerlink" title="七、String"></a>七、String</h2><h3 id="1、拼接"><a href="#1、拼接" class="headerlink" title="1、拼接"></a>1、拼接</h3><blockquote>
<p>方式一：拼接：+</p>
<ul>
<li><p>拼接符号左右两边是字符常量或常量引用：编译期优化</p>
</li>
<li><ul>
<li><pre><code class="java">String s1=&quot;a&quot;+&quot;b&quot;;
String s2=&quot;ab&quot;;
System.out.println(s1==s2);//true

final String  s3=&quot;ab&quot;;
final String  s5=&quot;a&quot;;
final String  s6=&quot;b&quot;;
String s4=s5 + s6;;
System.out.println(s3==s4);//true
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 拼接符号左右两边是非final修饰的常量引用：新new一个StringBuilder进行拼接，并且调用了StringBuilder的toString()（约等于new String(&quot;&quot;),&#96;区别在于toString方法new的常量不存在与常量池中&#96;）</span><br><span class="line"></span><br><span class="line">+ + &#96;&#96;&#96;&#96;java</span><br><span class="line">    String s7&#x3D;s1+s2;</span><br><span class="line">    String s8&#x3D;&quot;abab&quot;;</span><br><span class="line">    System.out.println(s7&#x3D;&#x3D;s8);&#x2F;&#x2F;false</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200921190420.png" style="zoom:50%;" />

</li>
</ul>
</li>
</ul>
<p>方式二：StringBuilder的append()方法：</p>
<ul>
<li>避免了创建大量的StringBuilder对象和String对象</li>
<li>内存占用减少，减少GC花费时间</li>
<li>进一步提高拼接速率：采用构造器StringBuilder（highLevel）,其中highLevel为最终字符串长度（StringBuilder的扩容）</li>
</ul>
</blockquote>
<h3 id="2、intern-：本地方法"><a href="#2、intern-：本地方法" class="headerlink" title="2、intern()：本地方法"></a>2、intern()：本地方法</h3><blockquote>
<p>以下两种方法可以保证变量s指向的是常量池中对字符串：</p>
<ul>
<li>方式一：字面量定义变量，String s = “xxx”;</li>
<li>方式二：调用String类的intern()方法，</li>
<li><ul>
<li>String s = new String(“xxx”).instern();</li>
<li>String s= new  StringBuilder(“xxx”).toString.instern();</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<p>String s=new String (“xxx”);    被new了2个对象</p>
<p>String s=new String(“a”)+new String(“b”);    被new了6个对象，注意：toString方法new String()的常量不存在与常量池中</p>
<p>注意：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s=<span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>)+<span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">s.intern();</span><br><span class="line">String s0=<span class="string">&quot;aa&quot;</span>;</span><br><span class="line">System.out.println(s==s0);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      String s=<span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>)+<span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">      String s0=<span class="string">&quot;aa&quot;</span>;</span><br><span class="line">s.intern();</span><br><span class="line">      System.out.println(s==s0);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200921201724.png"></p>
<h3 id="3、StringTable-GC"><a href="#3、StringTable-GC" class="headerlink" title="3、StringTable GC"></a>3、StringTable GC</h3><h2 id="八、GC算法"><a href="#八、GC算法" class="headerlink" title="八、GC算法"></a>八、GC算法</h2><h3 id="1、搜索阶段"><a href="#1、搜索阶段" class="headerlink" title="1、搜索阶段"></a>1、搜索阶段</h3><p>1、引用计数算法</p>
<blockquote>
<p>不是JDK采用的方法，不能解决循环引用的问题，会出现内存泄露</p>
<p>实现简单，执行高效</p>
</blockquote>
<p>2、可达性分析算法（根搜索算法或追踪性垃圾算法）</p>
<blockquote>
<p>实现简单，执行高效，能有效解决循环引用的问题，防止内存泄露</p>
<p>java采用的垃圾搜索算法</p>
</blockquote>
<p>基本思路（买葡萄）：</p>
<blockquote>
<p>以根对象集合（GC Roots）为起点，从上往下搜索被根对象集合所连接的目标对象是否可达</p>
<p>使用可达性分析算法后，内存中的<code>存活对象都会被根对象集合直接或间接连接</code>，搜索走过的路径称为引用链（Reference Chain）</p>
<p>如果目标对象没有任何引用链，则是不可达的，就认为该对象是垃圾对象</p>
</blockquote>
<p>GC Roots包括以下几类元素：</p>
<blockquote>
<ul>
<li>虚机栈中引用的对象</li>
<li><ul>
<li>各个线程被调用的方法使用的参数、局部变量等</li>
</ul>
</li>
<li>本地方法栈中引用的对象</li>
<li>方法区中静态变量引用的对象</li>
<li>字符串常量池的引用</li>
<li>被同步锁synchronized持有的对象</li>
<li>java虚拟机内部的引用</li>
<li><ul>
<li>基本数据类型的Class对象。一些常驻的异常对象（NullPointerException）、系统类加载器</li>
</ul>
</li>
<li>反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存</li>
</ul>
</blockquote>
<p>除了以上，还有一些临时性的引用可以加入GC Roots集合:</p>
<blockquote>
<p>分代收集或局部收集</p>
<p>根据用户所选则的垃圾收集器以及当前回收的内存区域（比如只针对新生代）不同，必须考虑内存区域是虚拟机自已的实现细节，而不是孤立封闭的，这个区域的对象可能被其他区域的对象所引用，这时就需要将其他区域对象也加入到GC Roots集合，才能保证可达性分析算法的准确性（STW的目的也是保证准确性）</p>
</blockquote>
<p>3、对象的finalization机制</p>
<blockquote>
<p>finalize()方法在GC回收对象前被调用</p>
<p>不要主动调用该方法，应该交给垃圾回收机制</p>
<ul>
<li>在finalize()时可能会导致对象复活</li>
<li>finalize()方法在GC时被调用，如果不发生GC，则该方法将没有机会执行</li>
<li>糟糕的finalize()方法会影响GC性能</li>
</ul>
<p>由于finalize() 存在，对象处于三种可能的状态：（刀下留人？）</p>
<ul>
<li>可触及的：从根节点可达</li>
<li>可复活的：对象的所有引用被释放，但可能在finalize() 中复活</li>
<li>不可触及的：对象的finalize() 被调用，并且没有被复活，之后也不可能被复活，因为finalize() 只会被调用一次，<code>只有不可触及状态的对象才可以被回收</code></li>
</ul>
</blockquote>
<p>最终如何判断一个对象可以被回收：两次标记</p>
<blockquote>
<p>第一次标记：对象到GC Roots没有引用链</p>
<p>第二次标记：判断对象是否有必要执行finalize()进行复活</p>
<ul>
<li>没有重写finalize()方法（空方法）或者已经被虚拟机调用过，则没必要执行，<code>对象状态为不可触及的</code></li>
<li>如果对象重写了finalize()方法，还未被调用过，则对象会被插入到F-Queue队列中，由一个虚拟机自动创建的、低优先级的Finalizer线程触发其finalize()方法执行</li>
<li>对象在finalize()方法中与引用链上任何一个对象建立了联系，在第二次标记时，对象会被移出即将回收的集合，之后，如果对象再次出现没有引用链的情况，finalize()方法也不会再被调用，<code>对象将变为不可触及状态</code></li>
</ul>
</blockquote>
<h3 id="2、清除阶段"><a href="#2、清除阶段" class="headerlink" title="2、清除阶段"></a>2、清除阶段</h3><p>2.1、标记-清除算法（Mark-Sweep）</p>
<blockquote>
<p>执行过程：</p>
<p>当堆中的有效内存空间（available memory）被耗尽时，就会停止整个程序（STW），然后进行两项工作：标记和清除</p>
<ul>
<li>标记：Collector从引用根节点开始遍历，<code>标记所有被引用的对象</code>，一般在对象的<code>Header中记录为可达对象</code></li>
<li>清除：Collector堆内存从头到尾进行线性遍历，如果发现某个对象在其Header中没有被标记为可达对象，则进行回收（清除并不是真正地置空，而是把需要清除的对象地址保存到空闲的列表中，下次有新对象被加载时，把新对象放置在垃圾对象的位置）</li>
</ul>
<p>缺点：</p>
<ul>
<li>效率不算高，遍历</li>
<li>GC时会STW</li>
<li>清理出来的空闲空间不连续，产生内存碎片，还需要维护一个空闲列表（对应指针碰撞）</li>
</ul>
</blockquote>
<p>2.2、复制算法（Copying）(S0和S1区)</p>
<blockquote>
<p>将或者的内存空间分为两块，每次只使用其中的一块，在GC时将正在使用的内存中的<code>存活对象</code>复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存块的角色，完成垃圾回收</p>
<p>缺点：</p>
<ul>
<li>需要两倍的内存空间</li>
<li>需要维护引用</li>
</ul>
</blockquote>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200922120132.png"></p>
<p>2.3、标记-压缩算法（Mark-Compact）</p>
<blockquote>
<p>执行过程：</p>
<ul>
<li><p>标记：标记所有被引用的对象</p>
</li>
<li><p>压缩：将所有存活对象压缩到内存一端，按顺序排放，之后清理边界外的所有空间</p>
</li>
</ul>
<p>（标记-压缩算法）=（标记-清除-压缩算法），给新对象分配内存时，只需要持有一个内存的起始地址就行，即指针碰撞，避免维护空闲列表</p>
<p>缺点：</p>
<ul>
<li>效率低于复制算法</li>
<li>移动对象同时，如果对象被其他对象引用，还需要调整引用的地址</li>
<li>移动过程中，会STW</li>
</ul>
</blockquote>
<h3 id="3、分代收集算法"><a href="#3、分代收集算法" class="headerlink" title="3、分代收集算法"></a>3、分代收集算法</h3><blockquote>
<p>不同的对象的生命周期不同，可以采用不同的垃圾回收算法，以便提高回收效率</p>
<p>新生代和老年代采用适合的算法</p>
</blockquote>
<h3 id="4、增量收集算法"><a href="#4、增量收集算法" class="headerlink" title="4、增量收集算法"></a>4、增量收集算法</h3><blockquote>
<p>目的：解决STW带来的用户体验问题</p>
<p>方式：每次垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程，一次反复执行。通过对线程间冲突的妥善处理，允许垃圾收集线程可以分段地完成标记、清理或复制工作</p>
<p>缺点：造成垃圾回收总体成本的提高，降低了系统的吞吐量</p>
</blockquote>
<h3 id="5、分区算法"><a href="#5、分区算法" class="headerlink" title="5、分区算法"></a>5、分区算法</h3><blockquote>
<p>将对空间划分为连续不同小区间region</p>
</blockquote>
<h2 id="九、垃圾回收相关概念"><a href="#九、垃圾回收相关概念" class="headerlink" title="九、垃圾回收相关概念"></a>九、垃圾回收相关概念</h2><p>1、强软弱虚引用</p>
<blockquote>
<p>强引用：</p>
<ul>
<li>默认的引用类型，不进行垃圾回收</li>
<li>强引用对象是可触及的（可达）</li>
<li>强引用由于不能被回收，所以是造成内存泄露的主要原因之一</li>
</ul>
<p>软引用（Soft Reference）:</p>
<ul>
<li>内存不足（不一定是OOM）进行垃圾回收</li>
<li>高速缓存使用到软引用</li>
<li><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200922141037.png" style="zoom: 33%;" />

</li>
</ul>
<p>弱引用（Weak Reference）：</p>
<ul>
<li>发现即回收，生存到下一次GC为止</li>
<li>缓存</li>
</ul>
<p>虚引用（Phantom Reference）：</p>
<ul>
<li>对象回收跟踪，通过引用队列</li>
<li>不能通过get得到对象</li>
</ul>
</blockquote>
<h2 id="十、垃圾回收器"><a href="#十、垃圾回收器" class="headerlink" title="十、垃圾回收器"></a>十、垃圾回收器</h2><h3 id="1、分类"><a href="#1、分类" class="headerlink" title="1、分类"></a>1、分类</h3><h3 id="2、GC性能指标"><a href="#2、GC性能指标" class="headerlink" title="2、GC性能指标"></a>2、GC性能指标</h3><blockquote>
<p>吞吐量（重点）：运行用户代码时间占总运行时间比例</p>
<p>暂停时间（重点）：执行GC时，程序的工作线程被暂停的时间</p>
<p>内存占用：java堆中所占的内存大小</p>
</blockquote>
<h3 id="3、7种经典垃圾回收器"><a href="#3、7种经典垃圾回收器" class="headerlink" title="3、7种经典垃圾回收器"></a>3、7种经典垃圾回收器</h3><blockquote>
<p>串行回收器：Serial、Serial Old</p>
<p>并行回收器：ParNew、Parallel Scavenge(吞吐量优先)、Parallel Old</p>
<p>并发回收器：CMS（Concurrent Mark Sweep）、G1</p>
</blockquote>
<blockquote>
<p>新生代回收器：Serial、ParNew、Parallel Scavenge</p>
<p>老年代回收器：Serial Old、Parallel Old、CMS（Current Mark Sweep）</p>
<p>整堆回收器：G1</p>
</blockquote>
<p>组合：</p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200922151922.png"></p>
<p><img src="https://gitee.com/Devilnaps/picbed/raw/master/img/20200922152604.png"></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Mapper</title>
    <url>/2020/09/18/Mapper/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MybatisPlus</title>
    <url>/2020/09/17/MybatisPlus/</url>
    <content><![CDATA[<h2 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis-plus:mybatisplus、Mybatis、mybatis-spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-orm --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、建立表和实体类"><a href="#二、建立表和实体类" class="headerlink" title="二、建立表和实体类"></a>二、建立表和实体类</h2><p>表字段名用下划线命名法</p>
<p>实体类属性用骆驼峰命名法</p>
<h2 id="三、配置mybatis-xml"><a href="#三、配置mybatis-xml" class="headerlink" title="三、配置mybatis.xml"></a>三、配置mybatis.xml</h2><p>mybatis.xml （没有具体配置信息，因为会放入到SPring中配置）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;!-- 开启日志，并指定具体日志，默认：SLF4J →Apache Commons Logging →Log4j <span class="number">2</span> → Log4j →JDK logging--&gt;</span><br><span class="line">        &lt;setting name=<span class="string">&quot;logImpl&quot;</span> value=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<h2 id="四、日志、数据库"><a href="#四、日志、数据库" class="headerlink" title="四、日志、数据库"></a>四、日志、数据库</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">usename</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root123</span></span><br></pre></td></tr></table></figure>

<h2 id="五、配置spring配置文件：applicationContext-xml"><a href="#五、配置spring配置文件：applicationContext-xml" class="headerlink" title="五、配置spring配置文件：applicationContext.xml"></a>五、配置spring配置文件：applicationContext.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源c3p0--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;drive&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;usename&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceTransactionManage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;dataSourceTransactionManage&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionFactorBean:Mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactorBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mabatis.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.nap.entity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis只写接口，不写实现类   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.nap.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="六、MybatisPlus配置"><a href="#六、MybatisPlus配置" class="headerlink" title="六、MybatisPlus配置"></a>六、MybatisPlus配置</h2><p>更改SqlSessionFactorBean为MybatisSqlSessionFactoryBean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--SqlSessionFactorBean:Mybatis--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;sqlSessionFactorBean&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactorBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mabatis.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.nap.entity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="七、MP实现CURD"><a href="#七、MP实现CURD" class="headerlink" title="七、MP实现CURD"></a>七、MP实现CURD</h2><table>
<thead>
<tr>
<th align="center">工具</th>
<th align="center">接口</th>
<th align="center">实现类</th>
</tr>
</thead>
<tbody><tr>
<td align="center">JDBC</td>
<td align="center">Dao接口</td>
<td align="center">Dao实现类</td>
</tr>
<tr>
<td align="center">Mybatis</td>
<td align="center">Mapper接口</td>
<td align="center">将实现类替换为了SQL映射文件</td>
</tr>
<tr>
<td align="center">MP</td>
<td align="center">Mapper接口</td>
<td align="center">XxxxMapper 继承BaseMapper<T>接口后，无需编写 mapper.xml 文件，即可获得CRUD功能</td>
</tr>
</tbody></table>
<h3 id="1、映射关系的解决"><a href="#1、映射关系的解决" class="headerlink" title="1、映射关系的解决"></a>1、映射关系的解决</h3><p>1、方法一：注解实现字段与属性的映射关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(value = &quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(value = &quot;stuno&quot;,type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stuNo;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;stuname&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;stuage&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stuAge;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<p>2、方法二：通过配置Mybatis配置文件自动映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过配置Mybatis配置文件自动映射       --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        StudentMapper studentMapper = (StudentMapper)context.getBean(<span class="string">&quot;studentMapper&quot;</span>);</span><br><span class="line"><span class="comment">//        StudentMapper studentMapper1 = context.getBean(&quot;studentMapper&quot;,StudentMapper.class);</span></span><br><span class="line">        Student student=<span class="keyword">new</span> Student(<span class="string">&quot;zhao&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        <span class="keyword">int</span> count = studentMapper.insert(student);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、where语句"><a href="#3、where语句" class="headerlink" title="3、where语句"></a>3、where语句</h3><p>MP： Warpper实现  ：</p>
<p> QueryWarpper(查询)    </p>
<p>UpdateWrapper（DML）</p>
<h3 id="4、MP源码"><a href="#4、MP源码" class="headerlink" title="4、MP源码"></a>4、MP源码</h3><p>MappedStatement对象 就是  <select>等标签</p>
<p>MyBatis/MP都是通过  MappedStatement对象来指向增删改</p>
<p>预加载：MP启动时，会指定加载所有常见的 CRUD语句 （来自于MP提供的BaseMapper接口），并将这些语句封装到了MappedStatement对象中。</p>
<h2 id="八、AR（activeRecoder）-通过实体类Student直接进行增删改查操作（不需要借助于Mapper对象）"><a href="#八、AR（activeRecoder）-通过实体类Student直接进行增删改查操作（不需要借助于Mapper对象）" class="headerlink" title="八、AR（activeRecoder）:通过实体类Student直接进行增删改查操作（不需要借助于Mapper对象）"></a>八、AR（activeRecoder）:通过实体类Student直接进行增删改查操作（不需要借助于Mapper对象）</h2><p>1、继承类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>  <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br></pre></td></tr></table></figure>

<p>2、MP将主键设置为了Serializable类型。目的 ：可以接受常见的类型：8个基本类型+String  -&gt;Serializable</p>
<p>3、测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testAR</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//必须先加载IOC容器</span></span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student student=<span class="keyword">new</span> Student(<span class="string">&quot;赵&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        student.insert();</span><br><span class="line"></span><br><span class="line">        QueryWrapper wrapper=<span class="keyword">new</span> QueryWrapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda方法引用</span></span><br><span class="line"><span class="comment">//        wrapper.lambda().like(Student::getStuName,&quot;z&quot;);</span></span><br><span class="line">        wrapper.like(<span class="string">&quot;stuname&quot;</span>,<span class="string">&quot;z&quot;</span>);</span><br><span class="line">        List&lt;Student&gt; students = student.selectList(wrapper);</span><br><span class="line">        System.out.println(students);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="九、逆向工程"><a href="#九、逆向工程" class="headerlink" title="九、逆向工程"></a>九、逆向工程</h2><p><a href="https://baomidou.com/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">https://baomidou.com/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</a></p>
<p>lombok：可以给类的属性生成set  get 构造方法等<br>1.依赖<br>2.配置：安装插件lombok</p>
<h2 id="十、分页"><a href="#十、分页" class="headerlink" title="十、分页"></a>十、分页</h2><p><code>&lt;select&gt;</code>等标签 -&gt; MappedStatement对象</p>
<p>boundSql ：将我们写的SQL 和 参数值进行了拼接后的对象，即最终能被真正执行的SQL<br>拦截器：编写拦截器、注入拦截器，   放入  <plugins>即可。 作用：对SQL进行“修改”</p>
<p>1、在 Spring 配置文件中配置拦截器插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactorBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mabatis.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.nap.entity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//必须先加载IOC容器</span></span><br><span class="line">    ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Student student=<span class="keyword">new</span> Student(<span class="string">&quot;赵&quot;</span>,<span class="number">22</span>);</span><br><span class="line">    student.insert();</span><br><span class="line">    Page page=<span class="keyword">new</span> Page(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    QueryWrapper wrapper=<span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    wrapper.between(<span class="string">&quot;stuno&quot;</span>,<span class="number">9</span>,<span class="number">12</span>);</span><br><span class="line">    IPage&lt;Student&gt; selectPage = student.selectPage(page, wrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页数据：&quot;</span>+selectPage.getRecords());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页页码：&quot;</span>+selectPage.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;总数据：&quot;</span>+selectPage.getTotal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十一、攻击-SQL-阻断解析器"><a href="#十一、攻击-SQL-阻断解析器" class="headerlink" title="十一、攻击 SQL 阻断解析器"></a>十一、攻击 SQL 阻断解析器</h2><p>作用！阻止恶意的全表更新删除</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactorBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mabatis.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.nap.entity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlParserList&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.parsers.BlockAttackSqlParser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="十二、Sql-注入器"><a href="#十二、Sql-注入器" class="headerlink" title="十二、Sql 注入器"></a>十二、Sql 注入器</h2><p>1、MP SQL语句的表现形式</p>
<table>
<thead>
<tr>
<th>方式</th>
<th>表现形式</th>
</tr>
</thead>
<tbody><tr>
<td>Mybatis配置文件</td>
<td><select></select>&gt;</td>
</tr>
<tr>
<td>Mybatis接口</td>
<td>@Select(“”)</td>
</tr>
<tr>
<td>MP</td>
<td>继承BaseMapp<T></td>
</tr>
<tr>
<td>MP</td>
<td>Sql注入器，仿照方式“3” 自己编写一个 带SQL的方法</td>
</tr>
</tbody></table>
<p>2、Sql 注入器</p>
<p>①自定义方法：SQL语句加方法名(extends AbstractMethod)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDelete</span> <span class="keyword">extends</span> <span class="title">AbstractMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappedStatement <span class="title">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">        String sql;</span><br><span class="line"></span><br><span class="line">        SqlMethod sqlMethod = SqlMethod.DELETE;</span><br><span class="line">        sql = <span class="string">&quot;delete from student where stuno&gt;11&quot;</span>;</span><br><span class="line">        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.addDeleteMappedStatement(mapperClass, <span class="string">&quot;myDelete&quot;</span>, sqlSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>②自定义注入器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInjector</span> <span class="keyword">extends</span> <span class="title">AbstractSqlInjector</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; mapperClass;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title">getMethodList</span><span class="params">(Class&lt;?&gt; mapperClass)</span> </span>&#123;</span><br><span class="line">        List&lt;AbstractMethod&gt; methodList = <span class="keyword">new</span> DefaultSqlInjector().getMethodList(mapperClass);</span><br><span class="line">        methodList.add(<span class="keyword">new</span> MyDelete());</span><br><span class="line">        <span class="keyword">return</span> methodList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        return Stream.of(</span></span><br><span class="line"><span class="comment">//                new Insert(),</span></span><br><span class="line"><span class="comment">//                new Delete(),</span></span><br><span class="line"><span class="comment">//                new DeleteByMap(),</span></span><br><span class="line"><span class="comment">//                new DeleteById(),</span></span><br><span class="line"><span class="comment">//                new DeleteBatchByIds(),</span></span><br><span class="line"><span class="comment">//                new Update(),</span></span><br><span class="line"><span class="comment">//                new UpdateById(),</span></span><br><span class="line"><span class="comment">//                new SelectById(),</span></span><br><span class="line"><span class="comment">//                new SelectBatchByIds(),</span></span><br><span class="line"><span class="comment">//                new SelectByMap(),</span></span><br><span class="line"><span class="comment">//                new SelectOne(),</span></span><br><span class="line"><span class="comment">//                new SelectCount(),</span></span><br><span class="line"><span class="comment">//                new SelectMaps(),</span></span><br><span class="line"><span class="comment">//                new SelectMapsPage(),</span></span><br><span class="line"><span class="comment">//                new SelectObjs(),</span></span><br><span class="line"><span class="comment">//                new SelectList(),</span></span><br><span class="line"><span class="comment">//                new SelectPage(),</span></span><br><span class="line"><span class="comment">//                //自定义的SQL</span></span><br><span class="line"><span class="comment">//                new MyDelete()</span></span><br><span class="line"><span class="comment">//        ).collect(toList());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>③将自定义方法名加入mapper接口中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myDelete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>④配置使用自定义注入器：applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;globalConfig&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.core.config.GlobalConfig&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlInjector&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.nap.injector.MyInjector&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionFactorBean:Mybatis--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;sqlSessionFactorBean&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactorBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;globalConfig&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;globalConfig&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>⑤测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSqlInjector</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        StudentMapper studentMapper = (StudentMapper)context.getBean(<span class="string">&quot;studentMapper&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> count = studentMapper.myDelete();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="十三、逻辑删除"><a href="#十三、逻辑删除" class="headerlink" title="十三、逻辑删除"></a>十三、逻辑删除</h2><p>配置applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;globalConfig&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.core.config.GlobalConfig&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dbConfig&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logicDeleteField&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logicDelete&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logicDeleteValue&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logicNotDeleteValue&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="十四、全局配置"><a href="#十四、全局配置" class="headerlink" title="十四、全局配置"></a>十四、全局配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">bean id=&quot;globalConfig&quot; class=&quot;com.baomidou.mybatisplus.core.config.GlobalConfig&quot;&gt;</span><br><span class="line">        <span class="comment">&lt;!--  自动填充      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;metaObjectHandler&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;metaObjectHandlery&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  逻辑删除      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dbConfig&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logicDeleteField&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logicDelete&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logicDeleteValue&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  SQL注入      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlInjector&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.nap.injector.MyInjector&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="十五、自动填充"><a href="#十五、自动填充" class="headerlink" title="十五、自动填充"></a>十五、自动填充</h2><p>1、<a href="https://baomidou.com/guide/auto-fill-metainfo.html">https://baomidou.com/guide/auto-fill-metainfo.html</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start insert fill ....&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">&quot;autoInsert&quot;</span>, String.class, &quot;ZHAO&quot;); // 起始版本 <span class="number">3.3</span>.<span class="number">0</span>(推荐使用)</span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line"><span class="comment">//        this.strictUpdateFill(metaObject, &quot;autoInsert&quot;, () -&gt; &quot;ZHAO&quot;, String.class); // 起始版本 3.3.3(推荐)</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line"><span class="comment">//        this.fillStrategy(metaObject, &quot;createTime&quot;, LocalDateTime.now()); // 也可以使用(3.3.0 该方法有bug)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> String autoInsert;</span><br></pre></td></tr></table></figure>

<p>2、全局配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;metaObjectHandlery&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.nap.meta.MyMetaObjectHandler&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;globalConfig&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.core.config.GlobalConfig&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  自动填充      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;metaObjectHandler&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;metaObjectHandlery&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mybatis</tag>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 高级</title>
    <url>/2020/09/14/Mybatis-%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="一、数据库切换"><a href="#一、数据库切换" class="headerlink" title="一、数据库切换"></a>一、数据库切换</h2><p>1、在conf.xml文件中设置：<code>&lt;environments default=&quot;devOracle&quot;&gt;</code>指定数据库和<code> &lt;databaseIdProvider type=&quot;DB_VENDOR&quot;&gt;</code>数据库别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--default指定環境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;devOracle&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--oracle --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;devOracle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;$&#123;oracle.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">value</span>=<span class="string">&quot;$&#123;oracle.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;oracle.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;oracle.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;devMysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据库支持类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MySQL&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、使用：mapper.xml形式</p>
<p>编写不同数据库的SQL语句，并在标签中添加<code>databaseId=&quot;&quot;</code>属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--oracle--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryStudentByNoWithONGL&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">      select * from student where 1=1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryStudentByNo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.yanqun.entity.Student&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">       select * from student where stuNo=#&#123;stuNo&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果mapper.xml的 sql标签 仅有 一个 不带databaseId的标签，则改标签会自动适应当前数据库。<br> 如果 既有不带databaseId的标签，又有带databaseId的标签,则程序会优先使用带databaseId的标签</p>
<h2 id="二、注解形式的SQL语句"><a href="#二、注解形式的SQL语句" class="headerlink" title="二、注解形式的SQL语句"></a>二、注解形式的SQL语句</h2><p>1、注解位置：对应的接口方法前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from person where id = $&#123;value&#125;&quot;)</span></span><br><span class="line"><span class="function">Person <span class="title">queryPersonById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、将接口的全类名 写入conf.xml中的<code>&lt;mapper&gt;</code>，让mybatis知道sql语句此时是存储在接口中（可以批量引入）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--以下将cn.nap.mapper 包中的 xml引入 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/nap/mapper/personMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/nap/mapper/personCardMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/nap/mapper/personClassMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--以下将cn.nap.mapper 包中的注解接口引入 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;cn.nap.mapper.PersonMapper&quot;</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--以下可以将cn.nap.mapper 包中的注解接口 和 xml全部一次性引入 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;cn.nap.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、增删改的返回值：void、Integer、Long、Boolean，只要在接口方法修改即可"><a href="#三、增删改的返回值：void、Integer、Long、Boolean，只要在接口方法修改即可" class="headerlink" title="三、增删改的返回值：void、Integer、Long、Boolean，只要在接口方法修改即可"></a>三、增删改的返回值：void、Integer、Long、Boolean，只要在接口方法修改即可</h2><h2 id="四、执行增加语句时的自增问题"><a href="#四、执行增加语句时的自增问题" class="headerlink" title="四、执行增加语句时的自增问题"></a>四、执行增加语句时的自增问题</h2><p>1、mysql：支持自增（auto_increment）</p>
<p>如果要返回数据库自增后的值，需要在mapper配置如下属性：useGeneratedKeys=”true” 和keyProperty=”id”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addPerson&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	insert into person(id,name,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2、oracle：不支持自增，通过序列模拟自增（序列自带的两个属性：<br>nextval：序列中下一个值；currval: 当前值）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">方式一：BEFORE</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">parameterType</span>=<span class="string">&quot;com.yanqun.entity.Student&quot;</span>  <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;stuNo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">        select myseq.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    insert into student(stuno,stuName,stuAge,graName)</span><br><span class="line">    values(#&#123;stuNo&#125; , #&#123;stuName&#125;,#&#123;stuAge&#125;,#&#123;graName&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">方式一：AFTER</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">parameterType</span>=<span class="string">&quot;com.yanqun.entity.Student&quot;</span>  <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;stuNo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">        select myseq.currval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    insert into student(stuno,stuName,stuAge,graName)</span><br><span class="line">    values(myseq.nextval , #&#123;stuName&#125;,#&#123;stuAge&#125;,#&#123;graName&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="五、Mybatis多个参数问题"><a href="#五、Mybatis多个参数问题" class="headerlink" title="五、Mybatis多个参数问题"></a>五、Mybatis多个参数问题</h2><p>1、方式一：通过pojo（将多个参数封装到一个Javabean对象）传递</p>
<p>2、方式二：将参数分开传递，不通过pojo</p>
<p>①根据参数重载接口方法</p>
<p>②传入多个参数时，不用在mapper.xml中编写parameterType</p>
<p>③参数的占位符必须是[arg3, arg2, arg1, arg0]或[ param3, param4, param1, param2]，即：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addPerson&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	insert into person(id,name,age) values(#&#123;arg0&#125;,#&#123;arg1&#125;,#&#123;arg2&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><code>可以通过在接口方法参数列表中添加注解@Param（&quot;id&quot;）来自定义命名占位符：</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addPerson</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span>Integer id,<span class="meta">@Param(&quot;name&quot;)</span>String name,<span class="meta">@Param(&quot;age&quot;)</span>Integer age)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addPerson&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	insert into person(id,name,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、方法三：综合一和二：简单类型直接用，对象类型使用级联</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">addStudent</span><span class="params">(<span class="meta">@Param(&quot;sNo&quot;)</span>Integer stuNo, <span class="meta">@Param(&quot;stu&quot;)</span>Student student)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudent&quot;</span>  <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">      	 insert into student(stuno,stuName,stuAge,graName)</span><br><span class="line">      	 values(#&#123;sNo&#125; , #&#123;stu.stuName&#125;,#&#123;stu.stuAge&#125;,#&#123;stu.graName&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="六、使用HashMap存储查询结果集"><a href="#六、使用HashMap存储查询结果集" class="headerlink" title="六、使用HashMap存储查询结果集"></a>六、使用HashMap存储查询结果集</h2><h3 id="1、只查询一个对象"><a href="#1、只查询一个对象" class="headerlink" title="1、只查询一个对象"></a>1、只查询一个对象</h3><p>查询语句：引号内的为属性的别名，别名就是返回map中的key，如果不加别名的话，map中的key就是字段名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersonOutByHashMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;HashMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">	select id &quot;id&quot;,name &quot;name&quot;,age &quot;age&quot; from person where id = $&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>增加接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">HashMap&lt;String,Object&gt; <span class="title">queryPersonOutByHashMap</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonOutByHashMap</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">……</span><br><span class="line">		HashMap&lt;String,Object&gt; person= personMapper.queryPersonOutByHashMap(<span class="number">1</span>);System.out.println(person.get(<span class="string">&quot;id&quot;</span>)+<span class="string">&quot;,&quot;</span>+person.get(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot;,&quot;</span>+person.get(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">		System.out.println(person);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200915145447.png" style="zoom:67%;" />

<h3 id="2、查询多个对象：通过-MapKey-“id”-指定Key"><a href="#2、查询多个对象：通过-MapKey-“id”-指定Key" class="headerlink" title="2、查询多个对象：通过@MapKey(“id”)指定Key"></a>2、查询多个对象：通过@MapKey(“id”)指定Key</h3><p>查询语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersonsByHashMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;HashMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">	select * from person</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>增加接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">	<span class="function">HashMap&lt;Integer,Person&gt; <span class="title">queryPersonsByHashMap</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonsByHashMap</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	……</span><br><span class="line">		HashMap&lt;Integer,Person&gt; person= personMapper.queryPersonsByHashMap()</span><br><span class="line">		System.out.println(person);	</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200915150443.png" style="zoom:50%;" />

<h2 id="七、resultMap可以实现2个功能："><a href="#七、resultMap可以实现2个功能：" class="headerlink" title="七、resultMap可以实现2个功能："></a>七、resultMap可以实现2个功能：</h2><h3 id="1-类型转换"><a href="#1-类型转换" class="headerlink" title="1.类型转换"></a>1.类型转换</h3><h3 id="2-属性-字段的映射关系"><a href="#2-属性-字段的映射关系" class="headerlink" title="2.属性-字段的映射关系"></a>2.属性-字段的映射关系</h3><h3 id="3、在resultMap中-还可以使用鉴别器：对相同sql中不同字段值进行判断，从而进行不同的-处理。"><a href="#3、在resultMap中-还可以使用鉴别器：对相同sql中不同字段值进行判断，从而进行不同的-处理。" class="headerlink" title="3、在resultMap中 还可以使用鉴别器：对相同sql中不同字段值进行判断，从而进行不同的 处理。"></a>3、在resultMap中 还可以使用鉴别器：对相同sql中不同字段值进行判断，从而进行不同的 处理。</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryStudentsWithResultMap&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultMap</span> =<span class="string">&quot;studentResultMap&quot;</span>&gt;</span></span><br><span class="line">         select sno, sname,nickname, sage, gname from student</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.yanqun.entity.Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;studentResultMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主键 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>  <span class="attr">column</span>=<span class="string">&quot;sno&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuNo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--普通字段</span></span><br><span class="line"><span class="comment">        &lt;result  column=&quot;sname&quot; property=&quot;stuName&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>  <span class="attr">column</span>=<span class="string">&quot;sage&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuAge&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>  <span class="attr">column</span>=<span class="string">&quot;gname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;graName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 鉴别器  : 对查询结果进行分支处理： 如果是a年级，则真名，如果b年级，显示昵称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>  <span class="attr">column</span>=<span class="string">&quot;gname&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.yanqun.entity.Student&quot;</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span>  <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span>  <span class="attr">column</span>=<span class="string">&quot;nickname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="八、模糊查询"><a href="#八、模糊查询" class="headerlink" title="八、模糊查询"></a>八、模糊查询</h2><p>1、方式一： $ {stuName}  ：原样输出</p>
<p>​         stuName like ‘%${stuName}%’</p>
<p>2、方式二：#{stuName}</p>
<p>传值时，直接传 ：student.setStuName(“%s%”); </p>
<p>3、方式三：bind参数</p>
<bind name="_queryName" value="'%'+stuName+'%'"/>

<p> stuName like #{_queryName}</p>
<h2 id="九、Mybatis架构"><a href="#九、Mybatis架构" class="headerlink" title="九、Mybatis架构"></a>九、Mybatis架构</h2><h2 id="十、自定义插件"><a href="#十、自定义插件" class="headerlink" title="十、自定义插件"></a>十、自定义插件</h2><p>1、MyBatis底层在执行CRUD时 可能会涉及到四个处理器：StatementHandler 、ParameterHandler、TypeHandler、ResultSetHandler</p>
<p>2、四大核心对象：StatementHandler 、ParameterHandler、ResultSetHandler、Executor。都用到了拦截器用于增强。</p>
<p>2、自定义插件：自定义增强功能</p>
<p>①编写拦截器，继承Interceptor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = StatementHandler.class, method = &quot;query&quot;, args = &#123;Statement.class, ResultHandler.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截方法&quot;</span>);</span><br><span class="line">        Object proceed = invocation.proceed();<span class="comment">//放行</span></span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">        <span class="keyword">return</span> proceed;<span class="comment">//不放行返回null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object o)</span> </span>&#123;<span class="comment">//将拦截器中定义的增强方法同原来的核心对象合并起来</span></span><br><span class="line">        Object wrap = Plugin.wrap(o, <span class="keyword">this</span>);</span><br><span class="line">        System.out.println(wrap);</span><br><span class="line">        <span class="keyword">return</span> wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;设置属性&quot;</span>+properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②编写签名注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = StatementHandler.class, method = &quot;query&quot;, args = &#123;Statement.class, ResultHandler.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure>

<p>③配置：conf.xml，编写多个拦截器时，执行顺序和配置顺序一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;cn.nap.interceptors.MyInterceptor&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhao3&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;222&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="十一、批量操作DML"><a href="#十一、批量操作DML" class="headerlink" title="十一、批量操作DML"></a>十一、批量操作DML</h2><p>1、方式一：BATCH：预编译一次</p>
<p>其他：预编译N次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session1 = sessioonFactory.openSession(ExecutorType.BATCH);</span><br></pre></td></tr></table></figure>

<p>2、方式二：拼接Sql（foreach）</p>
<p>①没有用到mybatis对批量插入的支持  </p>
<p>②不适合数据库迁移</p>
<p>③如果大量数据，则会将拼接的SQL语句拉的很长，而部分数据库 对SQL语句的长度有限制。</p>
<p>3、调取数据库存储过程</p>
<h2 id="十二、分页插件PageHelper"><a href="#十二、分页插件PageHelper" class="headerlink" title="十二、分页插件PageHelper"></a>十二、分页插件PageHelper</h2><p><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md</a></p>
]]></content>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2020/09/12/javaScript/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>1、JavaScript 能够改变 HTML 内容、属性值、样式 (CSS、比如隐藏、显示HTML内容)（HTML 属性的一种变种）</p>
<p id="demo">JavaScript 能够改变 HTML 内容。</p>

<p><button type="button" onclick='document.getElementById("demo").innerHTML = "Hello JavaScript!"'>点击我改变内容！</button></p>
<button type="button" onclick="document.getElementById('demo').style.fontSize='35px'">
点击我改变样式！
</button>

<button type="button" onclick="document.getElementById('demo').style.display='none'">
点击我隐藏！
</button>

<button type="button" onclick="document.getElementById('demo').style.display='block'">
点击我显示！
</button>

<a id="more"></a>

<p>2、<code>&lt;script&gt;</code>标签</p>
<p>在 HTML 中，JavaScript 代码必须位于 <code>&lt;script&gt;</code>与<code>&lt;/script&gt;</code>标签之间</p>
<p><strong>type</strong> 属性：不是必需的，JavaScript 是 HTML 中的默认脚本语言</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>3、<code>&lt;script&gt;</code>放置位置</p>
<p>①<code>&lt;head&gt;</code>中</p>
<p>②<code>&lt;body&gt;</code>中：把脚本置于 <strong><body></strong> 元素的底部，可改善显示速度，因为脚本编译会拖慢显示</p>
<p>③外部脚本：扩展名为<code>.js</code>；不能包含**<script><strong>标签；可在</strong><head><strong>或</strong><body>**中引用，src属性可以为相对位置或完整的URL地址</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = <span class="string">&quot;段落被更改。&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、<strong>JavaScript 不提供任何内建的打印或显示函数</strong>，JavaScript 显示方案：</p>
<p>①window.alert()：<code>写入</code>警告框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.alert(<span class="number">5</span> + <span class="number">6</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>②document.write()：<code>写入</code>HTML输出，仅用于测试：在 HTML 文档完全加载后使用 <strong>document.write()</strong> 将<em>删除所有已有的 HTML</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="number">5</span> + <span class="number">6</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③innerHTML()：<code>写入</code>HTML元素，getElementById(“IDValue”)访问元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = <span class="number">5</span> + <span class="number">6</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>④console.log()：<code>写入</code>浏览器控制台：通过 F12 来激活浏览器控制台，并在菜单中选择“控制台”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="number">5</span> + <span class="number">7</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、JS语句：值、运算符、表达式、关键词和注释"><a href="#二、JS语句：值、运算符、表达式、关键词和注释" class="headerlink" title="二、JS语句：值、运算符、表达式、关键词和注释"></a>二、JS语句：值、运算符、表达式、关键词和注释</h2><p>1、关键字</p>
<table>
<thead>
<tr>
<th align="left">关键词</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">break</td>
<td align="left">终止 switch 或循环。</td>
</tr>
<tr>
<td align="left">continue</td>
<td align="left">跳出循环并在顶端开始。</td>
</tr>
<tr>
<td align="left">debugger</td>
<td align="left">停止执行 JavaScript，并调用调试函数（如果可用）。</td>
</tr>
<tr>
<td align="left">do … while</td>
<td align="left">执行语句块，并在条件为真时重复代码块。</td>
</tr>
<tr>
<td align="left">for</td>
<td align="left">标记需被执行的语句块，只要条件为真。</td>
</tr>
<tr>
<td align="left">function</td>
<td align="left">声明函数。</td>
</tr>
<tr>
<td align="left">if … else</td>
<td align="left">标记需被执行的语句块，根据某个条件。</td>
</tr>
<tr>
<td align="left">return</td>
<td align="left">退出函数。</td>
</tr>
<tr>
<td align="left">switch</td>
<td align="left">标记需被执行的语句块，根据不同的情况。</td>
</tr>
<tr>
<td align="left">try … catch</td>
<td align="left">对语句块实现错误处理。</td>
</tr>
<tr>
<td align="left">var</td>
<td align="left">声明变量。</td>
</tr>
</tbody></table>
<p>2、JavaScript 变量是存储数据值的容器</p>
<p>①变量能够保存多种<em>数据类型</em>：数值、字符串值、布尔值、数组、对象等等</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">7</span>;                             <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&quot;Gates&quot;</span>;                      <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="literal">true</span>;    								<span class="comment">//布尔值</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="literal">false</span>;									<span class="comment">//布尔值</span></span><br><span class="line"><span class="keyword">var</span> cars = [<span class="string">&quot;Porsche&quot;</span>, <span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>];         <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">var</span> x = &#123;<span class="attr">firstName</span>:<span class="string">&quot;Bill&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Gates&quot;</span>&#125;;    <span class="comment">// 对象 </span></span><br></pre></td></tr></table></figure>

<p>②JavaScript 拥有动态类型，相同变量可用作不同类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;               <span class="comment">// 现在 x 是 undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">7</span>;           <span class="comment">// 现在 x 是数值</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Bill&quot;</span>;      <span class="comment">// 现在 x 是字符串值</span></span><br></pre></td></tr></table></figure>

<p>③字符串被引号包围，可以在字符串内使用引号，只要这些引号与包围字符串的引号不匹配</p>
<p>3、JavaScript 标识符</p>
<ul>
<li>名称可包含字母、数字、下划线和美元符号</li>
<li>名称必须以字母开头</li>
<li>名称也可以 $ 和 _ 开头（但是在本教程中我们不会这么做）</li>
<li>名称对大小写敏感（y 和 Y 是不同的变量）</li>
<li>保留字（比如 JavaScript 的关键词）无法用作变量名称</li>
</ul>
<p>4、运算符typeof与数据类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person;                  <span class="comment">// 值是 undefined，类型是 undefined</span></span><br><span class="line"></span><br><span class="line">person = <span class="literal">undefined</span>;          <span class="comment">// 值是 undefined，类型是 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空值与 undefined 不是一回事</span></span><br><span class="line"><span class="keyword">var</span> car = <span class="string">&quot;&quot;</span>;                <span class="comment">// 值是 &quot;&quot;，类型是 &quot;string&quot;</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="literal">null</span>;           <span class="comment">// 值是 null，但是类型仍然是对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Undefined 与 Null 的区别</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>              <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                   <span class="comment">// object</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>            <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>             <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>原始数据值：一种没有额外属性和方法的单一简单数据值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;Bill&quot;</span>              <span class="comment">// 返回 &quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">3.14</span>                <span class="comment">// 返回 &quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>                <span class="comment">// 返回 &quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span>               <span class="comment">// 返回 &quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> x                   <span class="comment">// 返回 &quot;undefined&quot; (假如 x 没有值)</span></span><br></pre></td></tr></table></figure>

<p>复杂数据：function、object</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> &#123;<span class="attr">name</span>:<span class="string">&#x27;Bill&#x27;</span>, <span class="attr">age</span>:<span class="number">62</span>&#125; <span class="comment">// 返回 &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]             <span class="comment">// 返回 &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                  <span class="comment">// 返回 &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>)</span>&#123;&#125;   <span class="comment">// 返回 &quot;function&quot;</span></span><br></pre></td></tr></table></figure>

<p>5、函数：<code>function</code>关键词</p>
<p>①不使用 () 访问函数将返回函数声明而不是函数结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">toCelsius</span>(<span class="params">f</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="number">5</span>/<span class="number">9</span>) * (f<span class="number">-32</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = toCelsius;<span class="comment">//function toCelsius(f) &#123; return (5/9) * (f-32); &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;demo1&quot;</span>).innerHTML = toCelsius(<span class="number">100</span>);<span class="comment">//37.77777777777778</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>6、对象（属性和方法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">创建对象：</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    firstName: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">    lastName : <span class="string">&quot;Gates&quot;</span>,</span><br><span class="line">    id       : <span class="number">12345</span>,</span><br><span class="line">    fullName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">访问对象属性：</span><br><span class="line">objectName.propertyName</span><br><span class="line">或</span><br><span class="line">objectName[<span class="string">&quot;propertyName&quot;</span>]</span><br><span class="line"></span><br><span class="line">访问对象方法：（方法实际上是以属性值的形式存储的函数定义）</span><br><span class="line">objectName.methodName()</span><br><span class="line"></span><br><span class="line">通过关键词 <span class="string">&quot;new&quot;</span> 来声明 JavaScript 变量，该变量会被创建为对象，避免字符串、数值或逻辑对象，他们会增加代码的复杂性并降低执行速度：</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">String</span>();        <span class="comment">// 把 x 声明为 String 对象</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Number</span>();        <span class="comment">// 把 y 声明为 Number 对象</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="keyword">new</span> <span class="built_in">Boolean</span>();       <span class="comment">//	把 z 声明为 Boolean 对象</span></span><br></pre></td></tr></table></figure>





<h2 id="三、HTML事件"><a href="#三、HTML事件" class="headerlink" title="三、HTML事件"></a>三、HTML事件</h2><p>1、一些常见的 HTML 事件</p>
<table>
<thead>
<tr>
<th align="left">事件</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onchange</td>
<td align="left">HTML 元素已被改变</td>
</tr>
<tr>
<td align="left">onclick</td>
<td align="left">用户点击了 HTML 元素</td>
</tr>
<tr>
<td align="left">onmouseover</td>
<td align="left">用户把鼠标移动到 HTML 元素上</td>
</tr>
<tr>
<td align="left">onmouseout</td>
<td align="left">用户把鼠标移开 HTML 元素</td>
</tr>
<tr>
<td align="left">onkeydown</td>
<td align="left">用户按下键盘按键</td>
</tr>
<tr>
<td align="left">onload</td>
<td align="left">浏览器已经完成页面加载</td>
</tr>
</tbody></table>
<p><a href="https://www.w3school.com.cn/jsref/dom_obj_event.asp">W3School JavaScript 参考手册 HTML DOM 事件</a></p>
<h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2><p>1、字符串：用于存储和操作文本，单引号或双引号</p>
<p>2、内建属性 length 可返回字符串的<em>长度</em></p>
<p>3、可以在字符串中使用引号，只要不匹配围绕字符串的引号即可；或者使用转义字符反斜杠</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var answer &#x3D; &quot;It&#39;s good to see you again!&quot;;</span><br><span class="line">var x &#x3D; &#39;It\&#39;s good to see you again&#39;;</span><br></pre></td></tr></table></figure>

<p>其他六个 JavaScript 中有效的转义序列：</p>
<table>
<thead>
<tr>
<th align="left">代码</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\b</td>
<td align="left">退格键</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">换页</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">新行</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">回车</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">水平制表符</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">垂直制表符</td>
</tr>
</tbody></table>
<p>4、可以通过一个<code>反斜杠或字符串加法</code>在字符串中换行，但是不能通过反斜杠对代码行进行换行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">document.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = <span class="string">&quot;Hello \</span></span><br><span class="line"><span class="string">Kitty!&quot;</span>;</span><br><span class="line">或</span><br><span class="line">document.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = <span class="string">&quot;Hello&quot;</span> + </span><br><span class="line"><span class="string">&quot;Kitty!&quot;</span>;    </span><br><span class="line">    </span><br><span class="line">不能通过反斜杠对代码行进行换行</span><br><span class="line">document.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = \ </span><br><span class="line"><span class="string">&quot;Hello Kitty!&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>4、JavaScript 字符串是原始值，通过字面方式创建，字符串也可通过<code>关键词 new 定义为对象</code>(对象无法比较)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;Bill&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof x 将返回 string</span></span><br><span class="line"><span class="comment">// typeof y 将返回 object</span></span><br><span class="line"><span class="comment">// (x == y) 为 true，因为 x 和 y 的值相等</span></span><br><span class="line"><span class="comment">// (x === y) 为 false，因为 x 和 y 的类型不同（字符串与对象）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> z = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;Bill&quot;</span>);</span><br><span class="line"><span class="comment">// (y == z) 为 false，因为 x 和 y 是不同的对象</span></span><br><span class="line"><span class="comment">// (y === z) 为 false，因为 x 和 y 是不同的对象</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JavaScripe</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2020/09/09/CSS/</url>
    <content><![CDATA[<h2 id="1、隐藏"><a href="#1、隐藏" class="headerlink" title="1、隐藏"></a>1、隐藏</h2><details>
<summary>Copyright 2011.</summary>
<p>All pages and graphics on this web site are the property of W3School.</p>
</details>

 <details open="open">
     <summary>自定义名称</summary>
     <p>主标题</p>
     <ul>
         <li>内容行一</li>
         <li>内容行二</li>
         <li>内容行三</li>
     </ul>
</details>

<h2 id="2、标记"><a href="#2、标记" class="headerlink" title="2、标记"></a>2、标记</h2><p>The <abbr title="People's Republic of China">PRC</abbr> was founded in 1949.</p>
<p><acronym title="World Wide Web">WWW</acronym>只用于HTML4</p>
<h2 id="3、格式"><a href="#3、格式" class="headerlink" title="3、格式"></a>3、格式</h2><p><b>这是粗体文本</b></p>
<p><strong>加粗文字</strong></p>
<p><i>文字倾斜</i></p>
<p><em>倾斜（强调）</em></p>
<p><dfn>实际效果就是倾斜文本</dfn></p>
<p>从语义上来看就是表示引用其他作品的标题。 <cite>实际效果就是倾斜文本</cite></p>
<p><del>删除文子</del></p>
<p><s>删除线</s>;从语义上来看，表示不准确的删除。</p>
<p><u>给文字加下划线</u></p>
<p><ins>给文字加下划线</ins>；从语义上来看，<ins>是添加一段文字，起到强调作用</ins>&gt;。</p>
<p><small>添加小号字体</small> ，从语义上来看，用于<small style="color:red">免责声明和澄清声明</small></p>
<p><tt>标签呈现类似打字机或者等宽的文本效果</tt></p>
<p> sub表示下标：HTML<sub>5</sub>;sup表示上标:100m<sup>2</sup></p>
<p><q>给文本加上双引号</q></p>
<p><code>function()&#123;&#125;</code></p>
<p><var>num</var></p>
<p><samp>您没有权限浏览该网页</samp></p>
<p>请按<kbd>Enter</kbd>键</p>
<p><ruby style="font-size:50px" >英 <rt>(ying)</rt> 雄<rt>(xiong)</rt></ruby></p>
<p> <bdo dir="rtl">rtl就是从右到左，即：right to left</bdo></p>
<p><mark>加上一个黄色的背景。</mark></p>
<p>表示日期和时间，例如 <time>2015-9-18</time></p>
<p><span style="color:#4169e1">设置颜色</span></p>
<p><font size="5" face="arial" color="red">A paragraph.</font></p>
<p><meter value="5" min="0" max="10">3/10</meter></p>
<p><meter value="0.7">60%</meter></p>
<p><meter value="30" max="100" min="0"> </meter></p>
<p><meter value="0.3" max="1" min="0"> </meter></p>
<p> <meter value="10" max="100" min="0" low="30" high="80"> </meter></p>
<p> <meter value="50" max="100" min="0" low="30" high="80"> </meter></p>
<p> <meter value="90" max="100" min="0" low="30" high="80"> </meter></p>
<p> <meter value="50" max="100" min="0" low="30" high="80" form="50"> </meter></p>
<p>下载进度：<br><progress value="50" max="100"><br></progress></p>
<p><progress value="0.2" max="1"> </progress></p>
<p><b>注释：</b>Internet Explorer 9 以及更早的版本不支持 <progress> 标签。</p>

<p><progress></p>

<h2 id="4、表单"><a href="#4、表单" class="headerlink" title="4、表单"></a>4、表单</h2><form action="http://www.baidu.com" target="_blank">
    用户名： <input type="text" name="asd"><br>
    密码： <input type="password" name="ww"><br>
    密码： <keygen name="keygen" challenge="challenge"><br>
    邮箱：<input type="email"><br>
    网址：<input type="url"><br>
    电话：<input type="tel"><br>
    默认值：<input type="text" value="默认值"><br>
    最大值：<input type="" maxlength="6"><br>
    输入购买数量：<input type="number" max="100" min="10" step="5" value="15"><br>
    输入购买数量：<input type="range" max="100" min="10" step="5" value="15"><br>
    只读： <input type="text" readonly="readonly" value="只读，可提交"><br>
    示例：<input type="text" disabled="disabled" value="示例，不提交"><br>
    必须填写：<input type="email" required><br>
    设置默认值，当文本框获得焦点时被清空：<input type="seacrch" placeholder="请输入搜索关键字"><br>
    自动获得焦点：<input type="seacrch" placeholder="请输入搜索关键字" autofocus="autofocus"><br>
    指定快捷键windows中，指定快捷键后，按Alt+“快捷键”,便会获得焦点：<input type="seacrch" placeholder="请输入搜索关键字" accesskey="s"><br>
    定义是否开启浏览器自动记忆功能：<input type="text" name="asd" tabindex="2" autocomplete="off"><br>
    颜色选择：<input type="color"><br>
    <input type="file" accept="image/png" multiple="2"><br><br><br>
    意见： <textarea rows="5" cols="50" placeholder="发表意见" style="background: pink"></textarea><br><br><br>
    <input type="submit">
    <input type="reset" name="">
    <input type="image" src="崩坏.png" width="50">
    <input type="button" value="button">
    <button type="submit" style="background: pink;border-radius: 10px;padding:0px"><img src="崩坏.png" width="20">崩坏</button><br><br>
</form>



<p>tabindex属性：指定按Tab键时，项目间的移动顺序</p>
<form>
    用户名： <input type="text" name="asd" tabindex="2"><br >
    密码： <input type="password" name="ww" tabindex="1"><br>
    邮箱： <input type="email" tabindex="3"><br>
    <input type="submit">
</form><br>

<p>时间：</p>
<form>
    time：<input type="time"><br>
    datetime（UTC时间）：<input type="datetime"><br>
    datetime-local：<input type="datetime-local"><br>
    date：<input type="date"><br>
    month：<input type="month"><br>
    week：<input type="week"><br>
    <input type="submit">
</form><br><br>    

<ul>
<li><p>checkbox/复选框</p>
<form>
   <input type="checkbox" name="复选框" value="A">选项一
   <input type="checkbox" name="复选框" value="B">选项二
   <input type="checkbox" name="复选框" value="C">选项三
   <input type="checkbox" name="复选框" value="D" checked="checked">选项四
   <input type="submit" value="确定">
</form><br><br>



</li>
</ul>
<p> lable元素</p>
<form>
    <input type="checkbox" name="复选框" value="A" id="A">
    <label for="A">选项一</label>
    <input type="checkbox" name="复选框" value="B">选项二
    <label><input type="checkbox" name="复选框" value="C">选项三</label>
    <input type="checkbox" name="复选框" value="D" checked="checked">选项四
    <input type="submit" value="确定">
</form><br><br>

<ul>
<li>radio/单选框</li>
</ul>
<form>
    <input type="radio" name="复选框" value="A">选项一
    <input type="radio" name="复选框" value="B">选项二
    <input type="radio" name="复选框" value="C">选项三
    <input type="radio" name="复选框" value="D" checked="radio">选项四
    <input type="submit" value="确定">
</form><br><br>

<p>select元素</p>
<form>
    <select>
        <optgroup>
            <option value="不可少">选项一</option>
            <option value="不可少">选项二</option>
            <option value="不可少">选项三</option>
            <option value="不可少">选项四</option>
        </optgroup>
    </select>
    <input type="submit">
</form>



<p>datalist元素</p>
<form>
    <input type="text" list="datalist">
    <datalist id="datalist">
        <option value="不可少">选项一</option>
        <option value="不可少">选项二</option>
        <option value="不可少">选项三</option>
        <option value="不可少">选项四</option>
        <option value="不可少">a</option>
    </datalist>
    <input type="submit">
</form>



<p>lable属性</p>
<form>
    <select>
        <optgroup label="组一">
            <option value="不可少">选项一</option>
            <option value="不可少">选项二</option>
            <option value="不可少">选项三</option>
            <option value="不可少">选项四</option>
        </optgroup>
        <optgroup label="组二">
            <option value="不可少" label="组二">选项一</option>
            <option value="不可少">选项二</option>
            <option value="不可少">选项三</option>
            <option value="不可少">选项四</option>
        </optgroup>
    </select>
    <input type="submit">
</form>



<p>output元素</p>
<form action="" id="myform" oninput="sum.value=parseInt(num1.value)+parseInt(num2.value)">
    <input type="number" id="num1">
    +<input type="number" id="num2">
    =<output name="sum" for="num1 num2"></output>
</form>

<form oninput="x.value=parseInt(a.value)+parseInt(b.value)">0
<input type="range" id="a" value="50">100
+<input type="number" id="b" value="50">
=<output name="x" for="a b"></output>
</form>



<p>fieldset元素、legend元素</p>
<form>
    <fieldset>
        <legend>用户登录</legend>
        账号： <input type="text" name="">
        密码： <input type="password" name="">
        <input type="submit">
    </fieldset>
    <fieldset>
        <legend>用户注册</legend>
        账号： <input type="text" name="">
        密码： <input type="password" name="">
        <input type="submit">
    </fieldset>
</form><br><br>]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>java补缺</title>
    <url>/2020/09/07/java%E8%A1%A5%E7%BC%BA/</url>
    <content><![CDATA[<h2 id="1、双重循环"><a href="#1、双重循环" class="headerlink" title="1、双重循环"></a>1、双重循环</h2><p>打印图形、算法（冒泡排序）：【<code>外层循环和内存循环之间的数学关系</code>】</p>
<p>矩形、直角三角形、倒直角三角形、等腰三角形、菱形</p>
<h2 id="2、数组定义：三种形式"><a href="#2、数组定义：三种形式" class="headerlink" title="2、数组定义：三种形式"></a>2、数组定义：三种形式</h2><p> int[] students = new int[3] ;<br> int[] students = new int[]{97,98,99}  ;<br> int[] students = {97,98,99}  ; //不能拆开</p>
<h2 id="3、对象的属性：就是全局变量，"><a href="#3、对象的属性：就是全局变量，" class="headerlink" title="3、对象的属性：就是全局变量，"></a>3、对象的属性：就是全局变量，</h2><p>全局变量：方法以外，类以内；  有初始值（数据类型的默认值 int 0）<br>局部变量：方法内部 ;没有初始值，在使用前 必须赋初值</p>
<p>局部变量可以和全局变量重名，并且局部变量优先级高</p>
<h2 id="4、方法的调用的常见情况："><a href="#4、方法的调用的常见情况：" class="headerlink" title="4、方法的调用的常见情况："></a>4、方法的调用的常见情况：</h2><p>同一个类中：都有staitc，或都没static，或 没的调有的:直接调用<br><code>有static  不能直接调用   没有static的方法</code></p>
<p>不在同一个类中：<br>    万能方法：  new 对象，对象.方法() ;<br>                  Person2 p = new Person2();<br>                    p.eatFruit();<br>    调用的另一个方法必须是静态的：Person2.eatFruit(); //类名.方法()  其中的方法必须是static修饰的</p>
<p>static方法 是 类级别的，属于类<br>非static方法 是 对象级别，属于对象</p>
<p>对象.static方法()   对象.非static方法()<br>            类.static方法()<br>类有的，对象自然有；<br>对象有的，类不一定有</p>
<h2 id="5、String初始化"><a href="#5、String初始化" class="headerlink" title="5、String初始化"></a>5、String初始化</h2><p>对于非基本类型（对象类型|引用类型），<br>1、只定义，不new（实例化）：  默认值都是Null<br>        Person per ;<br>        String s3 ;</p>
<p>2、new实例化：  Xxx xx  =new Xxx();<br>        xx值：不是null<br>        xx内部的属性值 目前 全部是数据类型的默认值 ：</p>
<pre><code>String s3 = new String();  s3:  &quot;&quot;

Person per = new Person();  per:  name是null  age是0
(String name,int age)</code></pre>
<h2 id="6、String的split"><a href="#6、String的split" class="headerlink" title="6、String的split()"></a>6、String的split()</h2><p>特殊符号不适用：如果要用，需要加两斜杆<code>\\</code></p>
<blockquote>
<p>.</p>
<p>\</p>
<p>|</p>
<p>$</p>
<p>+</p>
<p>*</p>
</blockquote>
<p>也可以适用以下方法替代：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String str&#x3D;&quot;hello|world&quot;;</span><br><span class="line">      StringTokenizer token&#x3D;new StringTokenizer(str,&quot;|&quot;);</span><br><span class="line">      while (token.hasMoreElements())&#123;</span><br><span class="line">          System.out.println(token.nextElement());</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="7、StringBuffer"><a href="#7、StringBuffer" class="headerlink" title="7、StringBuffer"></a>7、StringBuffer</h2><p>String的增强版,比String最大的升级： 可以在 原来的内存空间中直接修改变量值</p>
<h2 id="8、private权限修饰符和set-get解决不安全问题"><a href="#8、private权限修饰符和set-get解决不安全问题" class="headerlink" title="8、private权限修饰符和set\get解决不安全问题"></a>8、private权限修饰符和set\get解决不安全问题</h2><h2 id="9、方法重载与重写"><a href="#9、方法重载与重写" class="headerlink" title="9、方法重载与重写"></a>9、方法重载与重写</h2><p>1、重载</p>
<p>方法名一样，参数列表不同（类型不同、个数不同、顺序不同）</p>
<p>与放回类型无关</p>
<p>与参数名无关</p>
<p>2、重写（@Override）</p>
<p>重写父类的方法，方法名相同，参数类型相同</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD.png"></p>
<h2 id="10、构造方法"><a href="#10、构造方法" class="headerlink" title="10、构造方法"></a>10、构造方法</h2><p>含参构造方法的作用：</p>
<p>1.实例化（产生对象）<br>Dog dog = new Dog();</p>
<p>2.一次性给多个属性赋值（set方法只能一次一个）</p>
<p>3、多个构造方法之间 不能循环调用</p>
<p>4、this 关键字可使本类构造器之间相互调用，但必须放置在构造器第一行</p>
<p>5、子类继承父类：  private 、构造方法是不能被继承（不能被重写）的。但是子类可以显示的调用父类构造（super）</p>
<p>6、this 和super在一个构造器中只能二选一，且都要放在第一行</p>
<p>7、初始化</p>
<p>new Xxx():经历了以下过程<br>父类static…<br>子类static…<br>父类普通代码块…<br>父类无参..<br>子类普通代码块…<br>子类无参…</p>
<h2 id="11、访问修饰符"><a href="#11、访问修饰符" class="headerlink" title="11、访问修饰符"></a>11、访问修饰符</h2><p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200907202831.png"></p>
<h2 id="12、抽象类和多态-多态时使用的方法，必须同时出现在父类、子类（重写）"><a href="#12、抽象类和多态-多态时使用的方法，必须同时出现在父类、子类（重写）" class="headerlink" title="12、抽象类和多态(多态时使用的方法，必须同时出现在父类、子类（重写）)"></a>12、抽象类和多态(多态时使用的方法，必须同时出现在父类、子类（重写）)</h2><p>1、抽象方法：abstract，必须包含在抽象类中，多个子类的方法标签一样，方法体不一样时使用；</p>
<p>抽象类不能实例化（new）：抽象类中可能存在抽象方法，没有方法体</p>
<p>2、多态</p>
<p>Pet pet = new Dog();//多态<br>Pet pet = new Penguin();</p>
<p>double d = 10 ;  //大范围类型 = 小范围类型<br>double = int ;</p>
<p>父类 引用对象名字 = new 子类();<br>多态：父类引用指向子类对象（<code>不能使用子类独有的方法</code>）；引用在栈空间中，子类对象在堆空间中</p>
<p><code>如果要使用子类独有的方法</code>：①判断（对象 instanceof  类型）②转型</p>
<p>多态的实现方式：</p>
<blockquote>
<p>重载</p>
<p>重写</p>
<p>父类作为形参</p>
<p>父类作为返回值类型</p>
</blockquote>
<h2 id="13、-final"><a href="#13、-final" class="headerlink" title="13、 final"></a>13、 final</h2><p>final修饰的类 ：不能被继承<br>final修饰的方法：不能被重写<br>final修饰的变量、属性：不能被修改</p>
<p>final修饰的引用：引用不能被改变，但是引用的对象的值可以改变</p>
<h2 id="14、class、abstract-class、interface"><a href="#14、class、abstract-class、interface" class="headerlink" title="14、class、abstract class、interface"></a>14、class、abstract class、interface</h2><p>1、接口：interface<br>public interface Person</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;1.属性全部是static final（默认，可不写）</span><br><span class="line">	&#x2F;&#x2F;2.方法全部是public abstract（默认，可不写）</span><br><span class="line">	String name;</span><br><span class="line">	public abstract void eat();</span><br><span class="line">	public abstract void sleep();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、接口比抽象类 更进一步的“抽象”</p>
<p>3、继承：子类<code>is a</code> 父类<br>狗是一个宠物</p>
<p>接口：实现类（子类）<code>has a</code>接口（父类），代表了一种能力、一种约定<br>门有锁的功能  </p>
<p>4、接口不能实例化</p>
<p>5、子类必须重写父类中的所有抽象方法<br>实现类必须实现接口中的 抽象方法</p>
<p>6、java中单继承（<code>类为单继承，但是接口之间可以多继承</code>）、多实现</p>
<p>7、接口可以多态</p>
<p>8、接口没有构造方法</p>
<h2 id="15、值传递"><a href="#15、值传递" class="headerlink" title="15、值传递"></a>15、值传递</h2><p>a() 中的基本类型（8个）x在b()方法中被修改，a()方法中的x保持不变；</p>
<p>a() 中的引用类型x在b()方法中被修改，a()方法中的x与b()方法的改变一致</p>
<h2 id="16、Lambda"><a href="#16、Lambda" class="headerlink" title="16、Lambda"></a>16、Lambda</h2><p>1、lambda   <em>λ</em>   组成  ：</p>
<ul>
<li>逗号隔开的参数列表      (x,x,x)     ()</li>
<li>箭头符号   -&gt;  </li>
<li>方法体 （λ代码块）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Thread(</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    System.out.println(&quot;Lambda&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">        ).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>①new Thread() 中是一个接口或抽象类，且接口和抽象类中只有一个抽象方法（Lambda重写此方法）</p>
<p>②Lambda重写的接口或抽象类必须是函数式接口（@FunctionalInterface）或只有一个抽象方法的抽象类</p>
<p>③函数式接口：只有一个<code>在该接口中定义的</code>抽象方法的接口（不管带没带@FunctionalInterface注解）</p>
<p>④函数式接口：</p>
<blockquote>
<ul>
<li><p>JDK自带：四大函数式接口（java.util.function）</p>
<ol>
<li><p>有参，无返回值（消费型）：传入 T ，返回 void</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs this operation on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>无参，有返回值（供给型）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets a result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>有参，有返回值（函数型）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this function to the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the function argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the function result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>断言式接口（断言型）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluates this predicate on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the input argument matches the predicate,</span></span><br><span class="line"><span class="comment">     * otherwise &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ol>
</li>
</ul>
</blockquote>
<p>2、Lambda表达式使用方式一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">// void accept(T t);</span></span><br><span class="line">     Consumer&lt;String&gt; c = (x) -&gt;  System.out.println(<span class="string">&quot;吃：&quot;</span>+x) ;</span><br><span class="line">     c.accept(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>3、Lambda表达式使用方式二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Lambda&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        ).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将lambda表达式所代表的函数式接口，作为一个方法的参数存在。</p>
<p>理解：方法B( 方法A )：函数式编程。scala  javascript本身就支持函数式编程。</p>
<p>形式：方法( 函数式接口 )</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">upper</span><span class="params">(Function&lt;String,String&gt; fun, String str)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> fun.apply(str);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       upper( (x)-&gt;x.toUpperCase(),<span class="string">&quot;qwert&quot;</span>):</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200908092311.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lambda 推导：</span></span><br><span class="line"><span class="comment"> * Lambda接口</span></span><br><span class="line"><span class="comment"> * lambda外部类</span></span><br><span class="line"><span class="comment"> *lambda静态内部类</span></span><br><span class="line"><span class="comment"> *lambda局部内部类</span></span><br><span class="line"><span class="comment"> *lambda匿名内部类</span></span><br><span class="line"><span class="comment"> *lambda简化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> naps</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest01</span> </span>&#123;</span><br><span class="line">	<span class="comment">//静态内部类</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like1</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;lambda静态内部类&quot;</span>);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ILike like=<span class="keyword">new</span> Like();</span><br><span class="line">		like.lambda();</span><br><span class="line">		</span><br><span class="line">		ILike like1=<span class="keyword">new</span> Like1();</span><br><span class="line">		like1.lambda();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//局部内部类</span></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;lambda局部内部类&quot;</span>);		</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ILike like2=<span class="keyword">new</span> Like2();</span><br><span class="line">		like2.lambda();</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//匿名内部类</span></span><br><span class="line">		like=<span class="keyword">new</span> ILike() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;lambda匿名内部类&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		like.lambda();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//Lanbda简化，必须存在类型</span></span><br><span class="line">		like=()-&gt; &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;lambda简化&quot;</span>);</span><br><span class="line">		&#125;;</span><br><span class="line">		like.lambda();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口,只有一个方法</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;lambda外部类&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="17、集合：Collection（单值）-和Map（键值）"><a href="#17、集合：Collection（单值）-和Map（键值）" class="headerlink" title="17、集合：Collection（单值） 和Map（键值）"></a>17、集合：Collection（单值） 和Map（键值）</h2><p>1、Collection（Interface Collection<E>）：存储的数据是 不唯一、无序的对象</p>
<p>List：存储的数据是 不唯一、有序的对象</p>
<p>Set:存储的数据是 唯一、无序的对象</p>
<p>唯一：不能重复</p>
<p>有序：不是排序；是输入顺序 是否与 输出顺序一致的。</p>
<p>2、Map：键值对（key-value），key唯一</p>
<p>键值转单值：</p>
<ul>
<li><ul>
<li><ul>
<li><pre><code>Set&lt;K&gt; keySet()
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- - - &#96;&#96;&#96;</span><br><span class="line">      Collection&lt;V&gt; values()</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>3、删除：</p>
<p>Collection中的类（List、Set），删除的返回值是 boolean；</p>
<p>Map中的类，是根据Key删除，返回值是value.</p>
<p>4、遍历collection</p>
<p>（1）循环for（普通for[只适用于‘有序’的集合]，增强for[建议]）</p>
<p>（2）迭代器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Iterator&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    boolean hasNext();</span><br><span class="line"></span><br><span class="line">    E next();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set set = <span class="keyword">new</span> HashSet() ;		</span><br><span class="line">Iterator iterator = set.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    Object o = iterator.next();</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、遍历Map</p>
<p>方式一：键值转单值——&gt;遍历</p>
<p>方式二：通过entry</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set entries = map.entrySet();</span><br><span class="line"><span class="keyword">for</span>(Object e :entries)&#123;</span><br><span class="line">    Map.Entry et =  (Map.Entry)e ;</span><br><span class="line">    Object k =  et.getKey();</span><br><span class="line">    Object v = et.getValue();</span><br><span class="line">    System.out.println(<span class="string">&quot;k-&quot;</span>+k);</span><br><span class="line">    System.out.println(<span class="string">&quot;v-&quot;</span>+v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="18、泛型（数据安全、防止类型转换时出错）：JDK1-5"><a href="#18、泛型（数据安全、防止类型转换时出错）：JDK1-5" class="headerlink" title="18、泛型（数据安全、防止类型转换时出错）：JDK1.5"></a>18、泛型（数据安全、防止类型转换时出错）：JDK1.5</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Double&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h2 id="19、集合工具类Collections：排序、复制、翻转等操作"><a href="#19、集合工具类Collections：排序、复制、翻转等操作" class="headerlink" title="19、集合工具类Collections：排序、复制、翻转等操作"></a>19、集合工具类Collections：排序、复制、翻转等操作</h2><h2 id="20、数组工具类Arrays"><a href="#20、数组工具类Arrays" class="headerlink" title="20、数组工具类Arrays"></a>20、数组工具类Arrays</h2><h2 id="21、比较器实现对象集合的排序"><a href="#21、比较器实现对象集合的排序" class="headerlink" title="21、比较器实现对象集合的排序"></a>21、比较器实现对象集合的排序</h2><p>1、Comparable:  内部比较器（侵入性，需要修改原有代码）</p>
<p>将比较的对象（Person）实现Comparable接口，重写连的compareTo()方法。在compareTo()中编写比较的逻辑。重点是返回值，-1 ，0,1  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Person inputPerson = (Person)o ;</span><br><span class="line">        <span class="comment">//根据学号，降序</span></span><br><span class="line">       <span class="keyword">int</span> result =  <span class="keyword">this</span>.id &gt; inputPerson.id ?-<span class="number">1</span>  : (   <span class="keyword">this</span>.id   ==    inputPerson.id ?<span class="number">0</span>:<span class="number">1</span> ) ;</span><br><span class="line">       <span class="comment">//如果学号相同，再根据姓名升序.  za  zs</span></span><br><span class="line">        <span class="keyword">if</span>(result  == <span class="number">0</span> )&#123;</span><br><span class="line">            result = <span class="keyword">this</span>.name .compareTo(      inputPerson.name) ;<span class="comment">//调用String已经重写过的compareTo()</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"><span class="comment">//        return 1;//当前对象，比传入对象大</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、Comparator：外部比较器 （无侵入性，不影响原有代码）</p>
<h2 id="22、包装类"><a href="#22、包装类" class="headerlink" title="22、包装类"></a>22、包装类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;Double&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>

<p>1、自动装箱（valueOf()）</p>
<p>将基本数据类型转为引用类型</p>
<p>valueOf()方法中有个缓冲区 [-128,127],如果要装箱的数字在缓冲区范围以内，则直接从缓冲区中取；否则，new Integer()一个新对象</p>
<p>2、自动拆箱（intValue()、floatValue()……）</p>
<p>将基引用类型转为基本类型</p>
<h2 id="23、异常（try、catch、finally、throw、throws）"><a href="#23、异常（try、catch、finally、throw、throws）" class="headerlink" title="23、异常（try、catch、finally、throw、throws）"></a>23、异常（try、catch、finally、throw、throws）</h2><p>1、try…catch：（可以使用if…else 替代）</p>
<p>2、异常的基类为Throwable</p>
<p>Throwable子类分为Error（错误，程序员不能处理）和Exception类（一般讨论的异常，需要处理的异常）</p>
<p>Exception类分为RunTimeException（运行时异常，在编辑时不报错）和CheckException（非运行时异常、检查异常，在编写时提示）</p>
<p>但是，CheckException不继承Exception类，只是一个统称</p>
<p>3、try…catch…finally</p>
<p>自己不能处理的异常，通过throws提交给上级方法处理</p>
<p>如果在try中发生了异常，则try后续代码不执行，直接跳到catch执行</p>
<p>finally:最终都要执行的内容（即使遇到return，依然执行，除非关闭虚拟机：System.exit(1);）</p>
<p>4、多个catch捕获不同的异常：</p>
<p>只执行一个</p>
<p>先catch范围小的，后catch范围大的</p>
<p>5、throws：把当类的异常抛给调用该类的上级解决</p>
<p>6、throw：自定义异常时使用</p>
<p>①继承Exception或Throwable或其他异常（如NullPointerException等）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">MyException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②声明一个异常并且通过try…catch 或throws处理异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> age=<span class="number">150</span>;</span><br><span class="line">       <span class="keyword">if</span>(age&lt;<span class="number">0</span>||age&gt;<span class="number">120</span>)&#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;年龄不合法&quot;</span>);</span><br><span class="line">           &#125;<span class="keyword">catch</span> (MyException e)&#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               System.out.println(e.getMessage());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="24、注解（除继承和实现外的增加类、方法、属性的功能的方式）"><a href="#24、注解（除继承和实现外的增加类、方法、属性的功能的方式）" class="headerlink" title="24、注解（除继承和实现外的增加类、方法、属性的功能的方式）"></a>24、注解（除继承和实现外的增加类、方法、属性的功能的方式）</h2><p>1、内置注解：</p>
<p>@Override：可以确保重写的方法在父类或接口中的确存在</p>
<p>@Deprecated：不推荐使用，在后续版本或许会被删除</p>
<p>@SuppressWarning：（value=””）</p>
<blockquote>
<p>value=”unchecked”：忽略对泛型等的检查操作</p>
<p>value=”deprecation”：忽略不推荐使用的显示</p>
<p>value=”unused”：忽略已定义但未使用的变量的灰色显示</p>
<p>fallthrough：swtich 是否一致往下执行，而没有break</p>
<p>path：忽略对类路径不存在的检查</p>
<p>serialVersionUI：忽略 一个类可以序列化、但却没有序列化的 警告</p>
<p>all：忽略一切警告</p>
</blockquote>
<p>2、自定义注解</p>
<p>3、元注解：修饰注解的注解</p>
<blockquote>
<p>@Terget：限制注解可以使用的位置</p>
<p>@Retention：限制注解的生命周期</p>
<p>@Document：默认情况下，javadoc不包含注解，添加该注解时生成Javadoc时将注解显示在文档中</p>
<p>@Inherited：继承，使子类继承父类的注解</p>
</blockquote>
<p>@Target：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Retention：限制注解的生命周期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be discarded by the compiler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//jvm直接将该注解丢弃 </span></span><br><span class="line">    SOURCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class="line"><span class="comment">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class="line"><span class="comment">     * behavior.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//程序在编译时 会使用注解，在运行时不会使用</span></span><br><span class="line">    CLASS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class="line"><span class="comment">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//程序在编译以及运行时，都会使用注解</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="25、IO（InputStream和OutputStream）"><a href="#25、IO（InputStream和OutputStream）" class="headerlink" title="25、IO（InputStream和OutputStream）"></a>25、IO（InputStream和OutputStream）</h2><h2 id="26、网络编程"><a href="#26、网络编程" class="headerlink" title="26、网络编程"></a>26、网络编程</h2><h3 id="1、一对一"><a href="#1、一对一" class="headerlink" title="1、一对一"></a>1、一对一</h3><p>ip：网络唯一标识符，由32位二进制组成（4个8位二进制，每个最大255）</p>
<p>协议：网络通讯的规则、标准、约定</p>
<blockquote>
<p>TCP：面向连接的、可靠的（不丢失、不重复、有序）、基于字节流的传输通讯协议，传输速度慢</p>
<p>UDP：无连接的协议，在传输数据之前，客户端和服务端之间不建立和维护连接，提供不可靠的数据传输</p>
</blockquote>
<p>socket：套接字，基于TCP协议的网络通讯，提供双向安全连接的网络通信。socket需要借助于数据流完成数据的传输。</p>
<p>实现：</p>
<ol>
<li>建立连接</li>
<li>通过socket生成InputStream和OutputStream（准备发送数据）</li>
<li>使用InputStream和OutputStream收发数据</li>
<li>关闭数据流</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream outputStream=<span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream=<span class="keyword">null</span>;</span><br><span class="line">        BufferedReader reader=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            socket=<span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">            outputStream = socket.getOutputStream();</span><br><span class="line">            outputStream.write(<span class="string">&quot;hello server&quot;</span>.getBytes());</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">            inputStream = socket.getInputStream();</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">            String info=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((info=reader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(info);</span><br><span class="line">            &#125;</span><br><span class="line">            socket.shutdownInput();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;<span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(outputStream!=<span class="keyword">null</span>)outputStream.close();</span><br><span class="line">            <span class="keyword">if</span>(reader!=<span class="keyword">null</span>)reader.close();</span><br><span class="line">            <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)inputStream.close();</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)socket.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket serverSocket=<span class="keyword">null</span>;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream=<span class="keyword">null</span>;</span><br><span class="line">        BufferedReader reader=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream outputStream=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket=<span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">            <span class="comment">//准备完成，监听客户端,一直阻塞，直到监听到客户端</span></span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端请求&quot;</span>);</span><br><span class="line">            inputStream = socket.getInputStream();</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">            String info=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((info=reader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Client:&quot;</span>+info);</span><br><span class="line">            &#125;</span><br><span class="line">            socket.shutdownInput();</span><br><span class="line">            outputStream = socket.getOutputStream();</span><br><span class="line">            outputStream.write(<span class="string">&quot;welcome&quot;</span>.getBytes());</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(reader!=<span class="keyword">null</span>)reader.close();</span><br><span class="line">                <span class="keyword">if</span>(outputStream!=<span class="keyword">null</span>)outputStream.close();</span><br><span class="line">                <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)inputStream.close();</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)socket.close();</span><br><span class="line">                <span class="keyword">if</span>(serverSocket!=<span class="keyword">null</span>)serverSocket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2、网络传输对象流"><a href="#2、网络传输对象流" class="headerlink" title="2、网络传输对象流"></a>2、网络传输对象流</h3><p>实现：</p>
<ol>
<li><p>将对象序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li>使用对象流ObjectInputStream和ObjectOutputStream传输</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream outputStream=<span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket=<span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">            Student student=<span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">&quot;zhao&quot;</span>,<span class="number">18</span>);</span><br><span class="line">            outputStream = socket.getOutputStream();</span><br><span class="line">            oos=<span class="keyword">new</span> ObjectOutputStream(outputStream);</span><br><span class="line">            oos.writeObject(student);</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(oos!=<span class="keyword">null</span>)oos.close();</span><br><span class="line">                <span class="keyword">if</span>(outputStream!=<span class="keyword">null</span>)outputStream.close();</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket serverSocket=<span class="keyword">null</span>;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream=<span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket=<span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            inputStream = socket.getInputStream();</span><br><span class="line">            ois=<span class="keyword">new</span> ObjectInputStream(inputStream);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Student student =(Student) ois.readObject();</span><br><span class="line">                System.out.println(student.toString());</span><br><span class="line">            &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            socket.shutdownInput();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(ois!=<span class="keyword">null</span>)ois.close();</span><br><span class="line">                <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)inputStream.close();</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)socket.close();</span><br><span class="line">                <span class="keyword">if</span>(serverSocket!=<span class="keyword">null</span>)serverSocket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、多线程处理多客户端"><a href="#3、多线程处理多客户端" class="headerlink" title="3、多线程处理多客户端"></a>3、多线程处理多客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocket serverSocket=<span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                Socket socket=serverSocket.accept();</span><br><span class="line">                ServerThread serverThread=<span class="keyword">new</span> ServerThread(socket);</span><br><span class="line">                serverThread.start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InputStream inputStream=<span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream outputStream=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = socket.getInputStream();</span><br><span class="line">            ois=<span class="keyword">new</span> ObjectInputStream(inputStream);</span><br><span class="line">            Student student=(Student) ois.readObject();</span><br><span class="line">            System.out.println(student.toString());</span><br><span class="line">            socket.shutdownInput();</span><br><span class="line"></span><br><span class="line">            outputStream=socket.getOutputStream();</span><br><span class="line">            outputStream.write(<span class="string">&quot;copy that&quot;</span>.getBytes());</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(outputStream!=<span class="keyword">null</span>)outputStream.close();</span><br><span class="line">                <span class="keyword">if</span>(ois!=<span class="keyword">null</span>)ois.close();</span><br><span class="line">                <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)inputStream.close();</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream outputStream=<span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket=<span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">            Student student=<span class="keyword">new</span> Student(<span class="number">2</span>,<span class="string">&quot;zhao2&quot;</span>,<span class="number">22</span>);</span><br><span class="line">            outputStream = socket.getOutputStream();</span><br><span class="line">            oos=<span class="keyword">new</span> ObjectOutputStream(outputStream);</span><br><span class="line">            oos.writeObject(student);</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">            inputStream = socket.getInputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">            inputStream.read(bytes);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">            socket.shutdownInput();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)inputStream.close();</span><br><span class="line">                <span class="keyword">if</span>(oos!=<span class="keyword">null</span>)oos.close();</span><br><span class="line">                <span class="keyword">if</span>(outputStream!=<span class="keyword">null</span>)outputStream.close();</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、UDP实现"><a href="#4、UDP实现" class="headerlink" title="4、UDP实现"></a>4、UDP实现</h3><p>DatagramPacket：封装了数据报的数据和数据长度、目标地址和目标端口</p>
<p>DatagramSocket：收发DatagramPacket封装的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InetAddress inetAddress=<span class="keyword">null</span>;</span><br><span class="line">        DatagramSocket datagramSocket=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inetAddress = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            String str=<span class="string">&quot;helloserver&quot;</span>;</span><br><span class="line">            DatagramPacket datagramPacket=<span class="keyword">new</span> DatagramPacket(str.getBytes(),str.length(),inetAddress,<span class="number">8888</span>);</span><br><span class="line">            datagramSocket=<span class="keyword">new</span> DatagramSocket();</span><br><span class="line">            datagramSocket.send(datagramPacket);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownHostException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            datagramSocket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receive</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DatagramSocket datagramSocket=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="comment">//准备DatagramPacket</span></span><br><span class="line">        DatagramPacket datagramPacket=<span class="keyword">new</span> DatagramPacket(bytes,bytes.length);</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            datagramSocket=<span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);</span><br><span class="line">            datagramSocket.receive(datagramPacket);</span><br><span class="line"></span><br><span class="line">            String receiveData=<span class="keyword">new</span> String(datagramPacket.getData());</span><br><span class="line">            System.out.println(receiveData);</span><br><span class="line">            System.out.println(datagramPacket.getAddress());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            datagramSocket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、网络编程工具类"><a href="#5、网络编程工具类" class="headerlink" title="5、网络编程工具类"></a>5、网络编程工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress host=InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(host);</span><br><span class="line">            InetAddress host1=InetAddress.getByName(<span class="string">&quot;www.bilibili.com&quot;</span>);</span><br><span class="line">            System.out.println(host1);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownHostException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://www.163.com/&quot;</span>);</span><br><span class="line">            System.out.println(url);</span><br><span class="line">            URLConnection urlConnection = url.openConnection();</span><br><span class="line">            inputStream = urlConnection.getInputStream();</span><br><span class="line">            outputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:/163.html&quot;</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">64</span>];</span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) outputStream.close();</span><br><span class="line">                <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="27、反射"><a href="#27、反射" class="headerlink" title="27、反射"></a>27、反射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        demo1();</span></span><br><span class="line"><span class="comment">//        demo2();</span></span><br><span class="line"><span class="comment">//        demo3();</span></span><br><span class="line"><span class="comment">//        demo4();</span></span><br><span class="line"><span class="comment">//        demo5();</span></span><br><span class="line"><span class="comment">//        demo6();</span></span><br><span class="line"><span class="comment">//        demo7();</span></span><br><span class="line"><span class="comment">//        demo8();</span></span><br><span class="line"><span class="comment">//        demo9();</span></span><br><span class="line"><span class="comment">//        demo10();</span></span><br><span class="line"><span class="comment">//        demo11();</span></span><br><span class="line">        demo12();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过反射获取类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取反射对象（反射入口）Class：三种反式</span></span><br><span class="line"><span class="comment">         * ①Class.forName()</span></span><br><span class="line"><span class="comment">         * ②XXX.Class</span></span><br><span class="line"><span class="comment">         * ③对象.getClass()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; personClass1 = Class.forName(<span class="string">&quot;cn.nap.test.reflect.Person&quot;</span>);</span><br><span class="line">            System.out.println(personClass1);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        Class&lt;Person&gt; personClass2 = Person.class;</span><br><span class="line">        System.out.println(personClass2);</span><br><span class="line">        <span class="comment">//方式三</span></span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        Class&lt;? extends Person&gt; personClass3 = person.getClass();</span><br><span class="line">        System.out.println(personClass3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过反射获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//三选一即可</span></span><br><span class="line">        Class&lt;?&gt; personClass1=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            personClass1 = Class.forName(<span class="string">&quot;cn.nap.test.reflect.Person&quot;</span>);</span><br><span class="line">            System.out.println(personClass1);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取所有公共方法（1、本类及父类、接口中的所有方法；2、符合访问修饰符的规律的方法）</span></span><br><span class="line">        Method[] methods=personClass1.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method:methods)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------&quot;</span>);</span><br><span class="line">        <span class="comment">//获取当前类的所有方法（1、当前类；2、忽略修饰符规律限制）</span></span><br><span class="line">        Method[] declaredMethods = personClass1.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method declaredMethod:declaredMethods)&#123;</span><br><span class="line">            System.out.println(declaredMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class&lt;?&gt; personClass1=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            personClass1 = Class.forName(<span class="string">&quot;cn.nap.test.reflect.Person&quot;</span>);</span><br><span class="line">            System.out.println(personClass1);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = personClass1.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span>(Class&lt;?&gt; inter:interfaces)&#123;</span><br><span class="line">            System.out.println(inter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取父类（单继承，只有一个）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class&lt;?&gt; personClass1=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            personClass1 = Class.forName(<span class="string">&quot;cn.nap.test.reflect.Person&quot;</span>);</span><br><span class="line">            System.out.println(personClass1);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; superclass = personClass1.getSuperclass();</span><br><span class="line">        System.out.println(superclass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class&lt;?&gt; personClass1=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            personClass1 = Class.forName(<span class="string">&quot;cn.nap.test.reflect.Person&quot;</span>);</span><br><span class="line">            System.out.println(personClass1);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//公共的构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = personClass1.getConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor&lt;?&gt; constructor:constructors)&#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//private修饰的构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personClass1.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor&lt;?&gt; declaredConstructor:declaredConstructors)&#123;</span><br><span class="line">            System.out.println(declaredConstructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取所有的公共属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class&lt;?&gt; personClass1=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            personClass1 = Class.forName(<span class="string">&quot;cn.nap.test.reflect.Person&quot;</span>);</span><br><span class="line">            System.out.println(personClass1);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取所有的公共属性</span></span><br><span class="line">        Field[] fields = personClass1.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field:fields)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        <span class="comment">//获取当前类的所有属性（1、当前类；2、忽略修饰符规律限制）</span></span><br><span class="line">        Field[] declaredFields = personClass1.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field declaredField:declaredFields)&#123;</span><br><span class="line">            System.out.println(declaredField);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取当前反射所代表类（接口）的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo7</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; personClass1=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            personClass1 = Class.forName(<span class="string">&quot;cn.nap.test.reflect.Person&quot;</span>);</span><br><span class="line">            System.out.println(personClass1);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Object instance = personClass1.newInstance();</span><br><span class="line">        Person person=(Person)instance;</span><br><span class="line">        person.setName(<span class="string">&quot;zhao&quot;</span>);</span><br><span class="line">        <span class="comment">//操作属性</span></span><br><span class="line">        Field id = personClass1.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">//由于只能通过set赋值，private访问修饰符限制，可以通过setAccessible（）暂时屏蔽，私有方法Method和私有构造器也同样适用</span></span><br><span class="line">        <span class="comment">//修改属性的访问权限</span></span><br><span class="line">        id.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        id.set(person,<span class="number">1</span>);</span><br><span class="line">        System.out.println(person.getId());</span><br><span class="line">        <span class="comment">//操作方法</span></span><br><span class="line">        Method privateMothed = personClass1.getDeclaredMethod(<span class="string">&quot;privateMothed&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        privateMothed.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        privateMothed.invoke(person,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作构造器：基本类型和包装类不通用</span></span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = personClass1.getDeclaredConstructor(<span class="keyword">new</span> Class[]&#123;<span class="keyword">int</span>.class, String.class, <span class="keyword">int</span>.class&#125;);</span><br><span class="line">        System.out.println(declaredConstructor);</span><br><span class="line">        <span class="comment">//通过构造器实例对象,参数列表要和对应的构造器一致</span></span><br><span class="line">        <span class="comment">//private要设置setAccessible（）</span></span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Person person1 = (Person) declaredConstructor.newInstance(<span class="number">1</span>,<span class="string">&quot;zhao&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//动态加载类名和方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo8</span><span class="params">()</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">        Properties prop=<span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(<span class="keyword">new</span> FileReader(<span class="string">&quot;class.txt&quot;</span>));</span><br><span class="line">        String className=prop.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String methodName=prop.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; personClass=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            personClass = Class.forName(className);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Method declaredMethod = personClass.getDeclaredMethod(methodName);</span><br><span class="line">        declaredMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        declaredMethod.invoke(personClass.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射越过泛型检查</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo9</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;? extends List&gt; listClass = list.getClass();</span><br><span class="line">        Method method = listClass.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line">        method.invoke(list,<span class="string">&quot;zhao&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射实现set赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Object obj,String propertyName,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = obj.getClass();</span><br><span class="line">        Field declaredField = aClass.getDeclaredField(propertyName);</span><br><span class="line">        declaredField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        declaredField.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo10</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        setProperties(person,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;liu&quot;</span>);</span><br><span class="line">        System.out.println(person.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射操作一维动态数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo11</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入数组类型&quot;</span>);</span><br><span class="line">        String type=input.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入数组个数&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> num=input.nextInt();</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(type);</span><br><span class="line">        Object array = Array.newInstance(aClass, num);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入数组第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素&quot;</span>);</span><br><span class="line">            Object element=input.next();</span><br><span class="line">            Array.set(array,i,element);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终的数组为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">            System.out.print(Array.get(array,i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射操作二维数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo12</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class&lt;Integer&gt; clazz = Integer.class;</span><br><span class="line">        <span class="keyword">int</span>[] dim=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        Object arr=Array.newInstance(clazz,dim);</span><br><span class="line">        Object arr1=Array.get(arr,<span class="number">2</span>);</span><br><span class="line">        Array.set(arr1,<span class="number">1</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(Array.get(arr1,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="28、RPC"><a href="#28、RPC" class="headerlink" title="28、RPC"></a>28、RPC</h2>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>两数交换</title>
    <url>/2020/09/06/%E4%B8%A4%E6%95%B0%E4%BA%A4%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="两数交换：中间变量、加减法（溢出）、位运算（二进制）"><a href="#两数交换：中间变量、加减法（溢出）、位运算（二进制）" class="headerlink" title="两数交换：中间变量、加减法（溢出）、位运算（二进制）"></a>两数交换：中间变量、加减法（溢出）、位运算（二进制）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：中间变量</span><br><span class="line">int temp&#x3D;num1;</span><br><span class="line">num1&#x3D;num2;</span><br><span class="line">num2&#x3D;temp;</span><br><span class="line">System.out.println(num1);</span><br><span class="line">System.out.println(num2);</span><br><span class="line"></span><br><span class="line">方法二：加减法</span><br><span class="line">num1&#x3D;num1+num2;</span><br><span class="line">num2&#x3D;num1-num2;</span><br><span class="line">num1&#x3D;num1-num2;</span><br><span class="line">System.out.println(num1);</span><br><span class="line">System.out.println(num2);</span><br><span class="line"></span><br><span class="line">方法三：位运算</span><br><span class="line">num1&#x3D;num1^num2;</span><br><span class="line">num2&#x3D;num1^num2;</span><br><span class="line">num1&#x3D;num1^num2;</span><br><span class="line">System.out.println(num1);</span><br><span class="line">System.out.println(num2);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/2020/09/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="一、线性结构"><a href="#一、线性结构" class="headerlink" title="一、线性结构"></a>一、线性结构</h1><h2 id="1、数组"><a href="#1、数组" class="headerlink" title="1、数组"></a>1、数组</h2><h3 id="1-1、面向对象的数组"><a href="#1-1、面向对象的数组" class="headerlink" title="1.1、面向对象的数组"></a>1.1、面向对象的数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyArray &#123;</span><br><span class="line">	private int[] elements;</span><br><span class="line">	</span><br><span class="line">	public MyArray() &#123;</span><br><span class="line">		elements&#x3D;new int[0];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public int size() &#123;</span><br><span class="line">		return elements.length;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void add(int element) &#123;</span><br><span class="line">		int[] newArr&#x3D;new int[elements.length+1];</span><br><span class="line">		for(int i&#x3D;0;i&lt;elements.length;i++) &#123;</span><br><span class="line">			newArr[i]&#x3D;elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		newArr[elements.length]&#x3D;element;</span><br><span class="line">		elements&#x3D;newArr;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void show() &#123;</span><br><span class="line">		System.out.println(Arrays.toString(elements));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void delete(int index) &#123;</span><br><span class="line">		if(index&lt;0 || index&gt;elements.length-1) &#123;</span><br><span class="line">			throw new RuntimeException(&quot;下标越界&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		int[] newArr&#x3D;new int[elements.length-1];</span><br><span class="line">		for(int i&#x3D;0;i&lt;newArr.length;i++) &#123;</span><br><span class="line">			if(i&lt;index) &#123;</span><br><span class="line">				newArr[i]&#x3D;elements[i];</span><br><span class="line">			&#125;else &#123;</span><br><span class="line">				newArr[i]&#x3D;elements[i+1];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		elements&#x3D;newArr;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public int get(int index) &#123;</span><br><span class="line">		if(index&lt;0||index&gt;elements.length-1) &#123;</span><br><span class="line">			throw new RuntimeException(&quot;下标越界&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		return elements[index];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void insert(int index,int element) &#123;</span><br><span class="line">		int[] newArr&#x3D;new int[elements.length+1];</span><br><span class="line">		for(int i&#x3D;0;i&lt;index;i++) &#123;</span><br><span class="line">			newArr[i]&#x3D;elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		newArr[index]&#x3D;element;</span><br><span class="line">		for(int i&#x3D;index;i&lt;elements.length;i++) &#123;</span><br><span class="line">			newArr[i+1]&#x3D;elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		elements&#x3D;newArr;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void set(int index,int element) &#123;</span><br><span class="line">		elements[index]&#x3D;element;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line">	public int search(int target) &#123;</span><br><span class="line">		int index&#x3D;-1;</span><br><span class="line">		for(int i&#x3D;0;i&lt;elements.length;i++) &#123;</span><br><span class="line">			if(elements[i]&#x3D;&#x3D;target) &#123;</span><br><span class="line">				index&#x3D;i;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return index;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public int binarySearch(int target) &#123;</span><br><span class="line">		int begin&#x3D;0;</span><br><span class="line">		int end&#x3D;elements.length-1;</span><br><span class="line">		int middle&#x3D;(begin+end)&#x2F;2;</span><br><span class="line">		int index&#x3D;-1;</span><br><span class="line">		while(true) &#123;</span><br><span class="line">			if(elements[middle]&#x3D;&#x3D;target) &#123;</span><br><span class="line">				index&#x3D;middle;</span><br><span class="line">				break;</span><br><span class="line">			&#125;else &#123;</span><br><span class="line">				if(elements[middle]&gt;target) &#123;</span><br><span class="line">					end&#x3D;middle-1;</span><br><span class="line">				&#125;else &#123;</span><br><span class="line">					begin&#x3D;middle+1;</span><br><span class="line">				&#125;</span><br><span class="line">				middle&#x3D;(begin+end)&#x2F;2;</span><br><span class="line">			&#125;</span><br><span class="line">			if(begin&gt;end) &#123;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return index;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-2、线性查找"><a href="#1-2、线性查找" class="headerlink" title="1.2、线性查找"></a>1.2、线性查找</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Search &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		int[] arr&#x3D;new int[] &#123;1,2,3,4,5,6,7,8,9&#125;;</span><br><span class="line">		</span><br><span class="line">		int target&#x3D;5;</span><br><span class="line">		int index&#x3D;-1;</span><br><span class="line">		for(int i&#x3D;0;i&lt;arr.length;i++) &#123;</span><br><span class="line">			if(arr[i]&#x3D;&#x3D;target) &#123;</span><br><span class="line">				index&#x3D;i;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if(index&#x3D;&#x3D;-1) &#123;</span><br><span class="line">			System.out.println(&quot;no such element in arr&quot;);</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			System.out.println(&quot;success:&quot;+index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3、二分法查找（有序，注意跳出循环）"><a href="#1-3、二分法查找（有序，注意跳出循环）" class="headerlink" title="1.3、二分法查找（有序，注意跳出循环）"></a>1.3、二分法查找（有序，注意跳出循环）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BinarySearch &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		&#x2F;&#x2F;一个有顺序的数组</span><br><span class="line">		int[] arr&#x3D;new int[] &#123;1,2,3,4,5,6,7,8,9&#125;;</span><br><span class="line">		</span><br><span class="line">		int target&#x3D;5;</span><br><span class="line">		&#x2F;&#x2F;记录位置</span><br><span class="line">		int begin&#x3D;0;</span><br><span class="line">		int end&#x3D;arr.length-1;</span><br><span class="line">		int middle&#x3D;(begin+end)&#x2F;2;</span><br><span class="line">		int index&#x3D;-1;</span><br><span class="line">		while(true) &#123;</span><br><span class="line">			if(arr[middle]&#x3D;&#x3D;target) &#123;</span><br><span class="line">				index&#x3D;middle;</span><br><span class="line">				break;</span><br><span class="line">			&#125;else &#123;</span><br><span class="line">				if(arr[middle]&gt;target) &#123;</span><br><span class="line">					end&#x3D;middle-1;</span><br><span class="line">				&#125;else &#123;</span><br><span class="line">					begin&#x3D;middle+1;</span><br><span class="line">				&#125;</span><br><span class="line">				middle&#x3D;(begin+end)&#x2F;2;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if(index&#x3D;&#x3D;-1) &#123;</span><br><span class="line">			System.out.println(&quot;no such element in arr&quot;);</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			System.out.println(&quot;success:&quot;+index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-、栈（Stack）"><a href="#2-、栈（Stack）" class="headerlink" title="2 、栈（Stack）"></a>2 、栈（Stack）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyStack &#123;</span><br><span class="line">	int[] elements;</span><br><span class="line">	public MyStack() &#123;</span><br><span class="line">		elements&#x3D;new int [0];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void push(int element) &#123;</span><br><span class="line">		int[] newArr&#x3D;new int[elements.length+1];</span><br><span class="line">		for(int i&#x3D;0;i&lt;elements.length;i++) &#123;</span><br><span class="line">			newArr[i]&#x3D;elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		newArr[elements.length]&#x3D;element;</span><br><span class="line">		elements&#x3D;newArr;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public int pop() &#123;</span><br><span class="line">		if(elements.length&#x3D;&#x3D;0) &#123;</span><br><span class="line">			throw new RuntimeException(&quot;栈中无元素&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		int element&#x3D;elements[elements.length-1];</span><br><span class="line">		int[] newArr&#x3D;new int[elements.length-1];</span><br><span class="line">		for(int i&#x3D;0;i&lt;elements.length-1;i++) &#123;</span><br><span class="line">			newArr[i]&#x3D;elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		elements&#x3D;newArr;</span><br><span class="line">		return element;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public int peek() &#123;</span><br><span class="line">		return elements[elements.length-1];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public boolean isEmpty() &#123;</span><br><span class="line">		return elements.length&#x3D;&#x3D;0?true:false;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、队列（Queue）"><a href="#3、队列（Queue）" class="headerlink" title="3、队列（Queue）"></a>3、队列（Queue）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyQueue &#123;</span><br><span class="line">	int[] elements;</span><br><span class="line">	public MyQueue() &#123;</span><br><span class="line">		elements&#x3D;new int[0];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void add(int element) &#123;</span><br><span class="line">		int[] newArr&#x3D;new int[elements.length+1];</span><br><span class="line">		for(int i&#x3D;0;i&lt;elements.length;i++) &#123;</span><br><span class="line">			newArr[i]&#x3D;elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		newArr[elements.length]&#x3D;element;</span><br><span class="line">		elements&#x3D;newArr;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public int poll() &#123;</span><br><span class="line">		int element&#x3D;elements[0];</span><br><span class="line">		int[] newArr&#x3D;new int[elements.length-1];</span><br><span class="line">		for(int i&#x3D;0;i&lt;elements.length-1;i++) &#123;</span><br><span class="line">			newArr[i]&#x3D;elements[i+1];</span><br><span class="line">		&#125;</span><br><span class="line">		elements&#x3D;newArr;</span><br><span class="line">		return element;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public boolean isEmpty() &#123;</span><br><span class="line">		return elements.length&#x3D;&#x3D;0?true:false;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、单链表（追加、删除、插入：after）"><a href="#4、单链表（追加、删除、插入：after）" class="headerlink" title="4、单链表（追加、删除、插入：after）"></a>4、单链表（追加、删除、插入：after）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Node &#123;</span><br><span class="line">	int data;</span><br><span class="line">	Node next;</span><br><span class="line">	</span><br><span class="line">	public int getData() &#123;</span><br><span class="line">		return data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public Node(int data) &#123;</span><br><span class="line">		this.data&#x3D;data;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;为节点追加节点</span><br><span class="line">	 public Node append(Node node) &#123;</span><br><span class="line">		 Node currentNode&#x3D;this;</span><br><span class="line">		 while(true) &#123;</span><br><span class="line">			 Node nextNode&#x3D;currentNode.next;</span><br><span class="line">			 if(nextNode&#x3D;&#x3D;null) &#123;</span><br><span class="line">				 break;</span><br><span class="line">			 &#125;</span><br><span class="line">			 currentNode&#x3D;nextNode;</span><br><span class="line">		 &#125;</span><br><span class="line">		 currentNode.next&#x3D;node;</span><br><span class="line">		 return this;</span><br><span class="line">	 &#125; </span><br><span class="line">	 </span><br><span class="line">	 public boolean isLast() &#123;</span><br><span class="line">		 return next&#x3D;&#x3D;null;</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 public void show() &#123;</span><br><span class="line">		 Node currentNode&#x3D;this;</span><br><span class="line">		 while(true) &#123;</span><br><span class="line">			 System.out.print(currentNode.data+&quot; &quot;);</span><br><span class="line">			 currentNode&#x3D;currentNode.next;</span><br><span class="line">			 if(currentNode&#x3D;&#x3D;null) &#123;</span><br><span class="line">				 break;</span><br><span class="line">			 &#125;</span><br><span class="line">		 &#125;</span><br><span class="line">		 System.out.println();</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 &#x2F;&#x2F;删除</span><br><span class="line">	 public void remove() &#123;</span><br><span class="line">		 Node newNode&#x3D;this.next.next;</span><br><span class="line">		 this.next&#x3D;newNode;</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 &#x2F;&#x2F;插入</span><br><span class="line">	 public void after(Node node) &#123;</span><br><span class="line">		 Node nextNext&#x3D;this.next;</span><br><span class="line">		 this.next&#x3D;node;</span><br><span class="line">		 node.next&#x3D;nextNext;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、循环链表"><a href="#5、循环链表" class="headerlink" title="5、循环链表"></a>5、循环链表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LoopNode &#123;</span><br><span class="line">	int data;</span><br><span class="line">	LoopNode next&#x3D;this;</span><br><span class="line">	</span><br><span class="line">	public int getData() &#123;</span><br><span class="line">		return data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public LoopNode(int data) &#123;</span><br><span class="line">		this.data&#x3D;data;</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	 &#x2F;&#x2F;删除</span><br><span class="line">	 public void remove() &#123;</span><br><span class="line">		 LoopNode newNode&#x3D;this.next.next;</span><br><span class="line">		 this.next&#x3D;newNode;</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 &#x2F;&#x2F;插入</span><br><span class="line">	 public void after(LoopNode node) &#123;</span><br><span class="line">		 LoopNode nextNext&#x3D;this.next;</span><br><span class="line">		 this.next&#x3D;node;</span><br><span class="line">		 node.next&#x3D;nextNext;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6、双向循环链表"><a href="#6、双向循环链表" class="headerlink" title="6、双向循环链表"></a>6、双向循环链表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DoubleLoopNode &#123;</span><br><span class="line">	DoubleLoopNode pre&#x3D;this;</span><br><span class="line">	DoubleLoopNode next&#x3D;this;</span><br><span class="line">	int data;</span><br><span class="line">	public DoubleLoopNode(int data) &#123;</span><br><span class="line">		this.data&#x3D;data;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void after(DoubleLoopNode node) &#123;</span><br><span class="line">		DoubleLoopNode nextNext&#x3D;this.next;</span><br><span class="line">		this.next&#x3D;node;</span><br><span class="line">		node.pre&#x3D;this;</span><br><span class="line">		node.next&#x3D;nextNext;</span><br><span class="line">		nextNext.pre&#x3D;node;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public DoubleLoopNode next() &#123;</span><br><span class="line">		return this.next;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public DoubleLoopNode pre() &#123;</span><br><span class="line">		return this.pre;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public int getData() &#123;</span><br><span class="line">		return this.data;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7、递归：斐波那契数列和汉诺塔问题"><a href="#7、递归：斐波那契数列和汉诺塔问题" class="headerlink" title="7、递归：斐波那契数列和汉诺塔问题"></a>7、递归：斐波那契数列和汉诺塔问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Recursive &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		System.out.println(febonacci(5));</span><br><span class="line">		hanoi(3,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;Febonacci：1 1 2 3 5 8 ...</span><br><span class="line">	public static int febonacci(int i) &#123;</span><br><span class="line">		if(i&#x3D;&#x3D;1||i&#x3D;&#x3D;2) &#123;</span><br><span class="line">			return 1;</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			return febonacci(i-1)+febonacci(i-2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;汉诺塔问题：把最底下的一个盘子看成一个，它上面的所有盘子看成一个</span><br><span class="line">	public static void hanoi(int n,char from,char in,char to) &#123;</span><br><span class="line">		if(n&#x3D;&#x3D;1) &#123;</span><br><span class="line">			System.out.println(&quot;第1个盘子从&quot;+from+&quot;移到&quot;+to);</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			hanoi(n-1,from,to,in);</span><br><span class="line">			System.out.println(&quot;第&quot;+n+&quot;个盘子从&quot;+from+&quot;移到&quot;+to);</span><br><span class="line">			hanoi(n-1,in,from,to);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="二、排序算法"><a href="#二、排序算法" class="headerlink" title="二、排序算法"></a>二、排序算法</h1><h2 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h2><p>常见的时间复杂度</p>
<table>
<thead>
<tr>
<th>常数阶</th>
<th>O(1)</th>
</tr>
</thead>
<tbody><tr>
<td>对数阶</td>
<td>O(log<del>2</del>n)</td>
</tr>
<tr>
<td>线性阶</td>
<td>O(n)</td>
</tr>
<tr>
<td>线性对数阶</td>
<td>O(nlog<del>2</del>n)</td>
</tr>
<tr>
<td>平方阶</td>
<td>O(n^2^)</td>
</tr>
<tr>
<td>立方阶</td>
<td>O(n^3^)</td>
</tr>
<tr>
<td>k次方阶</td>
<td>O(n^k^)</td>
</tr>
<tr>
<td>指数阶</td>
<td>O(2^n^)</td>
</tr>
</tbody></table>
<h2 id="1、交换排序之冒泡排序"><a href="#1、交换排序之冒泡排序" class="headerlink" title="1、交换排序之冒泡排序"></a>1、交换排序之冒泡排序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BubbleSort &#123;</span><br><span class="line">	public static int[] bubblesort(int[] array) &#123;</span><br><span class="line">		if(array.length&#x3D;&#x3D;0) &#123;</span><br><span class="line">			return array;</span><br><span class="line">		&#125;</span><br><span class="line">		for(int i&#x3D;0;i&lt;array.length-1;i++) &#123;&#x2F;&#x2F;比较轮数</span><br><span class="line">			for(int j&#x3D;0;j&lt;array.length-1-i;j++) &#123;</span><br><span class="line">				if(array[j]&gt;array[j+1]) &#123;</span><br><span class="line">					int temp&#x3D;array[j];</span><br><span class="line">					array[j]&#x3D;array[j+1];</span><br><span class="line">					array[j+1]&#x3D;temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return array;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、交换排序之快速排序（递归）"><a href="#2、交换排序之快速排序（递归）" class="headerlink" title="2、交换排序之快速排序（递归）"></a>2、交换排序之快速排序（递归）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class QuickSort &#123;</span><br><span class="line">	public static int[] quickSort(int[] array,int start,int end) &#123;</span><br><span class="line">		if(start&lt;end) &#123;</span><br><span class="line">			int stard&#x3D;array[start];</span><br><span class="line">			int low&#x3D;start;</span><br><span class="line">			int high&#x3D;end;</span><br><span class="line">			while(low&lt;high) &#123;</span><br><span class="line">				while(low&lt;high&amp;&amp;stard&lt;&#x3D;array[high]) &#123;</span><br><span class="line">					high--;</span><br><span class="line">				&#125;</span><br><span class="line">				array[low]&#x3D;array[high];</span><br><span class="line">				while(low&lt;high&amp;&amp;stard&gt;&#x3D;array[low]) &#123;</span><br><span class="line">					low++;</span><br><span class="line">				&#125;</span><br><span class="line">				array[high]&#x3D;array[low];</span><br><span class="line">			&#125;</span><br><span class="line">			array[low]&#x3D;stard;</span><br><span class="line">			quickSort(array,start,low);</span><br><span class="line">			quickSort(array,low+1,end);</span><br><span class="line">		&#125;</span><br><span class="line">		return array;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、插入排序之直接插入排序"><a href="#3、插入排序之直接插入排序" class="headerlink" title="3、插入排序之直接插入排序"></a>3、插入排序之直接插入排序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class InsertSort &#123;</span><br><span class="line">	public static int[] insertSort(int[] array) &#123;</span><br><span class="line">		for(int i&#x3D;1;i&lt;array.length;i++) &#123;&#x2F;&#x2F;第一个无需遍历</span><br><span class="line">			if(array[i]&lt;array[i-1]) &#123;</span><br><span class="line">				int temp&#x3D;array[i];</span><br><span class="line">				int j;</span><br><span class="line">				&#x2F;&#x2F;遍历第i个之前的</span><br><span class="line">				for(j&#x3D;i-1;j&gt;&#x3D;0&amp;&amp;temp&lt;array[j];j--) &#123;</span><br><span class="line">					array[j+1]&#x3D;array[j];</span><br><span class="line">				&#125;</span><br><span class="line">				array[j+1]&#x3D;temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return array;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4、插入排序之希尔排序"><a href="#4、插入排序之希尔排序" class="headerlink" title="4、插入排序之希尔排序"></a>4、插入排序之希尔排序</h2><p>加入步长（不断除以2）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ShellSort &#123;</span><br><span class="line">	public static int[] shellSort(int[] array) &#123;</span><br><span class="line">		&#x2F;&#x2F;遍历所有步长</span><br><span class="line">		for(int d&#x3D;array.length&#x2F;2;d&gt;0;d&#x2F;&#x3D;2) &#123;</span><br><span class="line">			&#x2F;&#x2F;遍历所有元素</span><br><span class="line">			for(int i&#x3D;d;i&lt;array.length;i++)&#123;</span><br><span class="line">				&#x2F;&#x2F;遍历本组元素</span><br><span class="line">				for(int j&#x3D;i-d;j&gt;&#x3D;0;j-&#x3D;d) &#123;</span><br><span class="line">					if(array[j]&gt;array[j+d]) &#123;</span><br><span class="line">						int temp&#x3D;array[j];</span><br><span class="line">						array[j]&#x3D;array[j+d];</span><br><span class="line">						array[j+d]&#x3D;temp;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return array;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、选择排序之简单选择排序"><a href="#5、选择排序之简单选择排序" class="headerlink" title="5、选择排序之简单选择排序"></a>5、选择排序之简单选择排序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SelectSort &#123;</span><br><span class="line">	public static int[] selectSort(int[] array) &#123;</span><br><span class="line">		for(int i&#x3D;0;i&lt;array.length;i++) &#123;</span><br><span class="line">			for(int j&#x3D;i+1;j&lt;array.length;j++) &#123;</span><br><span class="line">				if(array[i]&gt;array[j]) &#123;</span><br><span class="line">					int temp&#x3D;array[i];</span><br><span class="line">					array[i]&#x3D;array[j];</span><br><span class="line">					array[j]&#x3D;temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return array;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、选择排序之堆排序（顺序存储的二叉树）（升序：大顶堆）"><a href="#6、选择排序之堆排序（顺序存储的二叉树）（升序：大顶堆）" class="headerlink" title="6、选择排序之堆排序（顺序存储的二叉树）（升序：大顶堆）"></a>6、选择排序之堆排序（顺序存储的二叉树）（升序：大顶堆）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class HeapSort &#123;</span><br><span class="line">	public static void heapSort(int[] array) &#123;</span><br><span class="line">		int index&#x3D;(array.length-1)&#x2F;2;</span><br><span class="line">		for(int i&#x3D;index;i&gt;&#x3D;0;i--) &#123;</span><br><span class="line">			maxHeap(array,array.length,i);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		for(int i&#x3D;array.length-2;i&gt;&#x3D;0;i--) &#123;</span><br><span class="line">			int temp&#x3D;array[0];</span><br><span class="line">			array[0]&#x3D;array[i+1];</span><br><span class="line">			array[i+1]&#x3D;temp;</span><br><span class="line">			maxHeap(array,i,0);&#x2F;&#x2F;从0开始以下的子树都为大顶堆</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	public static void maxHeap(int[] array,int size,int index) &#123;</span><br><span class="line">		int leftNode&#x3D;2*index+1;</span><br><span class="line">		int rightNode&#x3D;2*index+2;</span><br><span class="line">		</span><br><span class="line">		int max&#x3D;index;</span><br><span class="line">		if(leftNode&lt;size&amp;&amp;array[leftNode]&gt;array[max]) &#123;</span><br><span class="line">			max&#x3D;leftNode;</span><br><span class="line">		&#125;</span><br><span class="line">		if(rightNode&lt;size&amp;&amp;array[rightNode]&gt;array[max]) &#123;</span><br><span class="line">			max&#x3D;rightNode;</span><br><span class="line">		&#125;</span><br><span class="line">		if(max!&#x3D;index) &#123;</span><br><span class="line">			int temp&#x3D;array[index];</span><br><span class="line">			array[index]&#x3D;array[max];</span><br><span class="line">			array[max]&#x3D;temp;</span><br><span class="line">			maxHeap(array,size,max);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7、归并排序（两个有序的序列、递归）"><a href="#7、归并排序（两个有序的序列、递归）" class="headerlink" title="7、归并排序（两个有序的序列、递归）"></a>7、归并排序（两个有序的序列、递归）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MergeSort &#123;</span><br><span class="line">	public static void mergeSort(int[] array,int start,int end) &#123;</span><br><span class="line">		int middle&#x3D; (start+end)&#x2F;2;</span><br><span class="line">		if(start&lt;end) &#123;</span><br><span class="line">			mergeSort(array,start,middle);</span><br><span class="line">			mergeSort(array,middle+1,end);</span><br><span class="line">			merge(array,start,middle,end);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	public static void merge(int[] array,int start,int middle,int end) &#123;</span><br><span class="line">		int[] temp&#x3D;new int[end-start+1];</span><br><span class="line">		int i&#x3D;start;</span><br><span class="line">		int j&#x3D;middle+1;</span><br><span class="line">		int index&#x3D;0;</span><br><span class="line">		while(i&lt;&#x3D;middle&amp;&amp;j&lt;&#x3D;end) &#123;</span><br><span class="line">			if(array[i]&lt;&#x3D;array[j]) &#123;</span><br><span class="line">				temp[index]&#x3D;array[i];</span><br><span class="line">				i++;</span><br><span class="line">			&#125;else &#123;</span><br><span class="line">				temp[index]&#x3D;array[j];</span><br><span class="line">				j++;</span><br><span class="line">			&#125;</span><br><span class="line">			index++;</span><br><span class="line">		&#125;</span><br><span class="line">		while(i&lt;&#x3D;middle) &#123;</span><br><span class="line">			temp[index]&#x3D;array[i];</span><br><span class="line">			i++;</span><br><span class="line">			index++;</span><br><span class="line">		&#125;</span><br><span class="line">		while(j&lt;&#x3D;end) &#123;</span><br><span class="line">			temp[index]&#x3D;array[j];</span><br><span class="line">			j++;</span><br><span class="line">			index++;</span><br><span class="line">		&#125;</span><br><span class="line">		for(int k&#x3D;0;k&lt;temp.length;k++) &#123;</span><br><span class="line">			array[k+start]&#x3D;temp[k];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="8、基数排序（个位、十位、百位……放；从0-9的桶中先放先取）"><a href="#8、基数排序（个位、十位、百位……放；从0-9的桶中先放先取）" class="headerlink" title="8、基数排序（个位、十位、百位……放；从0~9的桶中先放先取）"></a>8、基数排序（个位、十位、百位……放；从0~9的桶中先放先取）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class RadixSortByQueue &#123;</span><br><span class="line">	public static void radixSort(int[] array) &#123;</span><br><span class="line">		&#x2F;&#x2F;找最大值</span><br><span class="line">		int maxNum&#x3D;array[0];</span><br><span class="line">		for(int i&#x3D;0;i&lt;array.length;i++) &#123;</span><br><span class="line">			if(array[i]&gt;maxNum) &#123;</span><br><span class="line">				maxNum&#x3D;array[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(maxNum);</span><br><span class="line">		&#x2F;&#x2F;计算位数</span><br><span class="line">		int maxNumLength&#x3D;(maxNum+&quot;&quot;).length();</span><br><span class="line">		System.out.println(maxNumLength);</span><br><span class="line">		&#x2F;&#x2F;桶数据</span><br><span class="line">		int[][] temp&#x3D;new int[10][array.length];</span><br><span class="line">		&#x2F;&#x2F;每个桶数据个数</span><br><span class="line">		int[] counts&#x3D;new int[10];</span><br><span class="line">		&#x2F;&#x2F;根据位数循环排序次数</span><br><span class="line">		for(int i&#x3D;0,n&#x3D;1;i&lt;maxNumLength;i++,n*&#x3D;10) &#123;</span><br><span class="line">			&#x2F;&#x2F;放</span><br><span class="line">			for(int j&#x3D;0;j&lt;array.length;j++) &#123;</span><br><span class="line">				int remainder &#x3D;array[j]&#x2F;n%10;</span><br><span class="line">				temp[remainder][counts[remainder]]&#x3D;array[j];</span><br><span class="line">				counts[remainder]++;</span><br><span class="line">			&#125;</span><br><span class="line">&#x2F;&#x2F;			if(i&#x3D;&#x3D;0) &#123;</span><br><span class="line">&#x2F;&#x2F;				for(int[] num:temp) &#123;</span><br><span class="line">&#x2F;&#x2F;					System.out.println(Arrays.toString(num));</span><br><span class="line">&#x2F;&#x2F;				&#125;</span><br><span class="line">&#x2F;&#x2F;			&#125;</span><br><span class="line">			&#x2F;&#x2F;取</span><br><span class="line">			int index&#x3D;0;</span><br><span class="line">			for(int k&#x3D;0;k&lt;counts.length;k++) &#123;</span><br><span class="line">				if(counts[k]!&#x3D;0) &#123;</span><br><span class="line">					for(int l&#x3D;0;l&lt;counts[k];l++) &#123;</span><br><span class="line">						array[index]&#x3D;temp[k][l];</span><br><span class="line">						index++;</span><br><span class="line">					&#125;</span><br><span class="line">					&#x2F;&#x2F;重置每个桶个数为零</span><br><span class="line">					counts[k]&#x3D;0;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、树结构"><a href="#三、树结构" class="headerlink" title="三、树结构"></a>三、树结构</h1><h2 id="1、二叉树"><a href="#1、二叉树" class="headerlink" title="1、二叉树"></a>1、二叉树</h2><p>1.1、二叉树</p>
<blockquote>
<p>任何一个节点的子节点数量不超过2；</p>
<p>二叉树分为左右节点，不能随意颠倒；</p>
</blockquote>
<p>1.2、满二叉树：</p>
<blockquote>
<p>所有叶子节点都在最后一层；</p>
<p>节点总数为：2^n^-1（n为树的高度）</p>
</blockquote>
<p>1.3、完全二叉树：（<code>按照顺序可以连续数完所有节点</code>）</p>
<blockquote>
<p>所有叶子节点都在最后一层；</p>
<p>最后一层的叶子节点在左边连续，倒数第二层的叶子节点右边连续</p>
</blockquote>
<p>1.4、空树、左斜数、右斜数</p>
<p>1.5、创建二叉树：<code>树——节点——把节点加入树</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BinaryTree &#123;</span><br><span class="line">	TreeNode root;</span><br><span class="line">	public void setRoot(TreeNode root) &#123;</span><br><span class="line">		this.root &#x3D; root;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public TreeNode getRoot() &#123;</span><br><span class="line">		return root;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TreeNode &#123;</span><br><span class="line">	int value;</span><br><span class="line">	</span><br><span class="line">	TreeNode lNode;</span><br><span class="line">	TreeNode rNode;</span><br><span class="line">	</span><br><span class="line">	public TreeNode(int value) &#123;</span><br><span class="line">		this.value&#x3D;value;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void setLNode(TreeNode lNode) &#123;</span><br><span class="line">		this.lNode&#x3D;lNode;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setRNode(TreeNode rNode) &#123;</span><br><span class="line">		this.rNode&#x3D;rNode;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ublic class Test &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		BinaryTree b&#x3D;new BinaryTree();</span><br><span class="line">		TreeNode root&#x3D;new TreeNode(1);</span><br><span class="line">		b.setRoot(root);</span><br><span class="line">		</span><br><span class="line">		TreeNode rootLeft&#x3D;new TreeNode(2);</span><br><span class="line">		TreeNode rootRight&#x3D;new TreeNode(3);</span><br><span class="line">		root.setLNode(rootLeft);</span><br><span class="line">		root.setRNode(rootRight);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.6、二叉树的遍历（前序、中序、后序）（相对于根节点）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TreeNode &#123;</span><br><span class="line">……</span><br><span class="line">	&#x2F;&#x2F;前序遍历</span><br><span class="line">	public void frontShow() &#123;</span><br><span class="line">		&#x2F;&#x2F;先遍历当前节点</span><br><span class="line">		System.out.println(value);</span><br><span class="line">		if(lNode!&#x3D;null) &#123;</span><br><span class="line">			lNode.frontShow();</span><br><span class="line">		&#125;</span><br><span class="line">		if(rNode!&#x3D;null) &#123;</span><br><span class="line">			rNode.frontShow();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;中序遍历</span><br><span class="line">	public void middleShow() &#123;</span><br><span class="line">		if(lNode!&#x3D;null) &#123;</span><br><span class="line">			lNode.middleShow();</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;遍历当前节点</span><br><span class="line">		System.out.println(value);</span><br><span class="line">		if(rNode!&#x3D;null) &#123;</span><br><span class="line">			rNode.middleShow();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;后序遍历</span><br><span class="line">	public void afterShow() &#123;</span><br><span class="line">		if(lNode!&#x3D;null) &#123;</span><br><span class="line">			lNode.afterShow();</span><br><span class="line">		&#125;</span><br><span class="line">		if(rNode!&#x3D;null) &#123;</span><br><span class="line">			rNode.afterShow();</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;遍历当前节点</span><br><span class="line">		System.out.println(value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BinaryTree &#123;</span><br><span class="line">……</span><br><span class="line">	public void frontShow() &#123;</span><br><span class="line">		root.frontShow();</span><br><span class="line">	&#125;</span><br><span class="line">	public void middleShow() &#123;</span><br><span class="line">		root.middleShow();</span><br><span class="line">	&#125;</span><br><span class="line">	public void afterShow() &#123;</span><br><span class="line">		root.afterShow();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		BinaryTree b&#x3D;new BinaryTree();</span><br><span class="line">		TreeNode root&#x3D;new TreeNode(1);</span><br><span class="line">		b.setRoot(root);</span><br><span class="line">		</span><br><span class="line">		TreeNode rootLeft&#x3D;new TreeNode(2);</span><br><span class="line">		TreeNode rootRight&#x3D;new TreeNode(3);</span><br><span class="line">		root.setLNode(rootLeft);</span><br><span class="line">		root.setRNode(rootRight);</span><br><span class="line">		</span><br><span class="line">		rootLeft.setLNode(new TreeNode(4));</span><br><span class="line">		rootLeft.setRNode(new TreeNode(5));</span><br><span class="line">		</span><br><span class="line">		b.frontShow();</span><br><span class="line">		b.middleShow();</span><br><span class="line">		b.afterShow();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.7、二叉树查找（前序查找、中序查找、后序查找）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TreeNode &#123;</span><br><span class="line">……</span><br><span class="line">	&#x2F;&#x2F;前序查找</span><br><span class="line">	public TreeNode frontSearch(int value) &#123;</span><br><span class="line">		&#x2F;&#x2F;</span><br><span class="line">		TreeNode target&#x3D;null;</span><br><span class="line">		if(this.value&#x3D;&#x3D;value) &#123;</span><br><span class="line">			return this;</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			if(lNode!&#x3D;null) &#123;</span><br><span class="line">				target&#x3D;lNode.frontSearch(value);</span><br><span class="line">			&#125;</span><br><span class="line">			if(target!&#x3D;null) &#123;</span><br><span class="line">				return target;</span><br><span class="line">			&#125;</span><br><span class="line">			if(rNode!&#x3D;null) &#123;</span><br><span class="line">				target&#x3D;rNode.frontSearch(value);</span><br><span class="line">			&#125;</span><br><span class="line">			return target;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.8、节点删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;删除节点</span><br><span class="line">	public void delete(int i) &#123;</span><br><span class="line">		TreeNode parent&#x3D;this;</span><br><span class="line">		if(parent.lNode!&#x3D;null&amp;&amp;parent.lNode.value&#x3D;&#x3D;i) &#123;</span><br><span class="line">			parent.lNode&#x3D;null;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">		if(parent.rNode!&#x3D;null&amp;&amp;parent.rNode.value&#x3D;&#x3D;i) &#123;</span><br><span class="line">			parent.rNode&#x3D;null;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">		parent&#x3D;lNode;</span><br><span class="line">		if(parent!&#x3D;null) &#123;</span><br><span class="line">			parent.delete(i);</span><br><span class="line">		&#125;</span><br><span class="line">		parent&#x3D;rNode;</span><br><span class="line">		if(parent!&#x3D;null) &#123;</span><br><span class="line">			parent.delete(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BinaryTree &#123;</span><br><span class="line">	……</span><br><span class="line">	public void delete(int i) &#123;</span><br><span class="line">		if(root.value&#x3D;&#x3D;i) &#123;</span><br><span class="line">			root&#x3D;null;</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			root.delete(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.9、顺序存储的二叉树的遍历（完全二叉树）</p>
<blockquote>
<p>①完全二叉树</p>
<p>②第n个元素（根节点为第0个）的左子节点：2^n^+1</p>
<p>③第n个元素（根节点为第0个）的左子节点：2^n^+2</p>
<p>④第n个元素的父节点：（n-1）/2</p>
</blockquote>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200906113842.png" style="zoom:50%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ArrayBinaryTree &#123;</span><br><span class="line">	int[] data;</span><br><span class="line">	public ArrayBinaryTree(int[] data) &#123;</span><br><span class="line">		this.data&#x3D;data;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;前序遍历</span><br><span class="line">	public void frontShow(int index) &#123;</span><br><span class="line">		if(data&#x3D;&#x3D;null) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(data[index]);</span><br><span class="line">		if(2*index+1&lt;data.length) &#123;</span><br><span class="line">			frontShow(2*index+1);</span><br><span class="line">		&#125;</span><br><span class="line">		if(2*index+2&lt;data.length) &#123;</span><br><span class="line">			frontShow(2*index+2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void frontShow() &#123;</span><br><span class="line">		frontShow(0);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、线索二叉树（改变叶子节点的指向）（分前序线索、中序线索、后序线索二叉树）"><a href="#2、线索二叉树（改变叶子节点的指向）（分前序线索、中序线索、后序线索二叉树）" class="headerlink" title="2、线索二叉树（改变叶子节点的指向）（分前序线索、中序线索、后序线索二叉树）"></a>2、线索二叉树（改变叶子节点的指向）（分前序线索、中序线索、后序线索二叉树）</h2><p>2.1、分前序线索、中序线索、后序线索二叉树</p>
<blockquote>
<p>前驱节点：线索化二叉树时，一个节点的前一个节点</p>
<p>后继节点：线索化二叉树时，一个节点的后一个节点</p>
</blockquote>
<p>2.2、实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ThreadedTree &#123;</span><br><span class="line">	ThreadedNode root;</span><br><span class="line">	ThreadedNode pre&#x3D;null;</span><br><span class="line">	</span><br><span class="line">	public void threadedNode(ThreadedNode node) &#123;</span><br><span class="line">		if(node&#x3D;&#x3D;null) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		threadedNode(node.lNode);</span><br><span class="line">		if(node.lNode&#x3D;&#x3D;null) &#123;</span><br><span class="line">			node.lNode&#x3D;pre;</span><br><span class="line">			node.leftType&#x3D;1;</span><br><span class="line">		&#125;</span><br><span class="line">		if(pre!&#x3D;null&amp;&amp;pre.rNode&#x3D;&#x3D;null) &#123;</span><br><span class="line">			pre.rNode&#x3D;node;</span><br><span class="line">			pre.rightType&#x3D;1;</span><br><span class="line">		&#125;</span><br><span class="line">		pre&#x3D;node;</span><br><span class="line">		threadedNode(node.rNode);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	public void threadedNode() &#123;</span><br><span class="line">		threadedNode(root);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;遍历线索二叉树</span><br><span class="line">	public void ThreadIterator()&#123;</span><br><span class="line">		ThreadedNode node&#x3D;root;</span><br><span class="line">		while(node!&#x3D;null) &#123;</span><br><span class="line">			while(node.leftType&#x3D;&#x3D;0) &#123;</span><br><span class="line">				node&#x3D;node.lNode;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(node.value);</span><br><span class="line">			while(node.rightType&#x3D;&#x3D;1) &#123;</span><br><span class="line">				node&#x3D;node.rNode;</span><br><span class="line">				System.out.println(node.value);</span><br><span class="line">			&#125;</span><br><span class="line">			node&#x3D;node.rNode;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3、赫夫曼数（最优二叉树）"><a href="#3、赫夫曼数（最优二叉树）" class="headerlink" title="3、赫夫曼数（最优二叉树）"></a>3、赫夫曼数（最优二叉树）</h2><p>3.1、最优二叉树：它是n个带权叶子结点构成的所有二叉树中，带权路径长度最小的二叉树。</p>
<blockquote>
<p> 树的带权路径长度WPL(weighted path length)：树中所有叶子结点的带权路径长度之和。</p>
<p>权值越大的结点离根结点越近的二叉树才是最优二叉树。</p>
</blockquote>
<p>3.2、创建赫夫曼树（排序——）</p>
<p>取出根节点权值最小的两颗二叉树</p>
<h2 id="4、二叉排序（查找）树：BST"><a href="#4、二叉排序（查找）树：BST" class="headerlink" title="4、二叉排序（查找）树：BST"></a>4、二叉排序（查找）树：BST</h2><p>4.1、对于任何一个非叶子节点，要求左子节点比当前节点值小，右子节点比当前节点值大</p>
<p>4.2、创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Node &#123;</span><br><span class="line">	int value;</span><br><span class="line">	Node left;</span><br><span class="line">	Node right;</span><br><span class="line">	</span><br><span class="line">	public Node(int value) &#123;</span><br><span class="line">		this.value&#x3D;value;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void add(Node node) &#123;</span><br><span class="line">		if(node&#x3D;&#x3D;null) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">		if(node.value&lt;this.value) &#123;</span><br><span class="line">			if(this.left&#x3D;&#x3D;null) &#123;</span><br><span class="line">				this.left&#x3D;node;</span><br><span class="line">			&#125;else &#123;</span><br><span class="line">				this.left.add(node);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			if(this.right&#x3D;&#x3D;null) &#123;</span><br><span class="line">				this.right&#x3D;node;</span><br><span class="line">			&#125;else &#123;</span><br><span class="line">				this.right.add(node);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;中序遍历</span><br><span class="line">	public void middleShow() &#123;</span><br><span class="line">		if(left!&#x3D;null) &#123;</span><br><span class="line">			left.middleShow();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(value);</span><br><span class="line">		if(right!&#x3D;null) &#123;</span><br><span class="line">			right.middleShow();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BinarySortTree &#123;</span><br><span class="line">	Node root;</span><br><span class="line">	</span><br><span class="line">	public void add(Node node) &#123;</span><br><span class="line">		if(root&#x3D;&#x3D;null) &#123;</span><br><span class="line">			root&#x3D;node;</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			root.add(node);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void middleShow() &#123;</span><br><span class="line">		if(root!&#x3D;null) &#123;</span><br><span class="line">			root.middleShow();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	int[] array&#x3D;new int[] &#123;5,9,12,45,3,7,10,16&#125;;</span><br><span class="line">	BinarySortTree b&#x3D;new BinarySortTree();</span><br><span class="line">	for(int i:array) &#123;</span><br><span class="line">		b.add(new Node(i));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	b.middleShow();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.3、查找</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查找</span><br><span class="line">public Node search(int value) &#123;</span><br><span class="line">	if(this.value&#x3D;&#x3D;value) &#123;</span><br><span class="line">		return this;</span><br><span class="line">	&#125;else if(value&lt;this.value) &#123;</span><br><span class="line">		if(left&#x3D;&#x3D;null) &#123;</span><br><span class="line">			return null;</span><br><span class="line">		&#125;</span><br><span class="line">			return this.left.search(value);</span><br><span class="line">	&#125;else &#123;</span><br><span class="line">		if(right&#x3D;&#x3D;null) &#123;</span><br><span class="line">			return null;</span><br><span class="line">		&#125;</span><br><span class="line">		return this.right.search(value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.4、删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void delete(int value) &#123;</span><br><span class="line">		if(root&#x3D;&#x3D;null) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			Node target&#x3D;search(value);</span><br><span class="line">			if(target&#x3D;&#x3D;null) &#123;</span><br><span class="line">				return;</span><br><span class="line">			&#125;</span><br><span class="line">			Node parent&#x3D;searchParent(value);</span><br><span class="line">			if(target.left&#x3D;&#x3D;null&amp;&amp;target.right&#x3D;&#x3D;null) &#123;</span><br><span class="line">				if(parent.left.value&#x3D;&#x3D;value) &#123;</span><br><span class="line">					parent.left&#x3D;null;</span><br><span class="line">				&#125;else &#123;</span><br><span class="line">					parent.right&#x3D;null;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;else if(target.left!&#x3D;null&amp;&amp;target.right!&#x3D;null) &#123;</span><br><span class="line">				int min&#x3D;deleteMin(target.right);</span><br><span class="line">				target.value &#x3D;min;</span><br><span class="line">			&#125;else &#123;</span><br><span class="line">				if(target.left!&#x3D;null) &#123;</span><br><span class="line">					if(parent.left.value&#x3D;&#x3D;value) &#123;</span><br><span class="line">						parent.left&#x3D;target.left;</span><br><span class="line">					&#125;else &#123;</span><br><span class="line">						parent.right&#x3D;target.left;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;else &#123;</span><br><span class="line">					if(parent.left.value&#x3D;&#x3D;value) &#123;</span><br><span class="line">						parent.left&#x3D;target.right;</span><br><span class="line">					&#125;else &#123;</span><br><span class="line">						parent.right&#x3D;target.right;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;删除最小节点</span><br><span class="line">	public int deleteMin(Node node) &#123;</span><br><span class="line">		Node target &#x3D;node;</span><br><span class="line">		while(target.left!&#x3D;null) &#123;</span><br><span class="line">			target&#x3D;target.left;</span><br><span class="line">		&#125;</span><br><span class="line">		delete(target.value);</span><br><span class="line">		return target.value;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public Node searchParent(int value) &#123;</span><br><span class="line">		if(root&#x3D;&#x3D;null) &#123;</span><br><span class="line">			return null;</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			return root.srarchParent(value);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Node &#123;</span><br><span class="line">	int value;</span><br><span class="line">	Node left;</span><br><span class="line">	Node right;</span><br><span class="line">	</span><br><span class="line">	public Node(int value) &#123;</span><br><span class="line">		this.value&#x3D;value;</span><br><span class="line">	&#125;</span><br><span class="line">……</span><br><span class="line">	&#x2F;&#x2F;搜索父节点</span><br><span class="line">	public Node srarchParent(int value) &#123;</span><br><span class="line">		if((this.left!&#x3D;null&amp;&amp;this.left.value&#x3D;&#x3D;value)||(this.right!&#x3D;null&amp;&amp;this.right.value&#x3D;&#x3D;value)) &#123;</span><br><span class="line">			return this;</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			if(this.value&gt;value&amp;&amp;this.left!&#x3D;null) &#123;</span><br><span class="line">				return this.left.srarchParent(value);</span><br><span class="line">			&#125;else if(this.right!&#x3D;null&amp;&amp;this.value&lt;value) &#123;</span><br><span class="line">				return this.right.srarchParent(value);</span><br><span class="line">			&#125;else &#123;</span><br><span class="line">				return null;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>23种设计模式</title>
    <url>/2020/09/03/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、创建型模式（五种）"><a href="#一、创建型模式（五种）" class="headerlink" title="一、创建型模式（五种）"></a>一、创建型模式（五种）</h1><h2 id="1、用于创建对象，包括单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式共五种。"><a href="#1、用于创建对象，包括单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式共五种。" class="headerlink" title="1、用于创建对象，包括单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式共五种。"></a>1、用于创建对象，包括单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式共五种。</h2><a id="more"></a>

<h2 id="2、单例模式"><a href="#2、单例模式" class="headerlink" title="2、单例模式"></a>2、单例模式</h2><p>2.1、保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。</p>
<p>2.2、优点</p>
<p>①由于单例模式只生成一个实例，可以减少系统性能开销，因此可以用于当一个对象实例时需要比较多的资源的情况，比如配置的读取、产生其他依赖对象，让其产生一个单例存储在内存中</p>
<p>②单例模式还可以提供一个全局的访问点，可以优化公共资源的访问</p>
<p>2.3、单例模式的实现方式</p>
<p>①饿汉式（线程安全、调用效率高、不能延时加载）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Singleton1 &#123;</span><br><span class="line">	private static Singleton1 instance &#x3D; new Singleton1();</span><br><span class="line">	</span><br><span class="line">	private Singleton1() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	public static Singleton1 getInstance() &#123;</span><br><span class="line">		return instance;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>线程安全：static关键字在类初始化时立即加载，不涉及多线程对象访问该对象的问题，天然线程安全</p>
<p>调用效率高：没用同步方法（sychronized）</p>
<p>不能延时加载：在类初始化时立即加载</p>
<p>劣势：如果只是加载该类，不调用getInstance()，会造成资源浪费</p>
</blockquote>
<p>②懒汉式（线程安全、调用效率不高、能延时加载）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Singleton2 &#123;</span><br><span class="line">	private static Singleton2 instance;</span><br><span class="line">	public Singleton2() &#123;&#125;</span><br><span class="line">	</span><br><span class="line">	public static synchronized Singleton2 getInstance &#123;</span><br><span class="line">		if(instance&#x3D;&#x3D;null) &#123;</span><br><span class="line">			instance &#x3D; new Singleton2();</span><br><span class="line">		&#125;</span><br><span class="line">		return instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>线程安全：static关键字在类初始化时立即加载，不涉及多线程对象访问该对象的问题，天然线程安全</p>
<p>调用效率不高：同步方法（synchronized）</p>
<p>可以延时加载（lazy load）：真正用时加载，资源利用率高</p>
<p>劣势：同步方法（synchronized）导致了并发效率较低</p>
</blockquote>
<p>③双重检测锁式（doublecheck）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Singleton3 &#123;</span><br><span class="line">	private static Singleton3 instance &#x3D; null;</span><br><span class="line">	public Singleton3() &#123;&#125;</span><br><span class="line">	</span><br><span class="line">	public static Singleton3 getInstance() &#123;</span><br><span class="line">		if(instance&#x3D;&#x3D;null) &#123;</span><br><span class="line">			Singleton3 s;</span><br><span class="line">			synchronized(Singleton3.class) &#123;</span><br><span class="line">				s&#x3D;instance;</span><br><span class="line">				if(s&#x3D;&#x3D;null) &#123;</span><br><span class="line">					synchronized(Singleton3.class) &#123;</span><br><span class="line">						if(s&#x3D;&#x3D;null) &#123;</span><br><span class="line">							s&#x3D;new Singleton3();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					instance&#x3D;s;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>把同步块放在了if下面进行判断，只有第一次才进行同步，与饿汉式相比减少了不必要的资源浪费，与懒汉式相比提高了执行效率</p>
</blockquote>
<p>④静态内部式（线程安全、调用效率高、能延时加载）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Singleton4 &#123;</span><br><span class="line">	&#x2F;&#x2F;静态内部类</span><br><span class="line">	private static class SingletonInstance&#123;</span><br><span class="line">		private static final Singleton4 instance &#x3D; new Singleton4();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	private Singleton4() &#123;&#125;</span><br><span class="line">	</span><br><span class="line">	public static Singleton4 getInstance() &#123;</span><br><span class="line">		return SingletonInstance.instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>只有在真正调用getInstance()方法时才会加载静态内部类</p>
<p>static final类型的instance在内存中只有一个，且只能被赋值一次，保证了线程安全</p>
<p>兼备了高效并发和延迟加载</p>
</blockquote>
<p>⑤枚举式（线程安全、调用效率高、不能延时加载）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum Singleton5 &#123;</span><br><span class="line">	INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>枚举本身就是单例模式，由JVM从根本上提供保证。避免了通过反射和反序列化的漏洞</p>
<p>劣势：无延迟加载</p>
</blockquote>
<p>2.4、通过反射和反序列化可以破解上面呢几种单例实现方式（除枚举外）</p>
<p>①破解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SingletonBreak &#123;</span><br><span class="line">	public static void main(String[] args) throws Exception &#123;</span><br><span class="line">		Singleton2 s2&#x3D;new Singleton2().getSingletin2();</span><br><span class="line">		Singleton2 s3&#x3D;new Singleton2().getSingletin2();</span><br><span class="line">		System.out.println(s2);</span><br><span class="line">		System.out.println(s3);</span><br><span class="line">		System.out.println(s2&#x3D;&#x3D;s3);</span><br><span class="line">		</span><br><span class="line">		&#x2F;&#x2F;通过反射调用私有构造器</span><br><span class="line">		Class&lt;Singleton2&gt; clazz&#x3D;(Class&lt;Singleton2&gt;)Class.forName(&quot;cn.nap.single.Singleton2&quot;);</span><br><span class="line">		Constructor&lt;Singleton2&gt; c&#x3D; clazz.getDeclaredConstructor(null);</span><br><span class="line">		</span><br><span class="line">		Singleton2 s&#x3D;c.newInstance();</span><br><span class="line">		Singleton2 s1&#x3D;c.newInstance();</span><br><span class="line">		System.out.println(s);</span><br><span class="line">		System.out.println(s1);</span><br><span class="line">		System.out.println(s&#x3D;&#x3D;s1);</span><br><span class="line">		</span><br><span class="line">		&#x2F;&#x2F;通过反序列化方式构造多个对象</span><br><span class="line">		FileOutputStream fos&#x3D;new FileOutputStream(&quot;d:&#x2F;a.txt&quot;);</span><br><span class="line">		ObjectOutputStream oos&#x3D;new ObjectOutputStream(fos);</span><br><span class="line">		oos.writeObject(s2);</span><br><span class="line">		oos.close();</span><br><span class="line">		fos.close();</span><br><span class="line">		</span><br><span class="line">		ObjectInputStream ois&#x3D;new ObjectInputStream(new FileInputStream(&quot;d:&#x2F;a.txt&quot;));</span><br><span class="line">		Singleton2 s4&#x3D;(Singleton2) ois.readObject();</span><br><span class="line">		System.out.println(s2);</span><br><span class="line">		System.out.println(s4);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②防止破解方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Singleton2 implements Serializable&#123;</span><br><span class="line">	private static Singleton2 instance;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;禁止反射破解</span><br><span class="line">	public Singleton2() &#123;</span><br><span class="line">		if(instance!&#x3D;null) &#123;</span><br><span class="line">			throw new RuntimeException();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static synchronized Singleton2 getSingletin2() &#123;</span><br><span class="line">		if(instance&#x3D;&#x3D;null) &#123;</span><br><span class="line">			instance &#x3D; new Singleton2();</span><br><span class="line">		&#125;</span><br><span class="line">		return instance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;禁止反序列化破解单例,在反序列时如果有该方法，会自动调用，则不需要单独创建对象</span><br><span class="line">	private Object readResolve() throws ObjectStreamException&#123;</span><br><span class="line">		return instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.5、效率测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SingletonTest &#123;</span><br><span class="line">	public static void main(String[] args) throws Exception &#123;</span><br><span class="line">		long start&#x3D;System.currentTimeMillis();</span><br><span class="line">		int threadNum&#x3D;1000;</span><br><span class="line">		CountDownLatch c&#x3D;new CountDownLatch(threadNum);</span><br><span class="line">		for(int i&#x3D;0;i&lt;threadNum;i++) &#123;</span><br><span class="line">			new Thread(new Runnable() &#123;</span><br><span class="line">				@Override</span><br><span class="line">				public void run() &#123;</span><br><span class="line">					for(int i&#x3D;0;i&lt;10000;i++) &#123;</span><br><span class="line">						Object o&#x3D;Singleton1.getInstance();</span><br><span class="line">&#x2F;&#x2F;						Object o&#x3D;Singleton2.getInstance();</span><br><span class="line">&#x2F;&#x2F;						Object o&#x3D;Singleton3.getInstance();</span><br><span class="line">&#x2F;&#x2F;						Object o&#x3D;Singleton4.getInstance();</span><br><span class="line">&#x2F;&#x2F;						Object o&#x3D;Singleton5.INSTANCE;</span><br><span class="line">					&#125;</span><br><span class="line">					c.countDown();&#x2F;&#x2F;线程减一</span><br><span class="line">				&#125;		</span><br><span class="line">			&#125;</span><br><span class="line">					).start();</span><br><span class="line">		&#125;</span><br><span class="line">		c.await();&#x2F;&#x2F;main线程阻塞</span><br><span class="line">		long end&#x3D;System.currentTimeMillis();</span><br><span class="line">		System.out.println(end-start);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.6、常见应用场景：</p>
<p>①Window的任务管理器、回收站、文件系统</p>
<p>②项目中读取配置文件的类，一般只有一个对象</p>
<p>③网站的计数器采用单例，否则难以同步</p>
<p>④应用程序的日志</p>
<p>⑤Application（servlet）</p>
<p>⑥Spring中每个bean，可以进行管理</p>
<p>⑦在servlet中，每个Servlet是单例</p>
<p>⑧SpringMVC中，控制器对象</p>
<p>⑨数据库连接池的设计采用单例</p>
<h2 id="3、工厂模式（实现了创建者和调用者是分离）"><a href="#3、工厂模式（实现了创建者和调用者是分离）" class="headerlink" title="3、工厂模式（实现了创建者和调用者是分离）"></a>3、工厂模式（实现了创建者和调用者是分离）</h2><p>3.1、本质：</p>
<p>①实例化对象时用工厂方法代替new</p>
<p>②将选择实现类、创建对象统一管理，将调用者跟实现类解耦</p>
<blockquote>
<p>简单工厂模式：用来生产同一等级结构的任意产品，对于增加的新产品，需要修改代码</p>
<p>工厂方法模式：用于生产同一等级结构的固定产品，支持增加任意产品</p>
<p>抽象工厂模式：用于生产不同品牌的全部产品，支持增加产品族，不能增加新产品</p>
</blockquote>
<p>3.2、简单工厂模式</p>
<p>①用来生产同一等级结构的任意产品，对于增加的新产品，需要修改代码（else）。</p>
<p>②简单工厂模式也叫静态工厂模式，工厂类一般使用静态方法，方便调用，通过接受的参数返回对应的对象实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CarFactory &#123;</span><br><span class="line">	public static Car createCar(String carType) &#123;</span><br><span class="line">		if(&quot;Audi&quot;.equals(carType)) &#123;</span><br><span class="line">			return new Audi();</span><br><span class="line">		&#125;else if(&quot;Byd&quot;.equals(carType))&#123;</span><br><span class="line">			return new Byd();</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			return null;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200903131900.png" style="zoom:50%;" />

<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200903131806.png" style="zoom:50%;" />

<p>3.3、工厂方法模式</p>
<p>①用于生产同一等级结构的固定产品，支持增加任意产品</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200903135153.png" style="zoom:50%;" />

<blockquote>
<p>简单工厂与工厂方法模式：</p>
<p>结构复杂度：简单工厂只要一个工厂类；工厂方法模式的类会随产品的增加而增加</p>
<p>代码复杂度：简单工厂模式在增加产品时需要在工厂类中添加代码；工厂方法模式只要完成一个产品的任务，代码简洁</p>
<p>客户端编程难度：简单工厂模式的工厂类一般使用静态方法，客户端无需实例化；工厂方法模式需要实例化</p>
<p>管理难度：工厂方法模式较复杂</p>
</blockquote>
<p>3.4、应用场景</p>
<p>spring中IOC容器创建管理bean;</p>
<p>反射中class对象的newInstance();</p>
<h2 id="4、抽象工厂模式"><a href="#4、抽象工厂模式" class="headerlink" title="4、抽象工厂模式"></a>4、抽象工厂模式</h2><p>①用于生产不同产品族的全部产品，通过下图框中的排列组合增加。支持增加产品族，不能增加新产品</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200903144302.png"></p>
<h2 id="5、建造者模式"><a href="#5、建造者模式" class="headerlink" title="5、建造者模式"></a>5、建造者模式</h2><p>5.1、本质：</p>
<p>①分离了对象子组件的构造（Builder）和装配（Director），实现了解耦</p>
<p>②构建器不同和装配顺序可以实例不同的对象，实现了复用</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200903160438.png"></p>
<p>5.2、应用场景：</p>
<p>①StringBuilder类的append方法</p>
<p>②SQL中的PrepareStatement</p>
<p>③JDO中的DOMBuilder、SAXBuilder</p>
<h2 id="6、原型模式（prototype）"><a href="#6、原型模式（prototype）" class="headerlink" title="6、原型模式（prototype）"></a>6、原型模式（prototype）</h2><p>6.1、本质</p>
<p>①java克隆技术，以某个对象为原型，复制出新对象</p>
<p>②克隆不同于new，克隆出的对象的值与原型对象相同，并且改变克隆值不会对原对象造成影响</p>
<p>③效率高，避免了重新执行构造过程</p>
<p>6.2、实现克隆：通过实现Cloneable接口和Object的本地方法clone()。</p>
<p><code>克隆有克隆和深克隆两种：</code></p>
<p>深克隆实现方法一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Sheep implements Cloneable&#123;</span><br><span class="line">	private String name;</span><br><span class="line">	private Date birthday;</span><br><span class="line">	</span><br><span class="line">	@Override</span><br><span class="line">	protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">		Object obj&#x3D;super.clone();</span><br><span class="line">		</span><br><span class="line">		&#x2F;&#x2F;深克隆（deep clone）</span><br><span class="line">		Sheep s&#x3D;(Sheep)obj;</span><br><span class="line">		s.birthday&#x3D;(Date) this.birthday .clone();</span><br><span class="line">		&#x2F;&#x2F;深克隆结束</span><br><span class="line">		</span><br><span class="line">		return obj;</span><br><span class="line">	&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>深克隆实现方法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class client &#123;</span><br><span class="line">	public static void main(String[] args) throws CloneNotSupportedException, Exception &#123;</span><br><span class="line">		Date date&#x3D;new Date(20202020);</span><br><span class="line">		Sheep s&#x3D;new Sheep(&quot;name&quot;,date);</span><br><span class="line">		System.out.println(s.getName()+s.getBirthday());</span><br><span class="line">			</span><br><span class="line">		&#x2F;&#x2F;通过序列化和反序列化实现深复制</span><br><span class="line">		ByteArrayOutputStream bos&#x3D; new ByteArrayOutputStream();</span><br><span class="line">		ObjectOutputStream oos&#x3D;new ObjectOutputStream(bos);</span><br><span class="line">		oos.writeObject(s);</span><br><span class="line">		byte[] bytes&#x3D;bos.toByteArray();</span><br><span class="line">		</span><br><span class="line">		ByteArrayInputStream bis&#x3D;new ByteArrayInputStream(bytes);</span><br><span class="line">		ObjectInputStream ois&#x3D;new ObjectInputStream(bis);</span><br><span class="line">		</span><br><span class="line">		Sheep s2&#x3D;(Sheep)ois.readObject();</span><br><span class="line">		</span><br><span class="line">		date.setTime(50505050);</span><br><span class="line">		System.out.println(s2.getName()+s2.getBirthday());</span><br><span class="line">		System.out.println(s.getName()+s.getBirthday());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="二、结构型模式（七种）（从结构上实现松耦合）"><a href="#二、结构型模式（七种）（从结构上实现松耦合）" class="headerlink" title="二、结构型模式（七种）（从结构上实现松耦合）"></a>二、结构型模式（七种）（从结构上实现松耦合）</h1><h2 id="1、适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式共七种。"><a href="#1、适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式共七种。" class="headerlink" title="1、适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式共七种。"></a>1、适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式共七种。</h2><h2 id="2、适配器模式（adapter）（作用于接口）"><a href="#2、适配器模式（adapter）（作用于接口）" class="headerlink" title="2、适配器模式（adapter）（作用于接口）"></a>2、适配器模式（adapter）（作用于接口）</h2><p>2.1、本质：</p>
<p>①将一个类的接口转换成客户希望的另外一个接口：使得原本由于接口不兼容的类可以一起工作</p>
<p>②在接口中有</p>
<blockquote>
<p>目标接口（Target）：具体的或抽象的类、接口。客户所希望的</p>
<p>需要适配的类（Adaptee）：需要适配的类或适配者类，一般为一些客户需要的功能</p>
<p>适配器（Adapter）：通过包装（继承或组合Adaptee）一个需要适配的对象，把原接口转换成目标接口（Target）</p>
</blockquote>
<p>2.2、实现方式</p>
<p>方式一：继承</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200903182912.png" style="zoom: 33%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Adapter extends Adaptee implements Target&#123;</span><br><span class="line">	@Override</span><br><span class="line">	public void handleReq() &#123;</span><br><span class="line">		super.request();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">	public void test(Target t)&#123;</span><br><span class="line">		t.handleReq();</span><br><span class="line">	&#125;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Client c&#x3D;new Client();</span><br><span class="line">		Target t&#x3D;new Adapter();</span><br><span class="line">		</span><br><span class="line">		c.test(t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式二：组合</p>
<p>2.3、应用场景</p>
<p>①旧系统的升级和改造</p>
<p>②java.io.InputStreamReader(InputStream)</p>
<p>java.io.OutputStreamWriter(OutputStream)</p>
<h2 id="3、代理模式（Proxy-pattern）（）"><a href="#3、代理模式（Proxy-pattern）（）" class="headerlink" title="3、代理模式（Proxy pattern）（）"></a>3、代理模式（Proxy pattern）（）</h2><p>3.1、本质：</p>
<p>①通过代理控制对对象的访问。</p>
<p>②可以详细控制访问某个对象的方法，即可以对该方法做一些通知（AOP的微观实现），从而实现将统一流程代码放在代理类中处理</p>
<p>3.2、核心角色</p>
<p>①抽象角色：定义代理角色和真实角色的公共对外方法</p>
<p>②真实角色：关注真正的业务逻辑</p>
<p>实现抽象角色，定义真实角色所需要的业务逻辑，供代理角色调用</p>
<p>③代理角色：（处理统一的流程控制）</p>
<p>实现抽象角色，代理真实角色，通过真实角色的业务逻辑方法来实现抽象方法，并且可以附加自己的操作</p>
<p>3.3、实现静态代理</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200904094806.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Star real&#x3D;new RealStar();</span><br><span class="line">		Star proxy &#x3D;new ProxyStar(real);</span><br><span class="line">		proxy.sing();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.4、实现动态代理，动态生成代理类</p>
<p>①JDK自带的动态代理</p>
<blockquote>
<p>java.lang.reflect.Proxy：动态生成代理类和对象</p>
<p>java.lang.reflect.InvocationHandler(处理器接口)：通过invoke()方法对真实角色进行访问；每次通过Proxy生成代理类时都要指定对应的处理器对象</p>
</blockquote>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200904102535.png"></p>
<p>3.5、应用场景</p>
<p>Spring中AOP声明式事务的实现</p>
<p>mybatis中实现拦截器</p>
<p>Thread代理</p>
<h2 id="4、桥接模式（对比抽象工厂模式；适用于多继承结构，与装饰器模式相比更注重多维度的继承）"><a href="#4、桥接模式（对比抽象工厂模式；适用于多继承结构，与装饰器模式相比更注重多维度的继承）" class="headerlink" title="4、桥接模式（对比抽象工厂模式；适用于多继承结构，与装饰器模式相比更注重多维度的继承）"></a>4、桥接模式（对比抽象工厂模式；适用于多继承结构，与装饰器模式相比更注重多维度的继承）</h2><p>4.1、实现</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/bridge.png" style="zoom:50%;" />



<p>4.2、应用场景</p>
<p>①JDBC驱动程序</p>
<p>②OA系统的消息处理：业务紧急类型和消息发送方式</p>
<p>③奖金计算：奖金类型和部门</p>
<h2 id="5、组合模式（composite）-处理树形结构"><a href="#5、组合模式（composite）-处理树形结构" class="headerlink" title="5、组合模式（composite）(处理树形结构)"></a>5、组合模式（composite）(处理树形结构)</h2><p>5.1、本质</p>
<p>把部分和整体的关系用树形结构表示，使得客户端可以使用统一的方式处理部分对象和整体对象</p>
<p>5.2、核心角色</p>
<blockquote>
<p>抽象构件（Component）：定义了叶子和容器的共同点</p>
<p>叶子构件（Leaf）：无子节点</p>
<p>容器构件（Composite）：有容器特征，包含子节点</p>
</blockquote>
<p>5.3、实现</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/composite.png" style="zoom:50%;" />

<p>5.4、应用场景</p>
<p>①Window资源管理器</p>
<p>②XML文件解析</p>
<p>③OA组织架构</p>
<p>④Junit单元测试框架</p>
<h2 id="6、装饰模式（decorator）（替代继承，与桥接模式相比更注重功能）"><a href="#6、装饰模式（decorator）（替代继承，与桥接模式相比更注重功能）" class="headerlink" title="6、装饰模式（decorator）（替代继承，与桥接模式相比更注重功能）"></a>6、装饰模式（decorator）（替代继承，与桥接模式相比更注重功能）</h2><p>6.1、本质：动态地为一个对象增加新功能，由于继承会在增加新功能时快速膨胀，装饰模式可以解决这种问题。</p>
<p>6.2、核心角色：</p>
<blockquote>
<p>抽象构件（Component）：真实对象和装饰对象的接口</p>
<p>具体构件对象（ConcreteComponent）：例如io流中的FileInPutStream、FileOutputStream</p>
<p>装饰角色（Decorator）：引用抽象构件，接受客户的所有请求，并把这些请求转发给具体构件对象</p>
<p>具体装饰角色（ConcreteDecorator）：负责该构件对象添加新的装饰</p>
</blockquote>
<p>6.3、实现</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/decorator.png" style="zoom:50%;" />

<p>6.4、应用场景</p>
<p>①IO流</p>
<h2 id="7、外观模式"><a href="#7、外观模式" class="headerlink" title="7、外观模式"></a>7、外观模式</h2><p>7.1、核心：为子系统提供统一入口，封装了子系统的复杂性，便于客户调用</p>
<h2 id="8、享元模式（FlyWeight）（围棋软件）"><a href="#8、享元模式（FlyWeight）（围棋软件）" class="headerlink" title="8、享元模式（FlyWeight）（围棋软件）"></a>8、享元模式（FlyWeight）（围棋软件）</h2><p>8.1、本质：</p>
<p>①如果有很多个完全相同或相似的对象，可以通过享元模式节省内存</p>
<p>②享元模式以共享的方式高效地支持大量细粒度对象的重用</p>
<p>③实现共享的关键是区分了内部状态和外部状态</p>
<blockquote>
<p>内部状态：可以共享，不会随环境变化而变化</p>
<p>外部状态：不可以共享，会随环境变化而变化</p>
</blockquote>
<p>8.2、核心角色：</p>
<blockquote>
<p>享元工厂类（FlyWeightFactory）：创建管理享元对象，享元池一般为键值对</p>
<p>抽象享元类（FlyWeight）：接口或抽象方法，声明公共方法</p>
<p>具体享元类（ConcreteFlyWeight）：为内部状态提供成员变量进行存储</p>
<p>非共享享元类（UnsharedFlyWeight）：不能被共享的子类，存放外部状态</p>
</blockquote>
<p>8.3、实现</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/flyweightnew.png"></p>
<p>8.4、应用场景</p>
<p>①线程池、数据库连接池</p>
<p>②String类的设计</p>
<h1 id="三、行为型模式（十一种，对象之间的相互交互）"><a href="#三、行为型模式（十一种，对象之间的相互交互）" class="headerlink" title="三、行为型模式（十一种，对象之间的相互交互）"></a>三、行为型模式（十一种，对象之间的相互交互）</h1><p>模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式共十一种。</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200904144511.png"></p>
<h2 id="1、职责链模式"><a href="#1、职责链模式" class="headerlink" title="1、职责链模式"></a>1、职责链模式</h2><p>1.1、实现</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/chainOfResponsibility.png"></p>
<p>1.2、应用场景</p>
<p>①try…catch异常机制</p>
<p>②servlet中过滤器的链式处理</p>
<p>③Struts2中拦截器的调用</p>
<h2 id="2、迭代器模式（iterator）：游标（cursor）模式"><a href="#2、迭代器模式（iterator）：游标（cursor）模式" class="headerlink" title="2、迭代器模式（iterator）：游标（cursor）模式"></a>2、迭代器模式（iterator）：游标（cursor）模式</h2><p>2.1、提供了一种可以遍历聚合对象的方式</p>
<p>2.2、核心角色</p>
<blockquote>
<p> 聚合对象：存储数据</p>
<p>迭代器：遍历数据</p>
</blockquote>
<p>2.3、实现</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/iterator.png"></p>
<p>2.4、JDK内置的set/list</p>
<h2 id="3、中介者模式（Mediator）"><a href="#3、中介者模式（Mediator）" class="headerlink" title="3、中介者模式（Mediator）"></a>3、中介者模式（Mediator）</h2><p>3.1、本质：</p>
<p>①一个系统中对象之间的联系为网状结构，即多对多关系，关系将变得复杂，这些对象称为同事对象</p>
<p>②为解决上述复杂关系，引入一个中介者对象，将复杂网络结构化为简单的星型结构（一对多）</p>
<p>③同事对象持有中介者的引用，通过中介者对象统一管理交互关系</p>
<p>3.2、实现</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/mediator.png"></p>
<p>3.3、应用场景</p>
<p>①MVC模式中的控制器作为中介者对象，管理M和V</p>
<p>②java.lang.reflect.Method#invoke()</p>
<h2 id="4、命令模式（command）【动作模式（Action）】【事务模式（transaction）】"><a href="#4、命令模式（command）【动作模式（Action）】【事务模式（transaction）】" class="headerlink" title="4、命令模式（command）【动作模式（Action）】【事务模式（transaction）】"></a>4、命令模式（command）【动作模式（Action）】【事务模式（transaction）】</h2><p>4.1、本质：</p>
<p>将一个请求封装为一个对象，从而使我们可以用不同的请求对客户进行参数化，对请求排队或者记录请求日志，以及支持撤销操作</p>
<p>4.2、核心角色：</p>
<blockquote>
<p>抽象命令类（Command）：</p>
<p>具体命令类（ConcreteCommand）：</p>
<p>调用者（invoker）：请求的发送者，通过命令对象来执行请求，一个调用者并不需要在设计时确定接收者，因此他只与抽象命令类之间存在关联；在程序运行时，将调用命令对象的execute()，间接调用接收者的操作</p>
<p>接收者（Receiver）：执行与请求相关的操作，实现请求的业务处理</p>
<p>客户类（Client）：创建调用者对象、具体命令类对象（此时指定对应的接收者）。发送者和接收者没有直接关系，通过命令对象间接调用。</p>
</blockquote>
<p>4.3、实现</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/command.png"></p>
<p>4.4、应用场景</p>
<p>①数据库事务机制的底层实现</p>
<p>②命令的撤销和恢复</p>
<h2 id="5、解释器模式（Interpreter）"><a href="#5、解释器模式（Interpreter）" class="headerlink" title="5、解释器模式（Interpreter）"></a>5、解释器模式（Interpreter）</h2><p>5.1、自定义语言解释器</p>
<h2 id="6、访问者模式（visitor）"><a href="#6、访问者模式（visitor）" class="headerlink" title="6、访问者模式（visitor）"></a>6、访问者模式（visitor）</h2><h2 id="7、策略模式（strategy）（对应多种方案，分离算法，选择实现：context）"><a href="#7、策略模式（strategy）（对应多种方案，分离算法，选择实现：context）" class="headerlink" title="7、策略模式（strategy）（对应多种方案，分离算法，选择实现：context）"></a>7、策略模式（strategy）（对应多种方案，分离算法，选择实现：context）</h2><p>7.1、针对某一个问题设计一个算法族，允许用户调用算法族中的任何一个策略来解决问题，便于扩展</p>
<p>7.2、实现</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/strategy.png"></p>
<h2 id="8、模板方法模式（template-method）"><a href="#8、模板方法模式（template-method）" class="headerlink" title="8、模板方法模式（template method）"></a>8、模板方法模式（template method）</h2><p>8.1、本质：</p>
<p>①定义了一个算法骨架</p>
<p>②在骨架中（父类）定义了处理步骤，具体实现定义在子类中</p>
<p>③适用于一个算法整体步骤很固定，把某些易变的方法抽象出来，由子类实现</p>
<p>8.2、实现</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/templateMethod.png"></p>
<p>8.4、应用场景</p>
<p>①数据库访问的封装</p>
<p>②servlet中doGet/doPost</p>
<h2 id="9、状态模式（state）（不同状态有不同行为）"><a href="#9、状态模式（state）（不同状态有不同行为）" class="headerlink" title="9、状态模式（state）（不同状态有不同行为）"></a>9、状态模式（state）（不同状态有不同行为）</h2><p>9.1、本质：</p>
<p>解决系统中对象的状态切换以及不同状态下行为的封装问题</p>
<p>9.2、核心角色：</p>
<blockquote>
<p>环境类（Context）：定义当前对象</p>
<p>抽象状态类（State）：</p>
<p>具体状态类（ConcreteState）：每一个类对应一个行为</p>
</blockquote>
<p>9.3、实现</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/state.png"></p>
<p>9.4、应用场景</p>
<p>①银行账号状态管理</p>
<p>②OA中公文状态管理</p>
<p>③酒店房间状态管理</p>
<p>④线程对象状态切换</p>
<h2 id="10、观察者模式（Observer）（广播：1对多）"><a href="#10、观察者模式（Observer）（广播：1对多）" class="headerlink" title="10、观察者模式（Observer）（广播：1对多）"></a>10、观察者模式（Observer）（广播：1对多）</h2><p>10.1、本质：</p>
<p>①用于1：N的通知，当目标对象（Subject或Observable）状态变化时，通知观察者对象（Observer）做出响应</p>
<p>②通知观察者方式：</p>
<blockquote>
<p>推：观察者被动接收</p>
<p>拉：观察者主动获取通知</p>
</blockquote>
<p>10.2、实现（两种方式）</p>
<p>方式一：自定义</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/observer.png"></p>
<p>方式二：java自带接口</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/observer2.png"></p>
<p>10.3、应用场景</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200905114206.png"></p>
<h2 id="11、备忘录模式（memento）（撤销与恢复）"><a href="#11、备忘录模式（memento）（撤销与恢复）" class="headerlink" title="11、备忘录模式（memento）（撤销与恢复）"></a>11、备忘录模式（memento）（撤销与恢复）</h2><p>11.1、本质：保存某个对象内部状态的拷贝，可以将对象恢复至原先的状态</p>
<p>11.2、核心角色：</p>
<blockquote>
<p>源发器类（Originator）：保存对象的状态</p>
<p>备忘录类（Memento）：保存拷贝</p>
<p>负责人类（CareTaker）：保存、管理备忘录类，可以通过容器设置多个备忘点</p>
</blockquote>
<p>11.3、实现</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/memento.png"></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
        <tag>GOF23</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql优化</title>
    <url>/2020/09/02/MySql%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="一、Linux下RPM版MySQL安装、启停"><a href="#一、Linux下RPM版MySQL安装、启停" class="headerlink" title="一、Linux下RPM版MySQL安装、启停"></a>一、Linux下RPM版MySQL安装、启停</h1><h2 id="1、MySQL版本"><a href="#1、MySQL版本" class="headerlink" title="1、MySQL版本"></a>1、MySQL版本</h2><a id="more"></a>

<p>5.x:<br>    5.0-5.1:早期产品的延续，升级维护<br>    5.4 - 5.x :  MySQL整合了三方公司的新存储引擎 （推荐5.5  5.7）</p>
<h1 id="二、MySQL分层、存储引擎"><a href="#二、MySQL分层、存储引擎" class="headerlink" title="二、MySQL分层、存储引擎"></a>二、MySQL分层、存储引擎</h1><h2 id="1、MySQL分层"><a href="#1、MySQL分层" class="headerlink" title="1、MySQL分层"></a>1、MySQL分层</h2><blockquote>
<p>连接层 ：提供与客户端连接的服务</p>
<p>服务层 ：①提供各种用户使用的接口（select）②提供SQL优化器（MySQL Query Optimization）</p>
<p>引擎层 ：提供数据库存储方式（InnoDB、MyISAM等）</p>
<p>存储层：存储数据</p>
</blockquote>
<h2 id="2、SQL优化的必要性"><a href="#2、SQL优化的必要性" class="headerlink" title="2、SQL优化的必要性"></a>2、SQL优化的必要性</h2><p>2.1、SQL编写过程与解析过程顺序不同,导致性能低、执行时间太长、等待时间太长、SQL语句欠佳（连接查询）、索引失效、服务器参数设置不合理（缓冲、线程数）</p>
<p>①编写：select dinstinct  ..from  ..join ..on ..where ..group by …having ..order by ..limit ..</p>
<p>②解析：from .. on.. join ..where ..group by ….having …select dinstinct ..order by limit …</p>
<p><a href="https://www.cnblogs.com/annsshadow/p/5037667.html">参考</a></p>
<p>2.2、SQL优化：主要优化索引（index，相当于目录）</p>
<p>index是帮助MYSQL高效获取数据的数据结构。</p>
<p>索引是数据结构（树：B树(默认)、Hash树…）</p>
<p>2.3、Index优势：</p>
<p>①提高查询效率（降低IO使用率）<br>②降低CPU使用率 （…order by age desc,因为 B树索引 本身就是一个 好排序的结构，因此在排序时  可以直接使用）</p>
<p>2.4、Index的缺点：</p>
<p>①索引本身很大， 可以存放在内存/硬盘（通常为 硬盘）<br>②索引不是所有情况均适用： a.少量数据  b.频繁更新的字段   c.很少使用的字段<br>③索引会降低增删改的效率（增删改  查）</p>
<h1 id="三、索引"><a href="#三、索引" class="headerlink" title="三、索引"></a>三、索引</h1><h2 id="1、分类"><a href="#1、分类" class="headerlink" title="1、分类"></a>1、分类</h2><blockquote>
<p>单值索引：用一个字段作为索引，一张表可以有多个索引</p>
<p>唯一索引：用值不能重复的字段作为索引</p>
<p>主键索引：用primary key字段作为索引，如果一个字段是primary key，则该字段默认就是 主键索引，与唯一索引区别在于不能为字段值不能为NULL</p>
<p>复合索引：由多列构成的索引，可以理解为二级目录、三级目录……，复合索引不要求所有的字段都要用到，当查询到目标时可以不用以后的字段</p>
</blockquote>
<h2 id="2、创建索引"><a href="#2、创建索引" class="headerlink" title="2、创建索引"></a>2、创建索引</h2><p>2.1、方式一：（create on）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index &lt;index_name&gt; on &lt;tb_name&gt;(&lt;column_name&gt;);--单值索引</span><br><span class="line"></span><br><span class="line">create unique index &lt;index_name&gt; on &lt;tb_name&gt;(&lt;column_name&gt;); --唯一索引</span><br><span class="line"></span><br><span class="line">create index &lt;index_name&gt; on &lt;tb_name&gt;(&lt;column_name1&gt;,&lt;column_name2&gt;[,...]); --复合索引</span><br></pre></td></tr></table></figure>

<p>2.2、方式二：（alter add）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; add index &lt;index_name&gt;(&lt;column_name&gt;);</span><br><span class="line"></span><br><span class="line">alter table &lt;tb_name&gt; add unique index &lt;index_name&gt;(&lt;column_name&gt;);</span><br><span class="line"></span><br><span class="line">alter table &lt;tb_name&gt; add index &lt;index_name&gt;(&lt;column_name1&gt;,&lt;column_name2&gt;[,...]);</span><br></pre></td></tr></table></figure>

<h2 id="3、删除索引"><a href="#3、删除索引" class="headerlink" title="3、删除索引"></a>3、删除索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop index &lt;index_name&gt; on &lt;tb_name&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="4、查看索引"><a href="#4、查看索引" class="headerlink" title="4、查看索引"></a>4、查看索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show index from &lt;tb_name&gt;;</span><br></pre></td></tr></table></figure>

<h1 id="四、SQL性能优化"><a href="#四、SQL性能优化" class="headerlink" title="四、SQL性能优化"></a>四、<a href="https://dev.mysql.com/doc/refman/8.0/en/">SQL性能优化</a></h1><h2 id="1、分析SQL的执行计划（explain）"><a href="#1、分析SQL的执行计划（explain）" class="headerlink" title="1、分析SQL的执行计划（explain）"></a>1、分析SQL的执行计划（explain）</h2><p>1.1、explain可以模拟SQL优化器执行SQL语句，从而让开发人员 知道自己编写的SQL状况</p>
<p>1.2、查询执行计划</p>
<p>explain +SQL语句</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200902110110.png"></p>
<p>① id : 编号</p>
<blockquote>
<p>相同时：数据量越少越优先（笛卡尔积），多表查询时</p>
<p>不同时：id值越大的越优先查询    ，SQL语句包含子查询时</p>
<p>有相同又有不同：id值越大的越优先查询，数据量越少越优先</p>
</blockquote>
<p> ②select_type ：查询类型</p>
<blockquote>
<p>PRIMARY:包含子查询SQL中的 主查询 （最外层）</p>
<p>SUBQUERY：包含子查询SQL中的 子查询 （非最外层）</p>
<p>simple:简单查询（不包含子查询、union）</p>
<p>derived:衍生查询（使用到了临时表），情况一：在from子查询中只有一张表；情况二：在from子查询中， 如果有table1 union table2 ，则table1 就是derived,table2就是union</p>
<p>union：在from子查询中， 如果有table1 union table2 ，则table1 就是derived,table2就是union</p>
<p>union result ：告知开发人员，那些表之间存在union查询</p>
</blockquote>
<p> ③table ：表</p>
<p>④ type   ：索引类型</p>
<blockquote>
<p>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all </p>
<p>要对type进行优化的前提：有索引</p>
<p>其中：system,const只是理想情况；实际能达到 ref&gt;range</p>
</blockquote>
<blockquote>
<p>system（忽略）: 只有一条数据的系统表 ；或 衍生表只有一条数据的主查询</p>
<p>const：仅仅能查到一条数据的SQL ,用于Primary key 或unique索引  （类型 与索引类型有关）</p>
<p>eq_ref:唯一性索引：对于每个索引键的查询，返回匹配唯一行数据（有且只有1个，不能多 、不能0）常见于唯一索引 和主键索引</p>
<p>ref：非唯一性索引，对于每个索引键的查询，返回匹配的所有行（0，多）</p>
<p>range：检索指定范围的行 ,where后面是一个范围查询(between   ,&gt; &lt; &gt;=,     特殊:in有时候会失效 ，从而转为 无索引all)</p>
<p>index：查询全部索引中数据</p>
<p>all：查询全部表中的数据</p>
</blockquote>
<blockquote>
<p>system/const：结果只有一条数据</p>
<p>eq_ref：结果多条；但是每条数据是唯一的 ；</p>
<p>ref：结果多条；但是每条数据是是0或多条 ；</p>
</blockquote>
<p>⑤possible_keys ：预测可能用到的索引 </p>
<p>⑥key  ：实际使用的索引</p>
<p>⑦ key_len ：实际使用索引的长度   ，判断复合索引是否被完全使用</p>
<blockquote>
<p>如果索引字段可以为Null,则会使用1个字节用于标识，用2个字节 标识可变长度（varchar）</p>
<p>utf8:1个字符3个字节<br>gbk:1个字符2个字节<br>latin:1个字符1个字节</p>
</blockquote>
<p> ⑧ref  :表之间的引用</p>
<blockquote>
<p>指明当前表所参照的字段b.x</p>
<p>select ….where a.c = b.x ;(其中b.x可以是常量，const)</p>
</blockquote>
<p>⑨rows ：被索引优化查询的数据个数 (实际通过索引而查询到的数据个数)</p>
<p>⑩ Extra     :额外的信息</p>
<blockquote>
<p>a.using filesort ： 性能消耗大；需要“额外”的一次排序（查询）。常见于 order by 语句中。</p>
<p>b.对于单索引， 如果排序和查找是同一个字段，则不会出现using filesort；如果排序和查找不是同一个字段，则会出现using filesort；</p>
<p>避免： where哪些字段，就order by那些字段2</p>
<p>c.复合索引：不能跨列（最佳左前缀）</p>
<p>避免： where和order by 按照复合索引的顺序使用，不要跨列或无序使用（where和order by拼接）。</p>
</blockquote>
<blockquote>
<p>using temporary：性能损耗大 ，用到了临时表。一般出现在group by 语句中。</p>
<p>using temporary产生原因：与解析过程有关（from .. on.. join ..where ..group by ….having …select dinstinct ..order by limit …），如果where后面的条件判断与group by 后面的字段不一致，则需要额外创建一张临时表</p>
<p>避免：查询那些列，就根据那些列 group by .</p>
</blockquote>
<blockquote>
<p>using index :性能提升; 索引覆盖（覆盖索引）。原因：不读取原文件，只从索引文件中获取数据 （不需要回表查询）</p>
<p>只要使用到的列全部都在复合索引中，就是索引覆盖using index</p>
<p>如果用到了索引覆盖(using index时)，会对 possible_keys和key造成影响：<br>        a.如果没有where，则索引只出现在key中；<br>        b.如果有where，则索引 出现在key和possible_keys中。</p>
</blockquote>
<blockquote>
<p>using where （需要回表查询）</p>
<p>假设age是索引列<br>但查询语句select age,name from …where age =…,此语句中必须回原表查Name，因此会显示using where.</p>
</blockquote>
<blockquote>
<p>impossible where ： where子句永远为false</p>
</blockquote>
<h2 id="2、单表优化"><a href="#2、单表优化" class="headerlink" title="2、单表优化"></a>2、单表优化</h2>]]></content>
      <tags>
        <tag>MySql</tag>
        <tag>database</tag>
        <tag>MySql优化</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql</title>
    <url>/2020/09/01/MySql/</url>
    <content><![CDATA[<h1 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h1><p>1.1、database（DB）：数据库：按照数据结构来组织，存储和管理数据的仓库。</p>
<p>Database Management System （DBMS）：对数据进行管理的软件系统</p>
<a id="more"></a>

<p>1.2、近年数据库使用情况：<a href="https://db-engines.com/en/ranking/relational+dbms">DB-ENGINES</a></p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200901084149.png" style="zoom:50%;" />

<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200901084617.png" style="zoom: 33%;" />

<p>1.3、MySql是一个开源的<code>关系型</code>数据库管理系统。</p>
<p>1.4、安装：<a href="https://dev.mysql.com/downloads/">MySQL Community Downloads</a></p>
<p>配置密码等</p>
<p>添加环境变量：安装目录\MySQL\bin</p>
<p>1.5、主要目录结构：</p>
<ul>
<li>bin：可执行文件，如mysql.exe</li>
<li>include：存储头文件，如mysql.h</li>
<li>lib：存储库文件</li>
<li>share：存储错误信息、字符集文件</li>
<li>data：用于放置日志文件和数据库</li>
<li>upload：存放文件的导入导出</li>
<li>my.ini：配置文件</li>
<li><code>其中最后三个目录在C:\ProgramData\MySQL\MySQL Server 8.0路径下</code></li>
</ul>
<h1 id="二、数据库操作"><a href="#二、数据库操作" class="headerlink" title="二、数据库操作"></a>二、数据库操作</h1><h2 id="1、登录"><a href="#1、登录" class="headerlink" title="1、登录"></a>1、登录</h2><p>1.1、启动与关闭</p>
<p>方式一：通过服务（services.msc）手动启动关闭</p>
<p>方式二：命令行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql80</span><br><span class="line">net stop mysql80</span><br></pre></td></tr></table></figure>

<p>1.2、mysql参数登录</p>
<ul>
<li>-u（用户名）</li>
<li>-p（密码）</li>
<li>-V（版本信息并且退出）</li>
<li>-h（主机地址）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h127.0.0.1 -uroot -ptoot123</span><br></pre></td></tr></table></figure>

<p>或者在-p后按回车输入密码，可以隐藏输入的字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h127.0.0.1 -uroot -p</span><br><span class="line">Enter password:*******</span><br></pre></td></tr></table></figure>

<p>1.3、退出（Exit、Quit不区分大小写，\q 必须小写）</p>
<ul>
<li>Exit</li>
<li>Quit</li>
<li>\q</li>
</ul>
<h2 id="2、常用命令"><a href="#2、常用命令" class="headerlink" title="2、常用命令"></a>2、常用命令</h2><p>2.1、修改用户密码的命令（在退出情况下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p&lt;旧密码&gt; password &lt;新密码&gt;</span><br></pre></td></tr></table></figure>

<p>2.2、显示<code>所有</code>数据库的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p>2.3、使用数据库的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure>

<p>2.4、显示当前连接的数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure>

<p>2.5、显示当前服务器的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure>

<p>2.7、显示当前日期时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select now();</span><br></pre></td></tr></table></figure>

<p>2.8、显示当前用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show user();</span><br></pre></td></tr></table></figure>

<h2 id="3、创建、修改与删除"><a href="#3、创建、修改与删除" class="headerlink" title="3、创建、修改与删除"></a>3、创建、修改与删除</h2><p>3.1、创建数据库（中括号内为可选内容，在此处说明，以后都按照此格式；&lt;&gt;里为可替换内容）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database &lt;db_name&gt;;</span><br><span class="line"></span><br><span class="line">create database [if not exists] &lt;db_name&gt; [character set utf8];</span><br></pre></td></tr></table></figure>

<p>3.2、修改数据库的编码格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter database &lt;db_name&gt; character set [&#x3D;] &lt;charset_name&gt;;</span><br></pre></td></tr></table></figure>

<p>查看数据库的编码格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;character%&#39;;</span><br></pre></td></tr></table></figure>

<p>3.3、删除数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database [if exists] &lt;db_name&gt;;</span><br></pre></td></tr></table></figure>

<h1 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h1><h2 id="1、整型"><a href="#1、整型" class="headerlink" title="1、整型"></a>1、整型</h2><p><img src="https://gitee.com/devilnaps/picbed/raw/296ba508f1a01dc54f3a49a93f38038624fa1315/img/20200901112230.png"></p>
<h2 id="2、浮点数类型和定点型类型（表示小数）"><a href="#2、浮点数类型和定点型类型（表示小数）" class="headerlink" title="2、浮点数类型和定点型类型（表示小数）"></a>2、浮点数类型和定点型类型（表示小数）</h2><p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200901112544.png"></p>
<p>浮点型存放近似值，定点数存放精确值</p>
<h2 id="3、日期时间型"><a href="#3、日期时间型" class="headerlink" title="3、日期时间型"></a>3、日期时间型</h2><p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200901112840.png"></p>
<h2 id="4、字符型"><a href="#4、字符型" class="headerlink" title="4、字符型"></a>4、字符型</h2><p>存储字符串数据，还可以存储图片、声音的二进制数据</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200901113547.png"></p>
<h1 id="四、数据库表结构的操作"><a href="#四、数据库表结构的操作" class="headerlink" title="四、数据库表结构的操作"></a>四、数据库表结构的操作</h1><h2 id="1、创建、查看数据库表"><a href="#1、创建、查看数据库表" class="headerlink" title="1、创建、查看数据库表"></a>1、创建、查看数据库表</h2><p>1.1、创建表（先选择数据库：use <db_name>;）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table reader(</span><br><span class="line">	card_id char(18),</span><br><span class="line">	name varchar(10),</span><br><span class="line">	sex enum(&#39;男&#39;,&#39;女&#39;),</span><br><span class="line">	age tinyint,</span><br><span class="line">	tel char(11),</span><br><span class="line">	balance decimal(7,3)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>1.2、查看包含的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables [from &lt;db_name&gt;];</span><br></pre></td></tr></table></figure>

<p>1.3、查看表内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show columns from &lt;tb_name&gt;;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">describe &lt;tb_name&gt;;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">desc &lt;tb_name&gt;;</span><br></pre></td></tr></table></figure>

<p>1.4、查看表创建详细信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create table &lt;tb_name&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="2、修改表"><a href="#2、修改表" class="headerlink" title="2、修改表"></a>2、修改表</h2><p>2.1、修改表名（alter+rename）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; rename to &lt;新表名&gt;;</span><br></pre></td></tr></table></figure>

<p>2.2、追加列（alter+add）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; add &lt;column_name&gt; &lt;指定数据类型&gt;;</span><br></pre></td></tr></table></figure>

<p>2.3、指定位置添加列（alter+add+after）:first不指定位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; add &lt;column_name&gt; &lt;指定数据类型&gt; first|after &lt;指定位置：列名&gt;</span><br></pre></td></tr></table></figure>

<p>2.4、修改列名（alter+change）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; change &lt;旧列名&gt; &lt;新列名&gt; &lt;指定新列名数据类型&gt;;</span><br></pre></td></tr></table></figure>

<p>2.5、修改列的数据类型（alter+modify）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; modify &lt;column_name&gt; &lt;指定数据类型&gt;;</span><br></pre></td></tr></table></figure>

<p>2.6、修改列的排列位置（alter+modify+after）:first不指定位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; modify &lt;需要修改的column_name&gt; &lt;该列的数据类型&gt; first|after &lt;目标column_name&gt;;</span><br></pre></td></tr></table></figure>

<p>2.7、删除列（drop）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; drop &lt;column_name&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="3、删除表"><a href="#3、删除表" class="headerlink" title="3、删除表"></a>3、删除表</h2><p>3.1、删除表（drop）：一个或多个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table [if exists] &lt;tb_name&gt;,&lt;tb_name1&gt;,...;</span><br></pre></td></tr></table></figure>

<h2 id="4、表分区（优化数据库）"><a href="#4、表分区（优化数据库）" class="headerlink" title="4、表分区（优化数据库）"></a>4、表分区（优化数据库）</h2><p>4.1、概念：把一张表的数据分成多个区块，可以把这些区块放置不同的磁盘位置。表分区有两种方式：水平（将数据按照行分割）和垂直（将数据按照列分割）。</p>
<p>4.2、创建表分区：</p>
<p>①在创建表时使用：partition by &lt;分区类型&gt;&lt;字段&gt;</p>
<p>②分区类型：</p>
<ul>
<li><p>range</p>
</li>
<li><p>指定某列的范围值进行分区</p>
</li>
<li><p>使用value less than 操作符定义分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table bookinfo(</span><br><span class="line">	book_id int,</span><br><span class="line">	book_name varchar(20)</span><br><span class="line">)</span><br><span class="line">partition by range(book_id)(</span><br><span class="line">	partition p1 values less than(20109999),</span><br><span class="line">	partition p2 values less than(20159999),</span><br><span class="line">	partition p3 values less than MAXVALUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>③查看表分区内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into bookinfo values(20100005,&#39;t1&#39;);</span><br><span class="line">insert into bookinfo values(20140015,&#39;t2&#39;);</span><br><span class="line">insert into bookinfo values(20170011,&#39;t3&#39;);</span><br><span class="line"></span><br><span class="line">select * from bookinfo partition(p1);</span><br></pre></td></tr></table></figure>

<h1 id="五、约束"><a href="#五、约束" class="headerlink" title="五、约束"></a>五、约束</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>1.1、约束即限制，通过对表的行列做出限制来确保数据的完整性和唯一性。</p>
<p>1.2、约束类型：</p>
<table>
<thead>
<tr>
<th align="center">约束类型</th>
<th align="center">关键字</th>
</tr>
</thead>
<tbody><tr>
<td align="center">非空约束</td>
<td align="center">NOT NULL</td>
</tr>
<tr>
<td align="center">主键约束</td>
<td align="center">PRIMARY KEY</td>
</tr>
<tr>
<td align="center">唯一约束</td>
<td align="center">UNIQUE</td>
</tr>
<tr>
<td align="center">默认约束</td>
<td align="center">DEFAULT</td>
</tr>
<tr>
<td align="center">外键约束</td>
<td align="center">FOREIGN KEY</td>
</tr>
</tbody></table>
<h2 id="2、非空约束"><a href="#2、非空约束" class="headerlink" title="2、非空约束"></a>2、非空约束</h2><p>2.1、在创建表时添加（create）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &lt;tb_name&gt;(</span><br><span class="line">​	&lt;字段&gt; &lt;数据类型&gt; not null,</span><br><span class="line">​	……</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>2.2、修改已有表的非空约束：（alter+modify）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; modify &lt;字段&gt; &lt;数据类型&gt; not null;</span><br></pre></td></tr></table></figure>

<p>2.3、删除非空约束：（alter+modify）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; modify &lt;字段&gt; &lt;数据类型&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="3、主键约束（数据唯一性，且非空，只有一个主键）"><a href="#3、主键约束（数据唯一性，且非空，只有一个主键）" class="headerlink" title="3、主键约束（数据唯一性，且非空，只有一个主键）"></a>3、主键约束（数据唯一性，且非空，只有一个主键）</h2><p>3.1、创建表时添加：</p>
<p>方式一：定义列同时指定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &lt;tb_name&gt;(</span><br><span class="line">	&lt;字段&gt; &lt;数据类型&gt; primary key,</span><br><span class="line">	...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>方式二：列定义后边指定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &lt;tb_name&gt;(</span><br><span class="line">	&lt;字段&gt; &lt;数据类型&gt; ,</span><br><span class="line">	...</span><br><span class="line">	[constraint &lt;约束名&gt;] primary key(&lt;字段&gt;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>3.2、添加联合主键约束：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &lt;tb_name&gt;(</span><br><span class="line">	&lt;字段1&gt; &lt;数据类型&gt; ,</span><br><span class="line">	&lt;字段2&gt; &lt;数据类型&gt; ,</span><br><span class="line">	...</span><br><span class="line">	primary key(&lt;字段1&gt;,&lt;字段2&gt;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>3.3、修改已有表的主键约束：</p>
<p>方式一：（alter+modify）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; modify &lt;字段&gt; &lt;数据类型&gt; PRIMARY KEY;</span><br></pre></td></tr></table></figure>

<p>方式二：（alter+add）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; add primary key(&lt;字段&gt;);</span><br></pre></td></tr></table></figure>

<p>方式三：（alter+add+constraint）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; add constraint pk_id primary key(&lt;字段&gt;);</span><br></pre></td></tr></table></figure>

<p>3.4、删除主键约束：（alter+drop）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; drop primary key;</span><br></pre></td></tr></table></figure>



<h2 id="4、唯一约束（唯一性，允许为空，可以有多个约束）"><a href="#4、唯一约束（唯一性，允许为空，可以有多个约束）" class="headerlink" title="4、唯一约束（唯一性，允许为空，可以有多个约束）"></a>4、唯一约束（唯一性，允许为空，可以有多个约束）</h2><p>4.1、唯一约束的添加与修改参考主键约束</p>
<p>4.2、删除唯一约束：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; drop index|key &lt;约束名&gt;；</span><br></pre></td></tr></table></figure>

<h2 id="5、默认约束"><a href="#5、默认约束" class="headerlink" title="5、默认约束"></a>5、默认约束</h2><p>5.1、创建表时添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &lt;tb_name&gt;(</span><br><span class="line">	&lt;字段&gt; &lt;数据类型&gt; default &lt;&#39;默认值&#39;&gt;,</span><br><span class="line">	...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>5.2、修改已有表的默认约束：</p>
<p>方式一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; modify &lt;字段&gt; &lt;数据类型&gt; default &lt;&#39;默认值&#39;&gt;;</span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; alter column &lt;字段&gt; set default &lt;&#39;默认值&#39;&gt;;</span><br></pre></td></tr></table></figure>

<p>5.3、删除默认约束：</p>
<p>方式一：该方法会删除字段的所有约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; modify &lt;字段&gt; &lt;数据类型&gt;;</span><br></pre></td></tr></table></figure>

<p>方式二：适合有选择地删除默认约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; alter column &lt;字段&gt; drop default;</span><br></pre></td></tr></table></figure>

<h2 id="6、外键约束（用于表与表之间建立联系保证数据完整性、一致性，可以是一列或多列。一个表可以有一个或多个外键，可以为空值。外键值必须是另一个表的主键，即主表的主键与从表的外键的数据类型必须一致）"><a href="#6、外键约束（用于表与表之间建立联系保证数据完整性、一致性，可以是一列或多列。一个表可以有一个或多个外键，可以为空值。外键值必须是另一个表的主键，即主表的主键与从表的外键的数据类型必须一致）" class="headerlink" title="6、外键约束（用于表与表之间建立联系保证数据完整性、一致性，可以是一列或多列。一个表可以有一个或多个外键，可以为空值。外键值必须是另一个表的主键，即主表的主键与从表的外键的数据类型必须一致）"></a>6、外键约束（用于表与表之间建立联系保证数据完整性、一致性，可以是一列或多列。一个表可以有一个或多个外键，可以为空值。外键值必须是另一个表的主键，即主表的主键与从表的外键的数据类型必须一致）</h2><p>6.1、创建表时添加外键约束：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &lt;tb_name&gt;(</span><br><span class="line">	&lt;从表字段&gt; &lt;数据类型&gt; ,</span><br><span class="line">	...</span><br><span class="line">	[constraint &lt;约束名&gt;] foreign key(&lt;从表字段&gt;) references &lt;主表tb_name&gt;(&lt;主键字段&gt;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>6.2、修改已有表的外键约束：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; add [constraint &lt;约束名&gt;] foreign key(&lt;从表字段&gt;) references &lt;主表tb_name&gt;(&lt;主键字段&gt;);</span><br></pre></td></tr></table></figure>

<p>6.3、删除外键约束：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; drop foreign key &lt;约束名&gt;;</span><br></pre></td></tr></table></figure>

<p>6.4、外键约束的参照操作:cascade，级联，父表删除或更新时，子表自动删除或更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &lt;tb_name&gt;(</span><br><span class="line">	&lt;从表字段&gt; &lt;数据类型&gt; ,</span><br><span class="line">	...</span><br><span class="line">	[constraint &lt;约束名&gt;] foreign key(&lt;从表字段&gt;) references &lt;主表tb_name&gt;(&lt;主键字段&gt;) on delete cascade</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h1 id="六、数据库表记录的操作"><a href="#六、数据库表记录的操作" class="headerlink" title="六、数据库表记录的操作"></a>六、数据库表记录的操作</h1><h2 id="1、单表数据记录的插入（insert）"><a href="#1、单表数据记录的插入（insert）" class="headerlink" title="1、单表数据记录的插入（insert）"></a>1、单表数据记录的插入（insert）</h2><p>1.1、插入完整的记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into &lt;tb_name&gt;[(&lt;column_list&gt;)] values(&lt;value_list&gt;);</span><br></pre></td></tr></table></figure>

<p>1.2、插入记录的一部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into &lt;tb_name&gt;(&lt;需要的column_list&gt;) values(&lt;对应需要的value_list&gt;);</span><br></pre></td></tr></table></figure>

<p>1.3、插入多条记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into &lt;tb_name&gt;[(&lt;column_list&gt;)] values(&lt;value_list1&gt;),(&lt;value_list2&gt;),...,(&lt;value_listn&gt;);</span><br></pre></td></tr></table></figure>

<p>1.4、插入另一个查询的结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into &lt;tb_name1&gt;(&lt;column_list1&gt;) select(&lt;column_list1&gt;) from &lt;tb_name2&gt; where(&lt;查询条件&gt;);</span><br></pre></td></tr></table></figure>

<h2 id="2、设置自动编号（注意有外键时要先取消外键）"><a href="#2、设置自动编号（注意有外键时要先取消外键）" class="headerlink" title="2、设置自动编号（注意有外键时要先取消外键）"></a>2、设置自动编号（注意有外键时要先取消外键）</h2><p>2.1、设置表的属性值自动增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &lt;tb_name&gt;(</span><br><span class="line">	&lt;字段&gt; &lt;数据类型必须是整型&gt; primary key auto_increment[&#x3D;n], --自增列的默认初始值为1，可自己设置为n</span><br><span class="line">	...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>2.2、添加已有表的自增列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; modify &lt;自增的列名&gt; &lt;数据类型&gt; auto_increment;</span><br></pre></td></tr></table></figure>

<p>2.3、修改自增列的起始值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; modify auto_increment&#x3D;n;</span><br></pre></td></tr></table></figure>

<p>2.3、删除已有表的自增列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; modify &lt;自增的列名&gt; &lt;数据类型&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="3、单表数据记录的更新（update）"><a href="#3、单表数据记录的更新（update）" class="headerlink" title="3、单表数据记录的更新（update）"></a>3、单表数据记录的更新（update）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update &lt;tb_name&gt; set &lt;column_1&gt;&#x3D;&lt;value_1&gt;,&lt;column_2&gt;&#x3D;&lt;value_2&gt;,...&lt;column_n&gt;&#x3D;&lt;value_n&gt; where &lt;条件&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="4、单表数据记录的删除（两种方式）"><a href="#4、单表数据记录的删除（两种方式）" class="headerlink" title="4、单表数据记录的删除（两种方式）"></a>4、单表数据记录的删除（两种方式）</h2><p>4.1、方式一：（delete from）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from &lt;tb_name&gt; [where&lt;条件&gt;]；</span><br></pre></td></tr></table></figure>

<p>4.2、方式二：（truncate）直接删除表，并且重新创建一个新表</p>
<p>truncate table <tb_name>;</p>
<h2 id="5、单表数据记录的查询（select）"><a href="#5、单表数据记录的查询（select）" class="headerlink" title="5、单表数据记录的查询（select）"></a>5、单表数据记录的查询（select）</h2><p>5.1、查询语句格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &lt;select_expression&gt;[,select_expression,...] from &lt;tb_name&gt; where &lt;条件&gt;；</span><br></pre></td></tr></table></figure>

<p>5.2、设置查询结果不重复（distinct）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select distinct &lt;select_expression&gt;[,select_expression,...] from &lt;tb_name&gt;;</span><br></pre></td></tr></table></figure>

<p>5.3、查询空值（is null）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from &lt;tb_name&gt; where &lt;字段&gt; is null;</span><br></pre></td></tr></table></figure>

<h2 id="6、对查询结果进行分组（group-by），一般使用聚合函数"><a href="#6、对查询结果进行分组（group-by），一般使用聚合函数" class="headerlink" title="6、对查询结果进行分组（group by），一般使用聚合函数"></a>6、对查询结果进行分组（group by），一般使用聚合函数</h2><p>6.1、创建分组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &lt;字段&gt; from &lt;tb_name&gt; group by &lt;字段&gt;;</span><br></pre></td></tr></table></figure>

<p>6.2、显示每组的情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &lt;字段&gt;,&lt;聚合函数&gt; from &lt;tb_name&gt; group by &lt;字段&gt;;</span><br></pre></td></tr></table></figure>

<p>6.3、使用having过滤分组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &lt;字段&gt; from &lt;tb_name&gt; group by &lt;字段&gt; having &lt;条件表达式，配合聚合函数使用&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="7、对查询结果进行排序（order-by）"><a href="#7、对查询结果进行排序（order-by）" class="headerlink" title="7、对查询结果进行排序（order by）"></a>7、对查询结果进行排序（order by）</h2><p>7.1、单列排序，默认升序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select  * from &lt;tb_name&gt; order by &lt;字段&gt;;</span><br></pre></td></tr></table></figure>

<p>7.2、多列排序，默认升序</p>
<p>select * from <tb_name> order by &lt;字段1&gt;,&lt;字段2&gt;，…;</p>
<p>7.3、指定排序顺序</p>
<p>升序：ASC</p>
<p>降序：DESC</p>
<h2 id="8、限制查询记录的数量（limit）"><a href="#8、限制查询记录的数量（limit）" class="headerlink" title="8、限制查询记录的数量（limit）"></a>8、限制查询记录的数量（limit）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select  * from &lt;tb_name&gt; limit [位置偏移量，第一条记录为0...,]&lt;行数&gt;;</span><br></pre></td></tr></table></figure>



<h1 id="七、运算符与函数"><a href="#七、运算符与函数" class="headerlink" title="七、运算符与函数"></a>七、运算符与函数</h1><h2 id="1、运算符"><a href="#1、运算符" class="headerlink" title="1、运算符"></a>1、运算符</h2><p>1.1、算数运算符</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200901170130.png" style="zoom:50%;" />

<p>1.2、比较运算符</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200901170338.png" style="zoom:50%;" />

<p>1.3、逻辑运算符</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200901170631.png" style="zoom:50%;" />

<h2 id="2、数值函数"><a href="#2、数值函数" class="headerlink" title="2、数值函数"></a>2、数值函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>ceil(x)</td>
<td>返回大于x的最小整数</td>
<td>select    ceil(2.5);</td>
<td>3</td>
</tr>
<tr>
<td>floor(x)</td>
<td>返回小于x的最大整数</td>
<td>select    floor(2.5);</td>
<td>2</td>
</tr>
<tr>
<td>round(x)</td>
<td>返回四舍五入的值</td>
<td>select    round(2.5);</td>
<td>3</td>
</tr>
<tr>
<td>round(x,y)</td>
<td>返回四舍五入的值，其中y表示取舍位</td>
<td>select    round(2.55,1);<br />select    round(2.55,0);<br />select    round(2.55,-1);</td>
<td>2.6<br />3<br />0</td>
</tr>
<tr>
<td>truncate(x,y)</td>
<td>截断函数，返回被舍去至小数点后y位的数字x</td>
<td>select    truncate(12.55,1);<br />select    truncate(12.55,0);<br />select    truncate(12.55,-1);</td>
<td>12.5<br />12<br />10</td>
</tr>
<tr>
<td>mod()</td>
<td>取模</td>
<td>select    mod(5,2);</td>
<td>1</td>
</tr>
</tbody></table>
<h2 id="3、字符函数（处理字符串数据）"><a href="#3、字符函数（处理字符串数据）" class="headerlink" title="3、字符函数（处理字符串数据）"></a>3、字符函数（处理字符串数据）</h2><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>concat(s1,s2,…)</td>
<td>返回连接字符串，如果其中任何一个为NULL，则返回NULL</td>
<td>select    concat(‘hello’,’mysql’);</td>
<td>hellomysql</td>
</tr>
<tr>
<td>concat_ws(x,s1,s2,…)</td>
<td>x为后面字符连接时的分隔符，x可以是字符串或其他参数，当x为NULL时返回NULL</td>
<td>select    concat_ws(‘-‘,’hello’,’mysql’);</td>
<td>hello-mysql</td>
</tr>
<tr>
<td>lower(str)</td>
<td>返回字符串小写</td>
<td>select    lower(‘HELLO’);</td>
<td>hello</td>
</tr>
<tr>
<td>upper(str)</td>
<td>返回字符串大写</td>
<td>select    upper(‘hello’);</td>
<td>HELLO</td>
</tr>
<tr>
<td>length(str)</td>
<td>返回字符串的字节长度</td>
<td>select    length(‘hello’);</td>
<td>5</td>
</tr>
<tr>
<td>ltrim(s)</td>
<td>返回字符串s，s左侧的空格字符会被删除</td>
<td></td>
<td></td>
</tr>
<tr>
<td>rtrim(s)</td>
<td>返回字符串s，s右侧的空格字符会被删除</td>
<td></td>
<td></td>
</tr>
<tr>
<td>trim(s)</td>
<td>返回字符串s，s两侧的空格字符会被删除</td>
<td></td>
<td></td>
</tr>
<tr>
<td>substring(str,n,len)</td>
<td>从字符串str的第n个位置返回一个len长度的子字符串，n为时从左，n为负时从右</td>
<td>select    substring(‘hello’,2,2);<br />select    substring(‘hello’,-2,2);</td>
<td>el<br />lo</td>
</tr>
<tr>
<td>left(s,n)</td>
<td>返回s的左边n个字符</td>
<td>select    left(‘hello’,3);</td>
<td>hel</td>
</tr>
<tr>
<td>right(s,n)</td>
<td>返回s的右边n个字符</td>
<td>select    right(‘hello’,3);</td>
<td>llo</td>
</tr>
<tr>
<td>replace(str,from_str,to_str)</td>
<td>替换</td>
<td>select    replace(‘hello’,’ll’,’oo’);</td>
<td>heooo</td>
</tr>
<tr>
<td>format(x,n)</td>
<td>格式化数字x，再四舍五入保留至小数点后n位，最后以字符串的形式返回</td>
<td>select    format(123.123,1);</td>
<td>123.1</td>
</tr>
</tbody></table>
<h2 id="4、日期时间函数（处理日期和时间值）"><a href="#4、日期时间函数（处理日期和时间值）" class="headerlink" title="4、日期时间函数（处理日期和时间值）"></a>4、日期时间函数（处理日期和时间值）</h2><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>curdate()<br />current_date()</td>
<td>返回’YYYY-MM-DD’或’YYYYMMDD’格式的值</td>
<td>select    curdate();</td>
<td>2020-09-01</td>
</tr>
<tr>
<td>curtime()<br />current_time()</td>
<td>返回’HH:MM:SSS’或’HHMMSS’格式的值</td>
<td>select    curtime();</td>
<td>18:13:55</td>
</tr>
<tr>
<td>now()<br />sysdate()</td>
<td>返回’YYYY-MM-DD HH:MM:SSS’或’YYYYMMDDHHMMSS’格式的值</td>
<td>select    now();</td>
<td>2020-09-01 18:15:34</td>
</tr>
<tr>
<td>date_add(date,interval expr type)</td>
<td>日期的加运算。data指定起始日期，expr指定间隔值，type关键字：year、month、day、week、hour等</td>
<td>select    date_add(‘2020-01-01’,interval 9 month);</td>
<td>2020-10-01</td>
</tr>
<tr>
<td>datediff(date1,date2)</td>
<td>返回间隔时间（天数）</td>
<td>select    datediff(‘2020-1-1’,’2020-2-1’);</td>
<td>-31</td>
</tr>
<tr>
<td>date_format(date,format)</td>
<td>日期格式化。<br />%b：月份的英文缩写；<br />%c：月份的数字形式（0…12）；<br />%m：月份的数字形式（00…12）；<br />%M：月份的英文全称；<br />%d：每月日期的数字形式（00…31）；<br />%e：每月日期的数字形式（0…31）；<br />%Y：四位数形式表示年份；<br />%y：两位数形式表示年份</td>
<td>select    date_format(‘2020-10-1’,’%Y%M%d’);</td>
<td>2020October01</td>
</tr>
</tbody></table>
<h2 id="5、聚合函数（不需要返回数据，只用于数据分析）"><a href="#5、聚合函数（不需要返回数据，只用于数据分析）" class="headerlink" title="5、聚合函数（不需要返回数据，只用于数据分析）"></a>5、聚合函数（不需要返回数据，只用于数据分析）</h2><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200901183752.png" style="zoom:50%;" />



<h2 id="6、信息函数和加密函数"><a href="#6、信息函数和加密函数" class="headerlink" title="6、信息函数和加密函数"></a>6、信息函数和加密函数</h2><p>6.1、信息函数（服务器数据）</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>version()</td>
<td>返回当前MySQL服务器的版本号</td>
<td>select    version();</td>
<td>8.0.20</td>
</tr>
<tr>
<td>connection_id()</td>
<td>返回MySQL服务器连接的次数，每个连都有各自的ID</td>
<td>select    connection_id();</td>
<td>29</td>
</tr>
<tr>
<td>database()<br />schema()</td>
<td>返回当前的数据库名</td>
<td>select    database();</td>
<td>book</td>
</tr>
<tr>
<td>user()</td>
<td>返回当前的用户名</td>
<td>select    user();</td>
<td>root@localhost</td>
</tr>
</tbody></table>
<p>6.2、加密函数（对数据进行加密和界面处理，保证数据安全）</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>md5(str)</td>
<td>信息摘要算法。加密后以32位十六进制数字的二进制字符串形式返回，参数为null时返回null</td>
<td>select    md5(‘zhao’);</td>
<td>77e6789426d131e4d862ecac4c7d0c5d</td>
</tr>
<tr>
<td>password(str)</td>
<td>密码算法。返回加密后的字符串，参数为null时返回null</td>
<td>select    password(‘zhao’);</td>
<td>mysql5.7之后的版本已经废弃了passwrod函数</td>
</tr>
</tbody></table>
<h1 id="八、子查询"><a href="#八、子查询" class="headerlink" title="八、子查询"></a>八、子查询</h1><h2 id="1、使用比较运算符"><a href="#1、使用比较运算符" class="headerlink" title="1、使用比较运算符"></a>1、使用比较运算符</h2><p>1.1、any、some</p>
<p>1.2、all</p>
<h2 id="2、使用-not-in或exists的子查询"><a href="#2、使用-not-in或exists的子查询" class="headerlink" title="2、使用[not] in或exists的子查询"></a>2、使用[not] in或exists的子查询</h2><h2 id="3、插入记录时使用子查询"><a href="#3、插入记录时使用子查询" class="headerlink" title="3、插入记录时使用子查询"></a>3、插入记录时使用子查询</h2><h1 id="九、多表连接查询（两张表以上，建议不超过三张）"><a href="#九、多表连接查询（两张表以上，建议不超过三张）" class="headerlink" title="九、多表连接查询（两张表以上，建议不超过三张）"></a>九、多表连接查询（两张表以上，建议不超过三张）</h1><h2 id="1、内连接（inner-join-on）"><a href="#1、内连接（inner-join-on）" class="headerlink" title="1、内连接（inner join on）"></a>1、内连接（inner join on）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &lt;column_list&gt; from &lt;tb_name1&gt; </span><br><span class="line">[inner] join &lt;tb_name2&gt; on &lt;tb_name1.column_name1&#x3D;tb_name2.column_name1&gt; </span><br><span class="line">[inner] join &lt;tb_name3&gt; on &lt;tb_name1.column_name2&#x3D;tb_name3.column_name2&gt; </span><br><span class="line">...</span><br><span class="line">where &lt;条件&gt;;</span><br></pre></td></tr></table></figure>

<p>起别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &lt;column_list&gt; from &lt;tb_name1&gt; t1</span><br><span class="line">[inner] join &lt;tb_name2&gt; t2 on &lt;t1.column_name1&#x3D;t2.column_name1&gt; </span><br><span class="line">[inner] join &lt;tb_name3&gt; t3 on &lt;t1.column_name2&#x3D;t3.column_name2&gt; </span><br><span class="line">...</span><br><span class="line">where &lt;条件&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="2、外连接"><a href="#2、外连接" class="headerlink" title="2、外连接"></a>2、外连接</h2><p>2.1、左外连接（查询左表全部记录，右表满足条件的记录）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &lt;column_list&gt; from &lt;tb_name1&gt; t1</span><br><span class="line">left [outer] join &lt;tb_name2&gt; t2 on &lt;t1.column_name1&#x3D;t2.column_name1&gt; </span><br><span class="line">where &lt;条件&gt;;</span><br></pre></td></tr></table></figure>

<p>2.2、右外连接（查询右表全部记录，左表满足条件的记录）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &lt;column_list&gt; from &lt;tb_name1&gt; t1</span><br><span class="line">right [outer] join &lt;tb_name2&gt; t2 on &lt;t1.column_name1&#x3D;t2.column_name1&gt; </span><br><span class="line">where &lt;条件&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="3、自连接（处理逻辑上的两张表，在物理实际为一张表的情况）"><a href="#3、自连接（处理逻辑上的两张表，在物理实际为一张表的情况）" class="headerlink" title="3、自连接（处理逻辑上的两张表，在物理实际为一张表的情况）"></a>3、自连接（处理逻辑上的两张表，在物理实际为一张表的情况）</h2><h2 id="4、多表更新"><a href="#4、多表更新" class="headerlink" title="4、多表更新"></a>4、多表更新</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update &lt;tb_name1&gt; [inner] join &lt;tb_name2&gt; </span><br><span class="line">on &lt;t1.column_name1&#x3D;t2.column_name1&gt;  </span><br><span class="line">set  &lt;column_list&gt;&#x3D;&lt;column_value&gt;</span><br><span class="line">where &lt;条件&gt;；</span><br></pre></td></tr></table></figure>

<h2 id="5、多表删除"><a href="#5、多表删除" class="headerlink" title="5、多表删除"></a>5、多表删除</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete &lt;tb_name1&gt;[.column_list1],&lt;tb_name2&gt;[.column_list2]</span><br><span class="line">from &lt;tb_name1&gt; [inner] join &lt;tb_name2&gt;</span><br><span class="line">on &lt;t1.column_name1&#x3D;t2.column_name1&gt; </span><br><span class="line">where &lt;条件&gt;；</span><br></pre></td></tr></table></figure>

<h1 id="十、自定义函数"><a href="#十、自定义函数" class="headerlink" title="十、自定义函数"></a>十、自定义函数</h1><h2 id="1、创建函数"><a href="#1、创建函数" class="headerlink" title="1、创建函数"></a>1、创建函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">create function function_name([function_parameter])</span><br><span class="line">returns &lt;data_type&gt;</span><br><span class="line">[characteristics]</span><br><span class="line">begin</span><br><span class="line">&lt;routine_body&gt;</span><br><span class="line">end&#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br><span class="line">--其中MySQL默认不允许自定义函数，要做以下配置</span><br><span class="line">SET GLOBAL log_bin_trust_function_creators &#x3D; 1;</span><br></pre></td></tr></table></figure>

<h2 id="2、删除自定义函数"><a href="#2、删除自定义函数" class="headerlink" title="2、删除自定义函数"></a>2、删除自定义函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop function [if exists] &lt;function_name&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="3、流程控制使用"><a href="#3、流程控制使用" class="headerlink" title="3、流程控制使用"></a>3、流程控制使用</h2><p>3.1、变量</p>
<p>在存储程序中（包括存储过程和函数）使用的变量的作用范围在begin和end之间</p>
<p>3.2、变量的定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare &lt;var_name[,var_name1...]&gt; &lt;date_type&gt; [default &lt;var_value&gt;];</span><br></pre></td></tr></table></figure>

<p>3.3、变量赋值<br>方式一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set &lt;var_name&gt;&#x3D;&lt;var_value&gt;[,&lt;var_name1&gt;&#x3D;&lt;var_value1&gt;,...];</span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &lt;column_name&gt;[,...] into &lt;var_name&gt;[,...] tb_expr;</span><br></pre></td></tr></table></figure>

<p>3.4、if语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if &lt;条件&gt; then</span><br><span class="line">...</span><br><span class="line">elseif &lt;条件&gt; then</span><br><span class="line">...</span><br><span class="line">else</span><br><span class="line">...</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure>

<p>3.5、case语句</p>
<p>格式一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case &lt;case_expr&gt;</span><br><span class="line">	when when_value then statement_list</span><br><span class="line">	[when when_value1 then statement_list1]</span><br><span class="line">	...</span><br><span class="line">	[else statement_list2]</span><br><span class="line">end case;</span><br></pre></td></tr></table></figure>

<p>格式二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case </span><br><span class="line">	when &lt;expr_condition&gt; then statement_list</span><br><span class="line">	[when &lt;expr_condition&gt; then statement_list1]</span><br><span class="line">	...</span><br><span class="line">	[else statement_list2]</span><br><span class="line">end case;</span><br></pre></td></tr></table></figure>

<p>3.6、while语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[while_label:]while &lt;condition&gt; do</span><br><span class="line">...</span><br><span class="line">end while[while_label];</span><br></pre></td></tr></table></figure>

<p>3.7、loop语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[loop_label:]loop</span><br><span class="line">...</span><br><span class="line">end loop[loop_label];</span><br></pre></td></tr></table></figure>

<p>leave语句（跳出循环）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">leave label</span><br></pre></td></tr></table></figure>

<p>3.8、repeat语句（该语句执行一次循环后判断条件为真则跳出循环，为假继续执行循环体）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[repeat_label:]repeat</span><br><span class="line">...</span><br><span class="line">until &lt;expr_condition&gt;</span><br><span class="line">end repeat [repeat_label];</span><br></pre></td></tr></table></figure>

<h1 id="十一、存储过程"><a href="#十一、存储过程" class="headerlink" title="十一、存储过程"></a>十一、存储过程</h1><h2 id="1、存储过程是SQL语句和流程控制语句的预编译集合，并以一个名称存储作为一个单元进行处理"><a href="#1、存储过程是SQL语句和流程控制语句的预编译集合，并以一个名称存储作为一个单元进行处理" class="headerlink" title="1、存储过程是SQL语句和流程控制语句的预编译集合，并以一个名称存储作为一个单元进行处理"></a>1、存储过程是SQL语句和流程控制语句的预编译集合，并以一个名称存储作为一个单元进行处理</h2><h2 id="2、创建存储过程"><a href="#2、创建存储过程" class="headerlink" title="2、创建存储过程"></a>2、创建存储过程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">create procedure proc_name([IN|OUT|INOUT] &lt;param_list&gt; &lt;data_type&gt;)</span><br><span class="line">[characteristics]</span><br><span class="line">begin</span><br><span class="line">routine_body</span><br><span class="line">end&#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<p>IN：表示该参数的值必须在调用存储过程是指定</p>
<p>OUT：表示该参数的值可以被存储过程改变，并且可以返回</p>
<p>INOUT：表示该参数必须在调用时指定，并且可以被改变和返回</p>
<h2 id="3、调用存储过程"><a href="#3、调用存储过程" class="headerlink" title="3、调用存储过程"></a>3、调用存储过程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call &lt;proc_name([parameter_list])&gt;;</span><br></pre></td></tr></table></figure>

<p>parameter_list有输出时用@parameter_name存储数据，然后select @parameter_name查看</p>
<p>parameter_list有输入时用set @parameter_name=value，然后把@parameter_name传入存储过程，方便select</p>
<h2 id="4、删除存储过程"><a href="#4、删除存储过程" class="headerlink" title="4、删除存储过程"></a>4、删除存储过程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop procedure [if exists] proc_name;</span><br></pre></td></tr></table></figure>

<h2 id="5、创建复合结构的存储过程"><a href="#5、创建复合结构的存储过程" class="headerlink" title="5、创建复合结构的存储过程"></a>5、创建复合结构的存储过程</h2><h1 id="十二、事务"><a href="#十二、事务" class="headerlink" title="十二、事务"></a>十二、事务</h1><h2 id="1、事务必须满足以下条件"><a href="#1、事务必须满足以下条件" class="headerlink" title="1、事务必须满足以下条件"></a>1、事务必须满足以下条件</h2><p>1.1、Atomicity（原子性）：要么全部执行，要么不执行</p>
<p>1.2、Consistency（一致性）</p>
<p>1.3、Islation（隔离性）</p>
<p>1.4、Durabilty（持久性）</p>
<h2 id="2、控制事务处理"><a href="#2、控制事务处理" class="headerlink" title="2、控制事务处理"></a>2、控制事务处理</h2><p>2.1、</p>
<blockquote>
<p> rollback：回滚会结束用户的事务，并撤销正在进行的所有未提交的修改</p>
<p>commit：提交事务，持久性，即永久性修改</p>
<p>savepoint point_name：在事务中创建保存点，可以有多个</p>
<p>rollback to point_name：回滚事务到保存点</p>
</blockquote>
<p>2.2、事务处理有两种方式：</p>
<p>方式一：用begin、rollback、commit配合处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">begin或start transaction开始一个事务</span><br><span class="line"></span><br><span class="line">rollback事务回滚</span><br><span class="line"></span><br><span class="line">commit事务提交</span><br></pre></td></tr></table></figure>

<p>方式二：用set修改自动提交模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set autocommit&#x3D;0 禁止自动提交</span><br><span class="line"></span><br><span class="line">set autocommit&#x3D;0 开启自动提交</span><br></pre></td></tr></table></figure>

<h2 id="3、通过InnoDB使用事务"><a href="#3、通过InnoDB使用事务" class="headerlink" title="3、通过InnoDB使用事务"></a>3、通过InnoDB使用事务</h2><h1 id="十三、存储引擎"><a href="#十三、存储引擎" class="headerlink" title="十三、存储引擎"></a>十三、存储引擎</h1><h2 id="1、存储引擎"><a href="#1、存储引擎" class="headerlink" title="1、存储引擎"></a>1、存储引擎</h2><p>3.1、存储引擎是数据库底层软件组件，DBMS使用引擎进行数据的查询、更新、删除等操作，DBMS的核心就是存储引擎。</p>
<p>3.2、查看存储引擎：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show engines;</span><br><span class="line">或</span><br><span class="line">show variables like &#39;%storage_engine%&#39; ;</span><br></pre></td></tr></table></figure>

<p>3.3、InnoDB</p>
<p>①提供了具有提交、回滚、崩溃恢复能力的事务安全存储</p>
<p>②能高性能处理大量数据</p>
<p>③支持外键完整性约束</p>
<p>3.4、MyISAM</p>
<p>①具有较高的插入、查询速度，但是不支持事务</p>
<p>3.5、MEMORY</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200901225353.png" style="zoom:50%;" />

<h2 id="2、存储引擎的设置"><a href="#2、存储引擎的设置" class="headerlink" title="2、存储引擎的设置"></a>2、存储引擎的设置</h2><p>2.1、设置<code>服务器的存储引擎</code></p>
<p>①修改配置文件my.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default-storage-engine&#x3D;INNODB</span><br></pre></td></tr></table></figure>

<p>2.2、设置客户端的存储引擎</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set default-storage-engine&#x3D;INNODB</span><br></pre></td></tr></table></figure>

<p>2.3、设置表的存储引擎，</p>
<p>方式一：在创建时设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &lt;tb_name&gt;(</span><br><span class="line">	...</span><br><span class="line">)engine&#x3D;InnoDB default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<p>方式二：修改已有表的存储引擎</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;tb_name&gt; engine&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>

<h1 id="十四、数据库的管理维护"><a href="#十四、数据库的管理维护" class="headerlink" title="十四、数据库的管理维护"></a>十四、数据库的管理维护</h1><h2 id="1、数据库的用户管理"><a href="#1、数据库的用户管理" class="headerlink" title="1、数据库的用户管理"></a>1、数据库的用户管理</h2><p>1.1、权限表</p>
<p>①MySQL通过权限表控制用户对数据库的访问，权限表位置：mysql数据库</p>
<p>②存储用户的权限表有：user、db、host、tables_priv、columns_priv、procs_priv</p>
<p>1.2、创建用户</p>
<p>①方式一：（create user）该方法创建的用户没有权限，还要用grant语句赋予用户权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &lt;&#39;user_name&#39;&gt;@&lt;&#39;host_name&#39;&gt; [identified by &lt;&#39;password&#39;&gt;];</span><br><span class="line"></span><br><span class="line">查看</span><br><span class="line">select user,host from mysql.user;</span><br></pre></td></tr></table></figure>

<p>②方式二：（grant）该方法可以为创建的用户赋予权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant &lt;privilege_type&gt; on &lt;db_name&gt; to &lt;&#39;user_name&#39;&gt;@&lt;&#39;host_name&#39;&gt;;</span><br></pre></td></tr></table></figure>

<p>1.3、删除用户</p>
<p>方式一：（drop user）可以同时删除多个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop user &lt;&#39;user_name&#39;&gt;@&lt;&#39;host_name&#39;&gt;;</span><br></pre></td></tr></table></figure>

<p>方式二：（delete）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from mysql.user where host&#x3D;&#39;host_name&#39; and user&#x3D;&#39;user_name&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="2、数据库用户权限管理"><a href="#2、数据库用户权限管理" class="headerlink" title="2、数据库用户权限管理"></a>2、数据库用户权限管理</h2><p>2.1、权限管理对登录到mysql的用户进行权限验证，并且赋予用户在数据库上的各种操作权限。用户权限存储在权限表里。</p>
<p>2.2、grant语句授权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant &lt;privilege_type&gt; on &lt;db_name&gt; to &lt;&#39;user_name&#39;&gt;@&lt;&#39;host_name&#39;&gt;;</span><br><span class="line">flush privileges;--刷新</span><br></pre></td></tr></table></figure>

<p> <privilege_type>：select、update、delete等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to &lt;&#39;user_name&#39;&gt;@&lt;&#39;host_name&#39;&gt;;--为用户授予所有权限</span><br></pre></td></tr></table></figure>

<p>2.3、查看用户的权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show grants for &lt;&#39;user_name&#39;&gt;@&lt;&#39;host_name&#39;&gt;;</span><br></pre></td></tr></table></figure>

<p>2.4、收回权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revoke &lt;privilege_name&gt; on &lt;db_name&gt; to &lt;&#39;user_name&#39;&gt;@&lt;&#39;host_name&#39;&gt;;</span><br></pre></td></tr></table></figure>



<h2 id="3、数据库的日志管理"><a href="#3、数据库的日志管理" class="headerlink" title="3、数据库的日志管理"></a>3、数据库的日志管理</h2><p>3.1、日志分类</p>
<p>①错误日志：默认开启，记录mysql服务的启动、运行或停止时的问题</p>
<p>②查询日志：记录了mysql的所有用户操作，包括启动和关闭服务、执行查询和更新语句等</p>
<p>③二进制日志：记录了所有更改数据的语句</p>
<p>④慢查询日志：记录所有执行时间超过long_query_time的所有查询或不使用索引的查询</p>
<p>3.2、错误日志</p>
<p>①默认情况下，错误日志会记录在数据目录下，文件名默认为hostname.err</p>
<p>②可通过my.ini的log-error来配置错误日志的启动和停止以及文件名</p>
<p>③自定义错误日志文件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log-error&#x3D;&quot;NAPS.err&quot;</span><br></pre></td></tr></table></figure>

<p>④查看错误日志存储路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like&#39;log_error&#39;;</span><br></pre></td></tr></table></figure>

<p>⑤删除错误日志，可直接删除<br>⑥删除后重建错误日志，若存在不做日志备份和创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p flush-logs</span><br><span class="line"></span><br><span class="line">或者在登录后使用</span><br><span class="line">flush logs;</span><br></pre></td></tr></table></figure>



<h2 id="4、数据库的备份和恢复"><a href="#4、数据库的备份和恢复" class="headerlink" title="4、数据库的备份和恢复"></a>4、数据库的备份和恢复</h2><p>4.1、备份（mysqldump）：在未登录时</p>
<p>4.2、恢复</p>
<p>方式一：在未登录服务器时（mysql）</p>
<p>方式二：在已经登录了服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5、数据导出"><a href="#5、数据导出" class="headerlink" title="5、数据导出"></a>5、数据导出</h2><p>5.1、方式一：在登录到服务器时</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200902002951.png" style="zoom:50%;" />

<p>‘filename’路径名在my.ini配置文件中查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">secure-file-priv&#x3D;&quot;C:&#x2F;ProgramData&#x2F;MySQL&#x2F;MySQL Server 8.0&#x2F;Uploads&quot;--默认</span><br><span class="line">secure-file-priv&#x3D;NULL ——禁止导出</span><br><span class="line">secure-file-priv&#x3D;&quot;&quot; --不限制路径，可以自定义</span><br></pre></td></tr></table></figure>

<p>5.2、方式二：在未登录到服务器时</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200902003814.png" style="zoom:50%;" />

<p>注意路径中有空格用双引号</p>
<p>5.3、方式三：未登录到服务器时</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200902004130.png" style="zoom:50%;" />

<h2 id="6、数据导入"><a href="#6、数据导入" class="headerlink" title="6、数据导入"></a>6、数据导入</h2><p>6.1、登录</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200902004420.png" style="zoom:50%;" />

<p>6.2方式二：未登录</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200902004643.png" style="zoom:50%;" />]]></content>
      <tags>
        <tag>MySql</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2020/08/31/SpringBoot/</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831082609.png"></p>
<a id="more"></a>

<p>1.微服务：一个项目 可以由多个 小型服务构成（微服务）<br>2.spring boot可以快速开发 微服务模块<br>    a.简化j2ee开发<br>    b.整合spring技术栈的整合（整合springmvc  spring）<br>    c.整合j2ee技术的整合（整合mybatis redis）</p>
<p>3、准备：<br>jdk:<br>    JAVA_HOME： jdk根目录<br>    path:jdk根目录\bin<br>    classpath: .;jdk根目录\lib<br>maven:<br>    MAVEN_HOME： maven根目录<br>    path: maven根目录\bin<br>    配置Maven本地仓库：  mvn根目录/conf/setting.xml : <localRepository>D:/mvnrep</localRepository><br>    在IDE中配置mvn：<br>        window-&gt;preference-&gt;搜maven ,installations/user settings</p>
<p>4、spring boot开发工具：<br>    Eclipse(STS插件)<br>    IntelliJ IDEA</p>
<p>5、目录结构resources：<br>    static:静态资源（js css 图片 音频 视频）<br>    templates：模板文件（模版引擎freemarker ,thymeleaf；默认不支持jsp）<br>    application.properties： 配置文件</p>
<p>6、spring boot内置了tomcat，并且不需要打成war再执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class DemoHandler &#123;</span><br><span class="line">	@ResponseBody</span><br><span class="line">	@RequestMapping(&quot;pring&quot;)</span><br><span class="line">	public String print() &#123;</span><br><span class="line">		return &quot;直接显示，不需要配置Tomcat&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接运行DemoApplication.java，在浏览器输入以下地址可以看到：</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831094007.png"></p>
<p>可以在appication.properties对端口号等服务端信息进行配置，其他修改端口的方法放在附录一。</p>
<h1 id="二、各板块说明"><a href="#二、各板块说明" class="headerlink" title="二、各板块说明"></a>二、各板块说明</h1><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><p>1.1、spring boot将各个应用/三方框架 设置成了一个个“场景”stater，<br> 以后要用哪个，只需要引入那个场景即可。<br>选完之后，spring boot就会将 该场景所需要的所有依赖 自动注入。<br>例如 选择 “web”,spring boot就会将web相关的依赖（tomcat  json） 全部引入本项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2、-SpringBootApplication注解自动配置"><a href="#2、-SpringBootApplication注解自动配置" class="headerlink" title="2、@SpringBootApplication注解自动配置"></a>2、@SpringBootApplication注解自动配置</h2><p>2.1、该注解是spring boot的主配置类，包含：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@SpringBootConfiguration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(excludeFilters &#x3D; &#123; @Filter(type &#x3D; FilterType.CUSTOM, classes &#x3D; TypeExcludeFilter.class),</span><br><span class="line">		@Filter(type &#x3D; FilterType.CUSTOM, classes &#x3D; AutoConfigurationExcludeFilter.class) &#125;)</span><br></pre></td></tr></table></figure>

<p>2.2、其中@SpringBootConfiguration，用于<code>导入自己写的配置</code>。又包含了@Configuration，被该注解表示的类表示<code>“配置类”</code>,即：                                </p>
<p>①该类是一个配置类    </p>
<p>②加了@Configuration注解的类，会自动纳入Spring 容器  （相当于spring的@Component）</p>
<p>2.3、其中@EnableAutoConfiguration，用于自动配置 <code>三方依赖</code>：</p>
<p>①可以找到@SpringBootApplication所在类的包 ，作用：就会将该包及所有的子包 全部纳入spring容器</p>
<p>②spring boot在启动时，会根据spring-boot-autoconfigure-2.3.3.RELEASE.jar/META-INF/spring.factories找到相应的三方依赖，并通过@EnableAutoConfiguration将这些依赖引入本项目</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831104831.png"></p>
<p>2.4、<code>spring-boot-autoconfigure-2.0.3.RELEASE.jar</code>包中 包含了 J2EE整合体系中 需要的依赖，既提供了类，也提供了配置（spring.factories）</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831110037.png" style="zoom: 33%;" />



<p>2.5、自动装配：</p>
<p>①通过<code>spring.factories</code>和<code>spring-boot-autoconfigure-2.0.3.RELEASE.jar</code>进入要查看的类，如：org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration</p>
<p>②当该类满足以下三个条件时才会装配：</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831112738.png" style="zoom:50%;" />

<p>②在此类中有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ConditionalOnProperty(prefix &#x3D; &quot;server.servlet.encoding&quot;, value &#x3D; &quot;enabled&quot;, matchIfMissing &#x3D; true)</span><br><span class="line">当属性满足要求时，此条件成立  ：要求 如果没有配置spring.http.encoding.enabled&#x3D;xxx, 则成立。</span><br></pre></td></tr></table></figure>

<p>此外可以通过前缀可在配置文件中对属性进行修改。</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831111938.png" style="zoom:50%;" />



<p>③在全局配置文件src/main/resources/application.properties中配置：</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831112300.png" style="zoom:50%;" />

<p>2.6、快速查看自动装配的类：在全局配置文件application.properties中添加debug=true<br>        Positive matches列表 表示 spring boot自动开启的装配</p>
<p>​        Negative matches列表 表示spring boot在此时 并没有启用的自动装配</p>
<p>​        Exclusions列表表示排除的自动装配</p>
<p>​        Unconditional classes列表表示不满足条件的自动装配</p>
<h2 id="3、全局配置文件"><a href="#3、全局配置文件" class="headerlink" title="3、全局配置文件"></a>3、全局配置文件</h2><p>3.1、全局配置文件可以对SpringBootd的默认配置进行修改。</p>
<p>3.2、src/main/resources/application.properties</p>
<p>①key=value</p>
<p>3.3、application.yml</p>
<p>①yaml ain’t myarkup language ，不是一个标记文档</p>
<p>②k:空格v</p>
<p>③通过垂直对齐指定层次关系</p>
<p>④默认可以不写引号； “”会将其中的转义符进行转义，其他不会</p>
<p>⑤集合（除Map）、数组用<code>[]</code>，可以省略；Map、引用用<code>&#123;&#125;</code>，不可省略</p>
<p>3.4、通过.yml配置文件给对象的属性注入值</p>
<p>①在yaml文件中添加值：</p>
<p>②绑定：</p>
<p>方式一：@ConfigurationProperties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component &#x2F;&#x2F;加入容器</span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;student&quot;)&#x2F;&#x2F;与.yml配置文件产生关联</span><br><span class="line">public class Student &#123;</span><br><span class="line">……&#125;</span><br></pre></td></tr></table></figure>

<p>方式二：@Value(“XXX”)，单个注入</p>
<table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>注值</td>
<td>批量注入</td>
<td>单个注入</td>
</tr>
<tr>
<td>松散语法</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SqEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验<br />（@Validated开启数据检验）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型的注入<br />（简单类型：8+String+Date）</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>3.5、@PropertySource(value={“classpath:conf.properties”})可以设置自定义文件名的<code>.properties</code>文件，但是不能加载yml</p>
<h2 id="4、全局配置文件的位置"><a href="#4、全局配置文件的位置" class="headerlink" title="4、全局配置文件的位置"></a>4、全局配置文件的位置</h2><p>4.1、properties和yml中的配置，相互补充；如果冲突，则properties优先级高。<br>4.2、spring boot默认能够读取的application.properties/application.yml，这2个文件 可以存在于以下4个地方：</p>
<blockquote>
<p>file:项目根目录/config         application.properties<br>file:项目根目录            application.properties<br>classpath:项目根目录/config    application.properties<br>classpath:项目根目录        application.properties        </p>
</blockquote>
<p>a.如果某项配置冲突，则优先级从上往下<br>b.如果不冲突，则互补结合使用</p>
<p>4.3、配置文件也可以项目从外部引入：如果 同一个配置同时存在于内部配置文件和外部配置文件，则外部&gt;内部</p>
<p>①配置项目名：在properties文件中配置，此时可以在浏览器中输入<code>http://localhost:8888/boot/映射名</code>访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.servlet.context-path&#x3D;&#x2F;boot</span><br></pre></td></tr></table></figure>

<p>②如果在外部有一个配置文件application.properties配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.servlet.context-path&#x3D;&#x2F;XXXboot</span><br></pre></td></tr></table></figure>

<p>方式一：<code>Run Configurations</code>中的参数项添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--spring.config.location&#x3D;D:&#x2F;application.properties</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831154505.png" style="zoom:50%;" />

<p>方式二：通过命令行调用外部配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar  项目.jar  --spring.config.location&#x3D;D:&#x2F;application.properties</span><br></pre></td></tr></table></figure>

<p>4.4、项目运行参数的更改（适合少量参数的更改）</p>
<p>方式一：<code>Run Configurations</code>中的参数项添加，多个用空格隔开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--server.port&#x3D;8883</span><br></pre></td></tr></table></figure>

<p>方式二：通过命令行调用外部配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar  项目.jar  --server.port&#x3D;8883</span><br></pre></td></tr></table></figure>

<p>4.5、优先级：<br>命令参数（调用外部的配置文件 &gt; 运行参数 ）&gt;内部文件 (properties&gt;yaml)</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#boot-features-external-config">官方文档</a></p>
<h2 id="5、自已配置spring的IOC容器"><a href="#5、自已配置spring的IOC容器" class="headerlink" title="5、自已配置spring的IOC容器"></a>5、自已配置spring的IOC容器</h2><p>5.1、方式一：编写XXX.xml文件+@ImportResource</p>
<p>spring boot自动装配默认不识别spring等配置文件，如果需要识别自己编写的spring等配置文件，则需要在spring boot主配置类@SpringBootApplication上通过@ImportResource（locations={“classpath:XXX”}）指定配置文件的路径</p>
<p>5.2、方式二：配置类（@Configuration）+注解（@Bean）</p>
<p>配置类的方法名==XXX.xml中的id</p>
<h2 id="6、全局配置文件占位符表达式"><a href="#6、全局配置文件占位符表达式" class="headerlink" title="6、全局配置文件占位符表达式"></a>6、全局配置文件占位符表达式</h2><p>6.1、随机数</p>
<table>
<thead>
<tr>
<th>${random.uuid}</th>
<th>UUID</th>
</tr>
</thead>
<tbody><tr>
<td>${random.value}</td>
<td>随机字符串</td>
</tr>
<tr>
<td>${random.int}</td>
<td>随机整数</td>
</tr>
<tr>
<td>${random.long}</td>
<td>随机长整数</td>
</tr>
<tr>
<td>${random.int(10)}</td>
<td>10以内的整数</td>
</tr>
<tr>
<td>${random.int[100,200]}</td>
<td>指定范围</td>
</tr>
</tbody></table>
<p>6.2、相互引用变量值     </p>
<pre><code>yml中：
    student:
          name: $&#123;student.user.name&#125;
实际引用的是properties中的student.user.name=XXX</code></pre>
<p>6.3、设置默认值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">student:</span><br><span class="line"> 		name: $&#123;student.user.name2: 默认值&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7、全局配置文件配置环境切换"><a href="#7、全局配置文件配置环境切换" class="headerlink" title="7、全局配置文件配置环境切换"></a>7、全局配置文件配置环境切换</h2><p>7.1、方法一：application.properties</p>
<p>①创建开发环境的配置文件：</p>
<p>src/main/resources/application-dev.properties</p>
<p>src/main/resources/application-test.properties</p>
<p>②在主配置文件src/main/resources/application.properties中配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.profiles.active&#x3D;dev</span><br><span class="line">或</span><br><span class="line">spring.profiles.active&#x3D;test</span><br></pre></td></tr></table></figure>

<p>7.2、方法二：通过yaml文件配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8888</span><br><span class="line">spring:</span><br><span class="line">  profiles: </span><br><span class="line">    active: dev 选择环境</span><br><span class="line">---</span><br><span class="line">server: </span><br><span class="line">  port: 8887</span><br><span class="line">spring:</span><br><span class="line">  profiles: dev</span><br><span class="line">---</span><br><span class="line">server: </span><br><span class="line">  port: 8885</span><br><span class="line">spring:  </span><br><span class="line">  profiles: test</span><br></pre></td></tr></table></figure>

<p>使用方式二注意点：spring boot会读取其他appilcation-环境名.properties中的配置，并且properties的优先级高于yml，所以要在yaml文件中切换环境时要完全注释appilcation中关于环境切换的代码。</p>
<p>7.3、方法三：动态切换</p>
<p>①动态切换一：在编译器中（STS）在<code>Run Configurations</code>中设定：（二选一）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--spring.profiles.active&#x3D;环境名</span><br><span class="line">或</span><br><span class="line">-Dspring.profiles.active&#x3D;环境名</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831150003.png" style="zoom:50%;" />

<p>②动态切换一：命令行方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar 项目名.jar --spring.profiles.active&#x3D;环境名</span><br></pre></td></tr></table></figure>

<h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1><p>8.1、spring boot默认选用的日志框架是<code>slf4j</code>、<code>logback</code>,并且默认帮我们配置好了日志。其他：UCL、JUL、jboss-logging、log4j、log4j2……</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831160252.png" style="zoom: 33%;" />

<p>8.2、日志级别：</p>
<p>①TRACE&lt; DEBUG&lt; INFO&lt;WARN&lt; ERROR&lt; FATAL&lt;OFF</p>
<p>②springboot默认的日志级别是info（即只打印info及之后级别的信息）</p>
<p>③自定义级别，在配置文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logging.level.com.com.example.demo&#x3D;warn</span><br><span class="line">&#x2F;&#x2F;logging.level.主配置类所在包&#x3D;级别</span><br></pre></td></tr></table></figure>

<p>④日志存储</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logging.file&#x3D;springboot.log &#x2F;&#x2F;存储到了项目的根目录中的springboot.log</span><br><span class="line">logging.file&#x3D;D:&#x2F;springboot.log &#x2F;&#x2F;指定具体的日志路径</span><br><span class="line">logging.path&#x3D;D:&#x2F;log&#x2F;   &#x2F;&#x2F;指定具体的日志文件夹，默认的文件名是spring.log</span><br></pre></td></tr></table></figure>

<p>⑤自定义日志显示格式</p>
<p>a、控制台：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logging.pattern.console&#x3D;%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure>

<p>​                    %d:日期时间<br>​                    %thread：线程名<br>​                    %-5level： 显示日志级别,-5表示从左显示5个字符宽度<br>​                    %logger{50} :设置日志长度  ，超过则显示首字母o.s.w.s.m.m.a.</p>
<p>%msg：日志消息<br>                %n ：回车<br>b、日志显示在文件中    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logging.pattern.file&#x3D;%d&#123;yyyy-MM-dd&#125; ** [%thread] ** %-5level ** %logger&#123;50&#125;** %msg%n</span><br></pre></td></tr></table></figure>

<p>默认的日志格式，是在 jar包中 相应包的xml文件中进行配置。</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831163812.png" style="zoom: 33%;" />



<p><a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#boot-features-custom-log-levels">官方文档</a></p>
<h1 id="四、SpringBoot开发Web项目（静态资源-html-css-js）"><a href="#四、SpringBoot开发Web项目（静态资源-html-css-js）" class="headerlink" title="四、SpringBoot开发Web项目（静态资源 html css js）"></a>四、SpringBoot开发Web项目（静态资源 html css js）</h1><h2 id="1、静态资源存放路径"><a href="#1、静态资源存放路径" class="headerlink" title="1、静态资源存放路径"></a>1、静态资源存放路径</h2><p>1.1、spring boot是一个jar，因此静态资源就不是再存放到 webapps中，静态资源的存放路径是通过WebMvcAutoConfiguration类的addResourceHandlers()指定:/webjars/<br>1.2、spring boot将静态资源存入到jar包中，引入: 从Jar目录结构的webjars开始写：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/jquery/3.5.1/jquery.js</a></p>
<p>①<a href="https://www.webjars.org/">WebJars官网</a></p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831170844.png" style="zoom:50%;" />



<p>②pom.xml处理依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">		    &lt;groupId&gt;org.webjars&lt;&#x2F;groupId&gt;</span><br><span class="line">		    &lt;artifactId&gt;jquery&lt;&#x2F;artifactId&gt;</span><br><span class="line">		    &lt;version&gt;3.5.1&lt;&#x2F;version&gt;</span><br><span class="line">		&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>③引入：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/jquery/3.5.1/jquery.js</a></p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831171216.png"></p>
<p>④访问</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831171840.png" style="zoom:33%;" />

<h2 id="2、将自己的资源放入SpringBoot中"><a href="#2、将自己的资源放入SpringBoot中" class="headerlink" title="2、将自己的资源放入SpringBoot中"></a>2、将自己的资源放入SpringBoot中</h2><p>2.1、将自己写的静态资源打包成jar，同上（不推荐）</p>
<p>2.2、spring boot约定的静态资源存放目录，我们把静态资源直接放入这些目录即可</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831172805.png" style="zoom:50%;" />

<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831173302.png"></p>
<p>在以上目录存放资源文件后，访问时  不需要加前缀，直接访问即可</p>
<p>2.3、设置首页</p>
<p>WebMvcAutoConfiguration类中的welcomePageHandlerMapping() –&gt;getIndexHtml() –&gt; location + “index.html” ,即任意一个静态资源目录中的 Index.html就是欢迎页</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831174048.png" style="zoom:50%;" />



<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831174340.png" style="zoom:50%;" />



<p>2.4、自定义 favicon.ico（网站logo）</p>
<p>只需要将 favicon.ico文件放入任意静态资源目录中即可</p>
<h2 id="3、自定义路径（Properties文件中的-prefix-属性）"><a href="#3、自定义路径（Properties文件中的-prefix-属性）" class="headerlink" title="3、自定义路径（Properties文件中的 prefix+属性）"></a>3、自定义路径（Properties文件中的 prefix+属性）</h2><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831172805.png" style="zoom:50%;" />



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.resources.static-locations&#x3D;classpath:&#x2F;res&#x2F;, classpath:&#x2F;img&#x2F;</span><br></pre></td></tr></table></figure>

<p>自定义静态资源目录后  以前默认的目录会失效（自动装配失效）</p>
<h1 id="五、动态资源的处理：JSP-spring-boot默认不支持"><a href="#五、动态资源的处理：JSP-spring-boot默认不支持" class="headerlink" title="五、动态资源的处理：JSP(spring boot默认不支持)"></a>五、动态资源的处理：JSP(spring boot默认不支持)</h1><h2 id="1、模板引擎-thymeleaf"><a href="#1、模板引擎-thymeleaf" class="headerlink" title="1、模板引擎 thymeleaf"></a>1、模板引擎 thymeleaf</h2><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831181125.png" style="zoom:50%;" />



<p>依赖：<a href="https://www.springcloud.cc/spring-boot.html#using-boot-starter">官方文档</a></p>
<p>使用：<a href="https://www.thymeleaf.org/documentation.html">官方文档</a></p>
<h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><p>boot通过XxAutoConfiguration实现自动装配 ，修改默认值 XxxProperties（ prefix+属性名）</p>
<p>查找：spring-boot-autoconfigure-2.3.3.RELEASE.jar<br>–&gt;org.springframework.boot.autoconfigure.thymeleaf<br>–&gt;ThymeleafAutoCongifutation 、XxProperties</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200831182454.png" style="zoom:50%;" />

<p>使用thymeleaf只需要将 文件放入目录：”classpath:/templates/“;  文件的后缀： “.html”;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">th就是替换原有html的值：th:html属性名&#x3D;值 ;</span><br><span class="line">		&lt;p id&#x3D;&quot;pid&quot; class&#x3D;&quot;pclass&quot;  th:id&#x3D;&quot;$&#123;welcome&#125;&quot; th:class&#x3D;&quot;$&#123;welcome&#125;&quot;  th:text&#x3D;&quot;$&#123;welcome&#125;&quot;&gt;welcome to thymeleaf....&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h1 id="六、Spring-boot整合JSP开发"><a href="#六、Spring-boot整合JSP开发" class="headerlink" title="六、Spring boot整合JSP开发"></a>六、Spring boot整合JSP开发</h1><h2 id="1、新建boot项目，-war"><a href="#1、新建boot项目，-war" class="headerlink" title="1、新建boot项目， war"></a>1、新建boot项目， war</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>provided：意思是 将项目打包时，不需要将内置的tomcat一起打包</p>
<p>​                provided：意思是 将项目打包时，不需要将内置的tomcat一起打包。</p>
<h2 id="2-建立基本的web项目所需要的目录结构"><a href="#2-建立基本的web项目所需要的目录结构" class="headerlink" title="2.建立基本的web项目所需要的目录结构"></a>2.建立基本的web项目所需要的目录结构</h2><p>webapps/WEB-INF(需要)<br>webapps/WEB-INF/web.xml (不需要)<br>webapps/index.jsp</p>
<h2 id="3、创建tomcat实例、部署项目"><a href="#3、创建tomcat实例、部署项目" class="headerlink" title="3、创建tomcat实例、部署项目"></a>3、创建tomcat实例、部署项目</h2><p>如果是一个war包的spring boot项目，在启动服务器tomcat时， 会自动调用ServletInitializer类中 的configure方法，configure方法会调用spring boot的主配置类 从而启动spring boot；即在启动tomcat服务器时  会1启动tomcat  2启动spring boot</p>
<h1 id="附录一：关于修改默认端口："><a href="#附录一：关于修改默认端口：" class="headerlink" title="附录一：关于修改默认端口："></a>附录一：关于修改默认端口：</h1><p>1、配置/src/main/resources/application.properties:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port&#x3D;9090</span><br></pre></td></tr></table></figure>

<p>2、实现EmbeddedServletContainerCustomizer接口，重写方法更改</p>
<p>3、命令行更改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ava -Dserver.port &#x3D; 9090 -jar executable.jar</span><br><span class="line">或</span><br><span class="line">java -jar executable.jar -server.port &#x3D; 9090</span><br></pre></td></tr></table></figure>

<p>4、端口被占用又不想更改咋办？</p>
<p>①查到被占端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr 8080</span><br></pre></td></tr></table></figure>

<p>②杀了占用它的进程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">taskkill -PID 135940 -F</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2020/08/30/Maven/</url>
    <content><![CDATA[<h1 id="一、Maven功能"><a href="#一、Maven功能" class="headerlink" title="一、Maven功能"></a>一、Maven功能</h1><a id="more"></a>

<h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>1.1、是一个基于Java平台的自动化构建工具（编译-打包-部署-测试）</p>
<p>make-ant-maven-gradle</p>
<h2 id="2、jar包管理"><a href="#2、jar包管理" class="headerlink" title="2、jar包管理"></a>2、jar包管理</h2><p>1.1、增加第三方Jar   (commons-fileupload.jar   commons-io.jar)<br>1.2、jar包之间的依赖关系 （commons-fileupload.jar 自动关联下载所有依赖的Jar，并且不会冲突）</p>
<h2 id="3、项目管理"><a href="#3、项目管理" class="headerlink" title="3、项目管理"></a>3、项目管理</h2><p>将项目拆分成若干个模块</p>
<h2 id="4、生命周期"><a href="#4、生命周期" class="headerlink" title="4、生命周期"></a>4、生命周期</h2><p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p>
<ul>
<li>清理：删除编译的结果，为重新编译做准备。</li>
<li>编译：java-&gt;class</li>
<li>测试： 针对于 项目中的关键点进行测试，亦可用 项目中的测试代码 去测试开发代码；</li>
<li>报告：将测试的结果 进行显示</li>
<li>打包： 将项目中包含的多个文件 压缩成一个文件， 用于安装或部署。 （java项目-jar、web项目-war）</li>
<li>安装：将打成的包  放到  本地仓库，供其他项目使用。</li>
<li>部署：将打成的包  放到  服务器上准备运行。将java、js、jsp等各个文件 进行筛选、组装，变成一个 可以直接运行的项目</li>
</ul>
<p>关于部署：    </p>
<pre><code>-Eclipse中部署的web项目可以运行
-将Eclipse中的项目，复制到tomcat/webapps中则不能运行
-项目可以在webappas中直接运行
Eclipse中的项目 ，在部署时 会生成一个 对应的 部署项目(在wtpwebapps中)，区别在于： 部署项目 没有源码文件src(java)，只有编译后的class文件和jsp文件
因为二者目录结构不一致，因此tomcat中无法直接运行 Eclips中复制过来的项目 （因为 如果要在tomcat中运行一个项目，则该项目 必须严格遵循tomcat的目录结构）

Eclipse中的项目 要在tomcat中运行，就需要部署： 
a.通过Eclipse中Add and Remove按钮进行部署
b.将Web项目打成一个war包，然后将该war包复制到tomcat/webapps中 即可执行运行</code></pre>
<h1 id="二、Maven下载配置"><a href="#二、Maven下载配置" class="headerlink" title="二、Maven下载配置"></a>二、Maven下载配置</h1><p>1、<a href="http://maven.apache.org/download.cgi">Apache Maven Project Download</a></p>
<p>2、配置：</p>
<blockquote>
<p>a.配置JAVA_HOME<br>b.配置MAVEN_HOME    :    D:\apache-maven-3.5.3\bin<br>    M2_HOME<br>c.配置path<br>    %MAVEN_HOME%\bin<br>d.验证<br>    mvn -v<br>e.配置本地仓库  maven目录/conf/settings.xml<br>        默认本地仓库 ：C:/Users/YANQUN/.m2/repository<br>        修改本地仓库：  <localRepository>D:/mvnrep</localRepository></p>
</blockquote>
<p>3、约定：</p>
<blockquote>
<p>项目<br>        -src<br>            –main            ：程序功能代码<br>                    –java         java代码  (Hello xxx)<br>                    –resources      资源代码、配置代码<br>            –test            ：测试代码<br>                    –java<br>                    –resources    </p>
<p>​    pom.xml        ：项目对象模型</p>
</blockquote>
<p>4、pom.xml（gav表明在仓库中的位置）</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;groupId&gt;域名翻转.大项目名&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;groupId&gt;on.nap.maven&lt;&#x2F;groupId&gt;</span><br></pre></td></tr></table></figure>

<pre><code>&lt;artifactId&gt;子模块名&lt;/artifactId&gt;
&lt;artifactId&gt;HelloWorld&lt;/artifactId&gt;


&lt;version&gt;版本号&lt;/version&gt;
&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</code></pre>
</blockquote>
<p>5、执行：必须在pom.xml所在目录中执行</p>
<blockquote>
<p>mvn compile   –只编译main目录中的java文件，生成target文件夹（test下的不编译）<br>mvn test     测试<br>mvn package          打成jar/war<br>mvn install  将开发的模块 放入本地仓库，供其他模块使用 （放入的位置 是通过gav决定）</p>
<p>mvn clean  删除target目录（删除编译文件的目录）</p>
</blockquote>
<h1 id="三、创建一个Maven项目"><a href="#三、创建一个Maven项目" class="headerlink" title="三、创建一个Maven项目"></a>三、创建一个Maven项目</h1><p>1、</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200830212358.png" style="zoom:50%;" />



<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200830212620.png" style="zoom:50%;" />



<p>2、目录结构如下：</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200830220511.png"></p>
<p>3、在首选项中可以选择自已下载的版本：</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200830213417.png" style="zoom:50%;" />



<p>4、仓库更改：</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200830214026.png" style="zoom:50%;" />



<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200830214255.png" style="zoom:50%;" />

<p>5、更新Maven项目：在pom.xml中增加完依赖后，需要maven - update project</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200830215401.png" style="zoom:50%;" />



<p>6、执行Maven：</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200830215535.png" style="zoom:50%;" />



<h1 id="四、依赖"><a href="#四、依赖" class="headerlink" title="四、依赖"></a>四、依赖</h1><p>1、A中的某些类 需要使用B中的某些类，则称为A依赖于B<br>在maven项目中，如果要使用 一个当时存在的Jar或模块，则可以通过 依赖实现（去本地仓库、中央仓库去寻找）</p>
<p>2、依赖的范围、依赖的有效性：</p>
<blockquote>
<p>compile(默认)  </p>
<p>test  </p>
<p>provided</p>
</blockquote>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200830211951.png"></p>
<p>3、依赖排除：<exclusions></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;exclusions&gt;</span><br><span class="line">    &lt;exclusion&gt;</span><br><span class="line">        &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;exclusion&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br></pre></td></tr></table></figure>

<p>4、依赖的传递性</p>
<p>A.jar-&gt;B.jar-&gt;C.jar</p>
<p>要使 A.jar -&gt;C.jar :当且仅当 B.jar 依赖于C.jar的范围是compile</p>
<p>5、依赖原则：</p>
<p>①路径最短优先原则<br>②路径长度相同：<br>    i.在同一个pom.xml文件中有2个相同的依赖（覆盖）：后面声明的依赖 会覆盖前面声明的依赖 （严禁使用本情况，严禁在同一个pom中声明2个版本不同的依赖）<br>    ii.如果是不同的 pom.xml中有2个相同的依赖（优先）：则先声明的依赖 ，会覆盖后声明的依赖</p>
<h1 id="五、继承"><a href="#五、继承" class="headerlink" title="五、继承"></a>五、继承</h1><p>1、建立父工程： 父工程的打包方式为pom </p>
<p>2、在父工程的pom.xml中编写依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">  	&lt;dependencies&gt;</span><br><span class="line">  		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">			&lt;version&gt;4.0&lt;&#x2F;version&gt;</span><br><span class="line">			&lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">		&lt;&#x2F;dependency&gt;</span><br><span class="line">	&lt;dependencies&gt;</span><br></pre></td></tr></table></figure>

<p>3、子类继承pom.xml:</p>
<p>①加入父工程坐标gav  </p>
<p> ②当前工程的Pom.xml到父工程的Pom.xml之间的 相对路径 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">	 	&lt;!-- 1加入父工程坐标gav --&gt;</span><br><span class="line">	 	  &lt;groupId&gt;org.lanqiao.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">	  &lt;artifactId&gt;B&lt;&#x2F;artifactId&gt;</span><br><span class="line">	  &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">	 &lt;!-- 2当前工程的Pom.xml到父工程的Pom.xml之间的 相对路径 --&gt; </span><br><span class="line">	  &lt;relativePath&gt;..&#x2F;B&#x2F;pom.xml&lt;&#x2F;relativePath&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure>

<p>4、在子类中声明需要使用父类的依赖     </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;!-- 声明：需要使用到父类的junit （只需要ga） --&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h1 id="六、聚合"><a href="#六、聚合" class="headerlink" title="六、聚合"></a>六、聚合</h1><p>1、Maven项目能够识别的只有自身包含的和本地仓库中的class字节码。例如：Maven2依赖于Maven1，则在执行时必须先将Maven1加入到本地仓库(install)，之后才能执行Maven2。<br>以上前置工程的install操作，可以交由“聚合” 一次性搞定。</p>
<p>2、聚合的使用：</p>
<p>在一个总工程中配置聚合： （聚合的配置 只能配置在（打包方式为pom）的Maven工程中）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;!--项目的根路径  --&gt;</span><br><span class="line">    &lt;module&gt;..&#x2F;Maven1&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;module&gt;..&#x2F;Maven2&lt;&#x2F;module&gt;</span><br><span class="line">&lt;&#x2F;modules&gt;</span><br></pre></td></tr></table></figure>

<p>配置完聚合之后，以后只要操作总工程，则会自动操作聚合中配置过的工程</p>
<p>3、聚合和继承</p>
<p>聚合：<br>    Maven将一个大工程拆分成 若干个子工程（子模块）<br>    聚合可以将拆分的多个子工程 合起来<br>继承：<br>    父-&gt;子工程,可以通过父工程  统一管理依赖的版本</p>
<p>配置完聚合之后，以后只要操作总工程，则会自动操作 改聚合中配置过的工程</p>
<h1 id="七、统一项目的jdk"><a href="#七、统一项目的jdk" class="headerlink" title="七、统一项目的jdk"></a>七、统一项目的jdk</h1><p>1、build path:删除旧版本，增加新版本<br>2、右键项目-属性-Project Factors -java version 改版本  （之前存在要改的版本）</p>
<p>3、通过maven统一jdk版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">   &lt;profile&gt;  </span><br><span class="line">       &lt;id&gt;jdk-18&lt;&#x2F;id&gt;  </span><br><span class="line">       &lt;activation&gt;  </span><br><span class="line">           &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;  </span><br><span class="line">           &lt;jdk&gt;1.8&lt;&#x2F;jdk&gt;  </span><br><span class="line">       &lt;&#x2F;activation&gt;  </span><br><span class="line">       &lt;properties&gt;  </span><br><span class="line">           &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;  </span><br><span class="line">           &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;  </span><br><span class="line">           &lt;maven.compiler.compilerVersion&gt;1.8&lt;&#x2F;maven.compiler.compilerVersion&gt;  </span><br><span class="line">       &lt;&#x2F;properties&gt;   </span><br><span class="line">   &lt;&#x2F;profile&gt;  </span><br><span class="line">&lt;&#x2F;profiles&gt;</span><br></pre></td></tr></table></figure>

<h1 id="八、部署Web工程"><a href="#八、部署Web工程" class="headerlink" title="八、部署Web工程"></a>八、部署Web工程</h1><p>1、通过maven直接部署运行web项目：<br>a.配置cargo</p>
<pre><code>&lt;build&gt;    &lt;finalName&gt;WebProjectName&lt;/finalName&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.codehaus.cargo&lt;/groupId&gt;
            &lt;artifactId&gt;cargo-maven2-plugin&lt;/artifactId&gt;
            &lt;version&gt;1.4.9&lt;/version&gt;
            &lt;configuration&gt;
                &lt;container&gt;
                    &lt;containerId&gt;tomcat8-5-30&lt;/containerId&gt;
                    &lt;home&gt;D:\study\apache-tomcat-8.5.30&lt;/home&gt;
                &lt;/container&gt;
                &lt;configuration&gt;
                    &lt;type&gt;existing&lt;/type&gt;
                    &lt;home&gt;D:\study\apache-tomcat-8.5.30&lt;/home&gt;
                    &lt;!-- 默认值8080 --&gt;
                    &lt;properties&gt;
                        &lt;cargo.servlet.port&gt;8888&lt;/cargo.servlet.port&gt;
                    &lt;/properties&gt;
                &lt;/configuration&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;  
                &lt;execution&gt;  
                    &lt;id&gt;cargo-run&lt;/id&gt;  
                    &lt;phase&gt;install&lt;/phase&gt;  
                    &lt;goals&gt;  
                        &lt;goal&gt;run&lt;/goal&gt;  
                    &lt;/goals&gt;  
                &lt;/execution&gt;  
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;</code></pre>
<p>b. maven命令：deploy</p>
<p>2、实际开发中，开发人员 将自己的项目开发完毕后  打成war包(package) 交给实施人员去部署</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Exception</title>
    <url>/2020/08/29/Exception/</url>
    <content><![CDATA[<h2 id="一、SpringMVC请求方式为PUT和DELETE时出现405：方法不允许（已解决）"><a href="#一、SpringMVC请求方式为PUT和DELETE时出现405：方法不允许（已解决）" class="headerlink" title="一、SpringMVC请求方式为PUT和DELETE时出现405：方法不允许（已解决）"></a>一、SpringMVC请求方式为PUT和DELETE时出现405：方法不允许（已解决）</h2><a id="more"></a>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>对于这个问题网上虽然提供了不少的解决方案，但是不够全面。其实对于 <strong>DELETE</strong> 和 <strong>PUT</strong> 早就不推荐使用了，就连 <strong>JSP</strong> 都很少使用了，所以你会发现在一些老的版本使用起来没有问题。</p>
</blockquote>
<h3 id="1、将-Tomcat-换至-7-0-以下版本"><a href="#1、将-Tomcat-换至-7-0-以下版本" class="headerlink" title="1、将 Tomcat 换至 7.0 以下版本"></a>1、将 Tomcat 换至 7.0 以下版本</h3><blockquote>
<p>待测试，目前版本为8.5</p>
</blockquote>
<h3 id="2、将转发改为重定向"><a href="#2、将转发改为重定向" class="headerlink" title="2、将转发改为重定向"></a>2、将转发改为重定向</h3><blockquote>
<p><code>return &quot;test&quot;;</code> 这种方式是转发，而 <strong>DELETE</strong> 和 <strong>PUT</strong> 是不支持转发的，<strong>只支持重定向</strong>，所以只需要将这行代码改为：<code>return &quot;redirect:/vews/test.jsp&quot;;</code> ，实际测试得到解决。</p>
</blockquote>
<h2 id="二、springMVC文件上传时出现500错误（内部服务器错误）：Current-request-is-not-a-multipart-request（70-）"><a href="#二、springMVC文件上传时出现500错误（内部服务器错误）：Current-request-is-not-a-multipart-request（70-）" class="headerlink" title="二、springMVC文件上传时出现500错误（内部服务器错误）：Current request is not a multipart request（70%）"></a>二、springMVC文件上传时出现500错误（内部服务器错误）：Current request is not a multipart request（70%）</h2><h3 id="1、网上解决办法都是在请求表单添加enctype-quot-multipart-form-data-quot-，但是我之前就已经有了，所以一直不行。"><a href="#1、网上解决办法都是在请求表单添加enctype-quot-multipart-form-data-quot-，但是我之前就已经有了，所以一直不行。" class="headerlink" title="1、网上解决办法都是在请求表单添加enctype=&quot;multipart/form-data&quot;，但是我之前就已经有了，所以一直不行。"></a>1、网上解决办法都是在请求表单添加<code>enctype=&quot;multipart/form-data&quot;</code>，但是我之前就已经有了，所以一直不行。</h3><h3 id="2、我的解决办法："><a href="#2、我的解决办法：" class="headerlink" title="2、我的解决办法："></a>2、我的解决办法：</h3><p>把springmvc.xml在wen.xml中的配置从默认地址改为自己自定义的地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  	&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">  	&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">  	&lt;!-- 拦截处理 --&gt;</span><br><span class="line">  	&lt;init-param&gt;</span><br><span class="line">  		&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">  		&lt;param-value&gt;classpath:springmvc.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">  	&lt;&#x2F;init-param&gt;</span><br><span class="line">  	&lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">  &lt;&#x2F;servlet&gt;</span><br></pre></td></tr></table></figure>

<h2 id="三、使用thymeleaf返回不了目标页面的内容，只显示了目标文件的文件名"><a href="#三、使用thymeleaf返回不了目标页面的内容，只显示了目标文件的文件名" class="headerlink" title="三、使用thymeleaf返回不了目标页面的内容，只显示了目标文件的文件名"></a>三、使用thymeleaf返回不了目标页面的内容，只显示了目标文件的文件名</h2><p>RestController = Controller + ResponseBody.加上RestController,返回的内容是你return中的内容，如果是return “Hello World”，页面显示的就是Hello World。加上Controller，返回的是return中对应的页面,比如return “hello”,页面的名称是hello。</p>
<p>解决：在该类前使用注解@Controller</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记</title>
    <url>/2020/08/29/SpringMVC%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>f335fe81d0894ce1de0333d7b824dd61fde7b173</p>
<p>1680e0879157ecaa2d8af2251a39d42a</p>
<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><a id="more"></a>

<h2 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h2><blockquote>
<p>spring-aop.jar<br>spring-bean.jar<br>spring-context.jar<br>spring-core.jar<br>spring-web.jar</p>
<p>spring-webmvc.jar<br>commons-logging.jar</p>
</blockquote>
<h2 id="2、创建配置文件springmvc-xml-bean"><a href="#2、创建配置文件springmvc-xml-bean" class="headerlink" title="2、创建配置文件springmvc.xml(bean)"></a>2、创建配置文件<code>springmvc.xml</code>(bean)</h2><h1 id="二、程序配置"><a href="#二、程序配置" class="headerlink" title="二、程序配置"></a>二、程序配置</h1><h2 id="1、普通的servlet流程："><a href="#1、普通的servlet流程：" class="headerlink" title="1、普通的servlet流程："></a>1、普通的servlet流程：</h2><p>1.1、新建servlet文件</p>
<p>1.2、在<code>web.xml</code>中会请求-url-pattern -交给对应的servlet去处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line">    &lt;description&gt;&lt;&#x2F;description&gt;</span><br><span class="line">    &lt;display-name&gt;a&lt;&#x2F;display-name&gt;</span><br><span class="line">    &lt;servlet-name&gt;a&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;a.a&lt;&#x2F;servlet-class&gt;</span><br><span class="line">  &lt;&#x2F;servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;a&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;a&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>其中：<br><code>&lt;url-pattern&gt;.action&lt;/url-pattern&gt;</code></p>
<p>/:一切请求  ，注意不是 /*<br>/user:拦截以 /user开头的请求<br>/user/abc.do  :只拦截该请求<br>.action:只拦截 .action结尾的请求</p>
<h2 id="2、SpringMVC配置servlet（DispatcherServlet）"><a href="#2、SpringMVC配置servlet（DispatcherServlet）" class="headerlink" title="2、SpringMVC配置servlet（DispatcherServlet）"></a>2、SpringMVC配置servlet（<code>DispatcherServlet</code>）</h2><blockquote>
<p>前端发请求a-&gt; @RequestMappting(“a”)<br>处理请求中的参数xyz：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMappting(&quot;a&quot;) </span><br><span class="line">	public String  aa(@Xxx注解(&quot;xyz&quot;)  xyz)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">​	&#125;</span><br></pre></td></tr></table></figure>

<p>使用对象（实体类Student）接受请求参数</p>
</blockquote>
<p>2.1、在web.xml中进行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line"> 	&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line"> 	&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line"> 	&lt;!-- 拦截处理 --&gt;</span><br><span class="line"> 	&lt;init-param&gt;</span><br><span class="line"> 		&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line"> 		&lt;param-value&gt;classpath:springmvc.xml&lt;&#x2F;param-value&gt;</span><br><span class="line"> 	&lt;&#x2F;init-param&gt;</span><br><span class="line"> 	&lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line"> &lt;&#x2F;servlet&gt;</span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line"> 	&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line"> 	&lt;!-- &quot;&#x2F;&quot;表示拦截所有 --&gt;</span><br><span class="line"> 	&lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line"> &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>2.2、新建index.jsp文件<code>welcome</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;a href&#x3D;&quot;welcome&quot;&gt;springmvc&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>2.3、新建控制器文件（class）<code>通过@RequestMapping(&quot;welcome&quot;)拦截，return &quot;success&quot;</code></p>
<p>包名命名可遵从以下几种：</p>
<p>①cn.nap.handler</p>
<p>②cn.nap.servlet</p>
<p>③cn.nap.controller</p>
<p>④cn.nap.action</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class SpringMVCHandler &#123;</span><br><span class="line">	@RequestMapping(&quot;welcome&quot;)</span><br><span class="line">	public String welcome() &#123;</span><br><span class="line">		return &quot;success&quot;;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>PS</code>：①映射是 去匹配@RequestMapping注解，可以和方法名、类名不一致</p>
<p>②通过method指定请求方式（get  post  delete put）</p>
<p>③通过params属性指定必须有的参数，可以具体到某一个<br>params= {“name2=zs”,”age!=23”}</p>
<p>name2:必须有name=”name2”参数</p>
<p>age!=23 :    a.如果有name=”age”，则age值不能是23<br>         b.没有age<br>!name2  ：不能name=”name2”的属性</p>
<p>@RequestMapping(value=”welcome”,method=RequestMethod.POST,params={“name=zhao”,”age!=18”})//映射</p>
<p>2.4、在<code>springmvc.xml</code>中配置：``返回/views/success.jsp`</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 扫描器 --&gt;</span><br><span class="line">&lt;context:component-scan base-package&#x3D;&quot;package cn.nap.handler&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br><span class="line">&lt;!-- 配置视图解析器InternalResourceViewResolver --&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">	&lt;!-- 配置跳转文件 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;views&#x2F;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p><code>PS：</code>springmvc.xml默认位置在WEB-INF下，默认名字为：servlet-name的值-servlet.xml，例如springDispatcherServlet-servlet.xml，当为默认值时，在web.xml 中可以不用配置</p>
<p>2.5、创建/views/success.jsp文件<code>目标文件</code></p>
<h2 id="3、项目中同时兼容-springMVC和Servlet"><a href="#3、项目中同时兼容-springMVC和Servlet" class="headerlink" title="3、项目中同时兼容 springMVC和Servlet"></a>3、项目中同时兼容 springMVC和Servlet</h2><p>3.1、在<code>web.xml</code>配置：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  	&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">  	&lt;url-pattern&gt;.action&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>3.2、使用时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;a href&#x3D;&quot;welcome.action&quot;&gt;springmvc&lt;&#x2F;a&gt; &#x2F;&#x2F;由SpringMVC处理，@RequestMapping映射</span><br><span class="line">	&lt;a href&#x3D;&quot;welcome&quot;&gt;springmvc&lt;&#x2F;a&gt; &#x2F;&#x2F;由servlet处理，找url-parttern&#x2F;@WebServlet()</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4、补充"><a href="#4、补充" class="headerlink" title="4、补充"></a>4、补充</h2><p>4.1、 ant风格的请求路径<br>?   单字符</p>
<p>  *任意个字符（0或多个）<br>** 任意目录</p>
<p>4.2、通过@PathVariable获取动态参数</p>
<p>①请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;welcome&#x2F;zhao&quot;&gt;springmvc&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>②匹配@RequestMapping</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;welcome&#x2F;&#123;name&#125;&quot;)</span><br><span class="line">	public String welcome(@PathVariable(&quot;name&quot;) String name) &#123;</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>4.3、REST风格 ：软件编程风格</p>
<p>①Springmvc:  GET（查），POST（增），DELETE （删），PUT （改）；<br>普通浏览器只支持get post方式 ；其他请求方式 如 delelte|put请求是通过过滤器新加入的支持。</p>
<p>②在web.xml配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 增加HiddenHttpMethodFilte过滤器：目的是给普通浏览器 增加 put|delete请求方式 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">  	&lt;filter-name&gt;HiddenHttpMethodFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">  	&lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">  &lt;&#x2F;filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">  	&lt;filter-name&gt;HiddenHttpMethodFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">  	&lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>③在请求中添加：<code>&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;&quot;&gt;</code>,通过设置隐藏域的Value值设置成put和delete</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;testPut&#x2F;123&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;_method&quot; value&#x3D;&quot;PUT&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;put&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;testDelete&#x2F;123&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;_method&quot; value&#x3D;&quot;DELETE&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;delete&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>④指定请求方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   @RequestMapping(value&#x3D;&quot;testPut&#x2F;&#123;id&#125;&quot;,method &#x3D; RequestMethod.PUT)</span><br><span class="line">       public String testPut(@PathVariable(&quot;id&quot;) Integer id) &#123;</span><br><span class="line">           System.out.println(&quot;put&quot;+id);</span><br><span class="line">           return &quot;welcome&quot;;</span><br><span class="line">       &#125; </span><br><span class="line">@RequestMapping(value&#x3D;&quot;testDelete&#x2F;&#123;id&#125;&quot;,method &#x3D; RequestMethod.DELETE)</span><br><span class="line">public String testDelete(@PathVariable(&quot;id&quot;) Integer id) &#123;</span><br><span class="line">	System.out.println(&quot;delete&quot;+id);</span><br><span class="line">	return &quot;welcome&quot;;</span><br></pre></td></tr></table></figure>

<p>⑤此外，可以发现 ，当映射名相同时@RequestMapping(value=”testRest”)，可以通过method处理不同的请求。</p>
<p>⑥普通方式传值：等价于request.getParameter(“uname”)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testParam&quot;)</span><br><span class="line">	public String testParam(@RequestParam(&quot;uname&quot;) String name,@RequestParam(value &#x3D; &quot;uage&quot;,required &#x3D; false,defaultValue &#x3D; &quot;20&quot;) String age) &#123;</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		System.out.println(age);</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>4.4、获取请求头信息 @RequestHeader</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testRequestHeader&quot;)</span><br><span class="line">	public String testRequestHeader(@RequestHeader(&quot;Accept-Language&quot;) String al) &#123;</span><br><span class="line">		System.out.println(al);</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>4.5、通过mvc获取cookie值（JSESSIONID）<br>@CookieValue<br>(前置知识： 服务端在接受客户端第一次请求时，会给该客户端分配一个session （该session包含一个sessionId）),并且服务端会在第一次响应客户端时 ，请该sessionId赋值给JSESSIONID 并传递给客户端的cookie中</p>
<p>4.6、使用对象（实体类Student）接受请求参数（保持一致；支持级联）</p>
<p>①请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;testStudent&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">		id:&lt;input name&#x3D;&quot;id&quot;&gt;&lt;br&gt;</span><br><span class="line">		name:&lt;input name&#x3D;&quot;name&quot;&gt;&lt;br&gt;</span><br><span class="line">		address.homeAddress:&lt;input name&#x3D;&quot;address.homeAddress&quot;&gt;&lt;br&gt;</span><br><span class="line">		address.schoolAddress:&lt;input name&#x3D;&quot;address.schoolAddress&quot;&gt;&lt;br&gt;</span><br><span class="line">		&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;student&quot;&gt;</span><br><span class="line">	&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>②接受请求参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testStudent&quot;)</span><br><span class="line">	public String testStudent(Student student) &#123;</span><br><span class="line">		System.out.println(student.getId()+student.getName()+student.getAddress().getHomeAddress()+student.getAddress().getSchoolAddress());</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>4.7、在SpringMVC中使用原生态的Servlet API</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testSerletAPI&quot;)</span><br><span class="line">public String testSerletAPI(HttpServletRequest request,HttpServletResponse response) &#123;</span><br><span class="line">	&#x2F;&#x2F;request.getParameter(&quot;uname&quot;);</span><br><span class="line">	System.out.println(request);</span><br><span class="line">	return &quot;welcome&quot;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h1 id="三、处理模型数据"><a href="#三、处理模型数据" class="headerlink" title="三、处理模型数据"></a>三、处理模型数据</h1><h2 id="1、将数据存入request作用域（4种方式）"><a href="#1、将数据存入request作用域（4种方式）" class="headerlink" title="1、将数据存入request作用域（4种方式）"></a>1、将数据存入<code>request作用域</code>（4种方式）</h2><p>1.1、将数据存入<code>request作用域</code>（4种方式）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testModelAndView&quot;)</span><br><span class="line">public ModelAndView testModelAndView() &#123;</span><br><span class="line">	ModelAndView mv&#x3D;new ModelAndView(&quot;welcome&quot;);&#x2F;&#x2F;view目标文件：&#x2F;views&#x2F;welcome.xml</span><br><span class="line">	</span><br><span class="line">	Student student&#x3D;new Student();</span><br><span class="line">	student.setId(1);</span><br><span class="line">	student.setName(&quot;zhao&quot;);</span><br><span class="line">	</span><br><span class="line">	mv.addObject(&quot;student&quot;, student);&#x2F;&#x2F;相当于request.setAttribute(&quot;student&quot;, student);</span><br><span class="line">	return mv;</span><br><span class="line">&#125; </span><br><span class="line">@RequestMapping(value&#x3D;&quot;testModelAndViewMap&quot;)</span><br><span class="line">public String testModelAndViewMap(Map&lt;String,Object&gt; m) &#123;</span><br><span class="line">	</span><br><span class="line">	Student student1&#x3D;new Student();</span><br><span class="line">	student1.setId(1);</span><br><span class="line">	student1.setName(&quot;zhao&quot;);</span><br><span class="line">	m.put(&quot;student1&quot;, student1);</span><br><span class="line">	return &quot;welcome&quot;;</span><br><span class="line">&#125; </span><br><span class="line">@RequestMapping(value&#x3D;&quot;testModelAndViewModel&quot;)</span><br><span class="line">public String testModelAndViewModel(Model model) &#123;</span><br><span class="line">	</span><br><span class="line">	Student student2&#x3D;new Student();</span><br><span class="line">	student2.setId(1);</span><br><span class="line">	student2.setName(&quot;zhao&quot;);</span><br><span class="line">	</span><br><span class="line">	model.addAttribute(&quot;student2&quot;, student2);</span><br><span class="line">	return &quot;welcome&quot;;</span><br><span class="line">&#125; </span><br><span class="line">@RequestMapping(value&#x3D;&quot;testModelAndViewModelMap&quot;)</span><br><span class="line">public String testModelAndViewModelMap(ModelMap mm) &#123;</span><br><span class="line">	</span><br><span class="line">	Student student3&#x3D;new Student();</span><br><span class="line">	student3.setId(1);</span><br><span class="line">	student3.setName(&quot;zhao&quot;);</span><br><span class="line">	</span><br><span class="line">	mm.addAttribute(&quot;student3&quot;, student3);</span><br><span class="line">	return &quot;welcome&quot;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>1.2、在目标文件中获取M</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	Welcome to SpringMVC&lt;br&gt;</span><br><span class="line">	$&#123;requestScope.student.id&#125;-$&#123;requestScope.student.name&#125;</span><br><span class="line">	$&#123;requestScope.student.id&#125;-$&#123;requestScope.student.name&#125;</span><br><span class="line">	$&#123;requestScope.student1.id&#125;-$&#123;requestScope.student1.name&#125;</span><br><span class="line">	$&#123;requestScope.student2.id&#125;-$&#123;requestScope.student2.name&#125;</span><br><span class="line">	$&#123;requestScope.student3.id&#125;-$&#123;requestScope.student3.name&#125;</span><br><span class="line">&lt;&#x2F;body&gt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2、数据放入session中-SessionAttributes"><a href="#2、数据放入session中-SessionAttributes" class="headerlink" title="2、数据放入session中@SessionAttributes(..)"></a>2、数据放入session中<code>@SessionAttributes(..)</code></h2><p>2.1、value属性和type属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SessionAttributes(value&#x3D;&quot;student3&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SessionAttributes(type&#x3D;&#123;Student.class,Address.class&#125;)</span><br></pre></td></tr></table></figure>

<p>2.2、目标文件：sessionScope</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	$&#123;sessionScope.student.id&#125;-$&#123;sessionScope.student.name&#125;</span><br><span class="line">	$&#123;sessionScope.student.id&#125;-$&#123;sessionScope.student.name&#125;</span><br><span class="line">	$&#123;sessionScope.student1.id&#125;-$&#123;sessionScope.student1.name&#125;</span><br><span class="line">	$&#123;sessionScope.student2.id&#125;-$&#123;sessionScope.student2.name&#125;</span><br><span class="line">	$&#123;sessionScope.student3.id&#125;-$&#123;sessionScope.student3.name&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3、更新数据-ModelAttribute"><a href="#3、更新数据-ModelAttribute" class="headerlink" title="3、更新数据@ModelAttribute "></a>3、更新数据<code>@ModelAttribute </code></h2><p>3.1、通过@ModelAttribute修饰的方法 ，会在每次请求前先执行；并且该方法的参数map.put()可以将 对象 放入 即将查询的参数中；<br>3.2、必须满足的约定：<br>①map.put(k,v) 其中的k 必须是即将查询的方法参数 的首字母小写。testModelAttribute(Student xxx)  ，即student；<br>②如果不一致，需要通过@ModelAttribute声明。如下：</p>
<pre><code>    @ModelAttribute//在任何一次请求前，都会先执行@ModelAttribute修饰的方法
    public void queryStudentById(Map&lt;String,Object&gt; map) &#123;
        //StuentService stuService = new StudentServiceImpl();
        //Student student = stuService.queryStudentById(31);
        //模拟调用三层查询数据库的操作
        Student student = new Student();
        student.setId(31);
        student.setName(&quot;zs&quot;);
        student.setAge(23);
        map.put(&quot;stu&quot;, student) ;//约定：map的key 就是方法参数 类型的首字母小写
    &#125;
    @RequestMapping(value=&quot;testModelAttribute&quot;)
    public String testModelAttribute(@ModelAttribute(&quot;stu&quot;)Student student) &#123;
        student.setName(student.getName());//将名字修改为ls
        System.out.println(student.getId()+&quot;,&quot;+student.getName()+&quot;,&quot;+student.getAge());
        return &quot;success&quot;;
    &#125;</code></pre>
<p>3.3、一个Servlet 对应一个功能：增删改查  对应于 4个Servlet</p>
<p>更新：    Servlet  - SpringMVC的Controller</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询</span><br><span class="line">@ModelAttribute</span><br><span class="line">public void query()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">修改</span><br><span class="line">public String update()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@ModelAttribute会在 该类的每个方法执行前 均被执行一次，因为使用时需要注意。</p>
<h1 id="四、视图解析器：ViewResolver"><a href="#四、视图解析器：ViewResolver" class="headerlink" title="四、视图解析器：ViewResolver"></a>四、视图解析器：ViewResolver</h1><h2 id="1、常见的视图解析器"><a href="#1、常见的视图解析器" class="headerlink" title="1、常见的视图解析器"></a>1、常见的视图解析器</h2><p>1.1、</p>
<table>
<thead>
<tr>
<th>URL视图资源图</th>
<th>① <strong>InternalResourceView</strong>  <br />②JstlView <br />springMVC解析jsp时 会默认使用InternalResourceView，如果发现Jsp中包含了jstl语言相关的内容，则自动转为JstlView。</th>
<th>① 将JSP或其他资源封装成一个视图。被视图解析器InternalResourceViewResolver默认使用。 <br /> ②InternalResourceView的子类。  如果JSP中使用了JSTL的国际化标签，就需要使用该视图类。</th>
</tr>
</thead>
<tbody><tr>
<td>文档视图</td>
<td>①AbstractExcelView  <br />②AbstractPdfView</td>
<td>①Excel文档视图的抽象类。<br /> ②PDF文档视图的抽象类</td>
</tr>
<tr>
<td>报表视图</td>
<td>①ConfigurableJasperReportsView<br />②JasperReportsHtmlView  <br />③JasperReportsPdfView  <br />④JasperReportsXlsView</td>
<td>常用的JasperReports报表视图</td>
</tr>
<tr>
<td>JSON视图</td>
<td>MappingJackson2JsonView</td>
<td>将数据通过Jackson框架的ObjectMapper对象，以JSON方式输出</td>
</tr>
</tbody></table>
<h2 id="2、JstlView-可以解析jstl-实现国际化操作"><a href="#2、JstlView-可以解析jstl-实现国际化操作" class="headerlink" title="2、JstlView 可以解析jstl\实现国际化操作"></a>2、JstlView 可以解析jstl\实现国际化操作</h2><p>2.1创建资源文件,常见的命名：</p>
<table>
<thead>
<tr>
<th>资源文件名</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>基_en.properties</td>
<td>所有英文语言的资源</td>
</tr>
<tr>
<td>基名_en_US.properties</td>
<td>针对美国地区、英文语言的资源</td>
</tr>
<tr>
<td>基名_zh.properties</td>
<td>所有的中文语言的资源</td>
</tr>
<tr>
<td>基名_zh_CN.properties</td>
<td>针对中国大陆的、中文语言的资源</td>
</tr>
<tr>
<td>基名_zh_HK.properties</td>
<td>针对中国香港的、中文语言的资源</td>
</tr>
<tr>
<td>基名.properties</td>
<td>默认资源文件。如果请求相应语言的资源文件不存在，将使用此资源文件。例如，若是中国大陆地区用户，应该访问“基名_zh_CN.properties”，而如果不存在此文件，就会去访问默认的“基名.properties”。</td>
</tr>
</tbody></table>
<p>2.2配置springmvc.xml，加载资源文件</p>
<pre><code>&lt;!-- 加载国际化资源文件 --&gt;
&lt;bean id=&quot;messageSource&quot; class=&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;&gt;
&lt;property name=&quot;basename&quot; value=&quot;i18n&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre>
<p>ResourceBundleMessageSource会在springmvc响应程序时 介入（解析国际化资源文件）</p>
<p>2.3通过jstl使用国际化</p>
<blockquote>
<p>jstl.jar </p>
<p>standar.jar</p>
</blockquote>
<p>2.4约定：</p>
<p>springmvc在启动时，会自动查找一个id=”messageSource”的bean，如果有  则自动加载</p>
<h2 id="3、InternalResourceViewResolver其他功能"><a href="#3、InternalResourceViewResolver其他功能" class="headerlink" title="3、InternalResourceViewResolver其他功能"></a>3、InternalResourceViewResolver其他功能</h2><p>3.1、替代@RequsetMapping(“a”)</p>
<p>①创建一个请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;testResourceViewResolver&quot;&gt;testResourceViewResolver&lt;&#x2F;a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<p>②在springmvc.xml中配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;testResourceViewResolver&quot;&gt;testResourceViewResolver&lt;&#x2F;a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<p>③以上注解 ，会让所有的请求 转入<a href="mvc:..">mvc:..</a>中匹配映射地址，而会忽略调@RequsetMapping()；<br>如果想让 @RequsetMapping(“a”)  和<a href="mvc:..">mvc:..</a>共存，则需要加入一个注解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

<p>3.2、指定请求方式</p>
<p>①指定跳转方式：return “forward:/views/success.jsp”;    </p>
<p>②forward:   redirect: ，需要注意此种方式，不会被视图解析器加上前缀(/views)、后缀(.jsp)</p>
<p>3.3、处理静态资源：html、css、js、图片、视频</p>
<p>①在SpringMVC中，如果直接访问静态资源：404 。原因：之前将所有的请求 通过通配符“、” 拦截，进而交给 SPringMVC的入口DispatcherServlet去处理：找该请求映射对应的 @requestMapping</p>
<p>②解决：如果是 需要mvc处理的，则交给@RequsetMapping(“img.png”)处理；如果不需要springmvc处理，则使用 tomcat默认的Servlet去处理。<br>③tomcat默认的Servlet（在tomcat配置文件\conf\web.xml）去处理：如果有对应的请求拦截,则交给相应的Servlet去处理；如果没有对应的servlet，则直接访问。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line">&lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>④实现方法：在springmvc.xml增加2个注解即可 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mvc:default-servlet-handler&gt;&lt;&#x2F;mvc:default-servlet-handler&gt;</span><br><span class="line">&lt;mvc:annotation-driven&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

<p>3.4、类型转换</p>
<p>①Spring自带一些 常见的类型转换器：<br>public String  testDelete(@PathVariable(“id”) String id) ，即可以接受int类型数据id  也可以接受String类型的id</p>
<p>②自定义类型转换器</p>
<p>步骤一：编写 自定义类型转器的类 （实现Converter接口）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyConverter implements Converter&lt;String,Student&gt;&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Student convert(String source) &#123;</span><br><span class="line">		String[] studentArr&#x3D;source.split(&quot;-&quot;);</span><br><span class="line">		Student student&#x3D;new Student();</span><br><span class="line">		student.setId(Integer.parseInt(studentArr[0]));</span><br><span class="line">		student.setName(studentArr[1]);</span><br><span class="line">		return student;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤二：配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 1将 自定义转换器 纳入SpringIOC容器 --&gt;</span><br><span class="line">	&lt;bean  id&#x3D;&quot;myConverter&quot; class&#x3D;&quot;cn.nap.converter.MyConverter&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- 2将myConverter再纳入 SpringMVC提供的转换器Bean --&gt;</span><br><span class="line">	&lt;bean id&#x3D;&quot;conversionService&quot;  class&#x3D;&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;converters&quot;&gt;</span><br><span class="line">			&lt;set&gt;</span><br><span class="line">				&lt;ref bean&#x3D;&quot;myConverter&quot;&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;set&gt;</span><br><span class="line">		&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- 3将conversionService注册到annotation-driven中 --&gt;</span><br><span class="line">	&lt;!--此配置是SpringMVC的基础配置，很功能都需要通过该注解来协调  --&gt;</span><br><span class="line">	&lt;mvc:annotation-driven conversion-service&#x3D;&quot;conversionService&quot;&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

<p>③使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testConverter&quot;)</span><br><span class="line">	public String testConverter(@RequestParam(&quot;studentInfo&quot;) Student student) &#123;</span><br><span class="line">		System.out.println(student.getId()+&quot;,&quot;+student.getName());</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>其中@RequestParam(“studentInfo”)是触发转换器的桥梁</p>
<p>3.5、数据格式化：SPringMVC提供了很多注解，方便我们数据格式化</p>
<p>①配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置 数据格式化 注解 所依赖的bean --&gt;</span><br><span class="line">	&lt;bean id&#x3D;&quot;conversionService1&quot; class&#x3D;&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p>②注解：在实体类的属性前</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@DateTimeFormat(pattern&#x3D;&quot;yyyy-MM-dd&quot;)</span><br><span class="line">@NumberFormat(pattern&#x3D;&quot;###,#&quot;)  </span><br></pre></td></tr></table></figure>

<p>③打印错误信息：BindingResult result（约定：放在需要校验的参数之后）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testDateTimeFormat&quot;)</span><br><span class="line">	public String testDateTimeFormat(Student student,BindingResult result) &#123;</span><br><span class="line">		System.out.println(student.getId()+&quot;,&quot;+student.getName());</span><br><span class="line">		if(result.getErrorCount()&gt;0) &#123;</span><br><span class="line">			for(FieldError error:result.getFieldErrors()) &#123;</span><br><span class="line">				System.out.println(error.getDefaultMessage());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<h1 id="五、数据检验JSR303、Hibernate-Validator"><a href="#五、数据检验JSR303、Hibernate-Validator" class="headerlink" title="五、数据检验JSR303、Hibernate Validator"></a>五、数据检验JSR303、Hibernate Validator</h1><h2 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h2><blockquote>
<p>hibernate-validator-5.0.0.CR2.jar     </p>
<p>classmate-0.8.0.jar     </p>
<p>jboss-logging-3.1.1.GA.jar</p>
<p>validation-api-1.1.0.CR1.jar     </p>
<p>hibernate-validator-annotation-processor-5.0.0.CR2.jar</p>
</blockquote>
<h2 id="2、配置：实现接口ValidatorFactory"><a href="#2、配置：实现接口ValidatorFactory" class="headerlink" title="2、配置：实现接口ValidatorFactory"></a>2、配置：实现接口ValidatorFactory</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven &gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

<p>此时mvc:annotation-driven的作用：要实现Hibernate Validator/JSR303 校验（或者其他各种校验），必须实现SpringMVC提供的一个接口：ValidatorFactory</p>
<p>LocalValidatorFactoryBean是ValidatorFactory的一个实现类。<br><code>&lt;mvc:annotation-driven &gt;&lt;/mvc:annotation-driven&gt;</code>会在springmvc容器中 自动加载一个LocalValidatorFactoryBean类，因此可以直接实现数据校验。</p>
<h2 id="3、注释使用"><a href="#3、注释使用" class="headerlink" title="3、注释使用"></a>3、注释使用</h2><p>3.1、JSR303注解</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>@Null</td>
<td>被注释的元素必须为 null。</td>
</tr>
<tr>
<td>@NotNull</td>
<td>被注释的元素必须不为 null。</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>被注释的元素必须为 true。</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>被注释的元素必须为 false。</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>被注释的元素必须是一个数字，其值必须大于或等于value。</td>
</tr>
<tr>
<td>@Max(value)</td>
<td>被注释的元素必须是一个数字，其值必须小于或等于value。</td>
</tr>
<tr>
<td>@DecimalMin(value)</td>
<td>被注释的元素必须是一个数字，其值必须大于或等于value。</td>
</tr>
<tr>
<td>@DecimalMax(value)</td>
<td>被注释的元素必须是一个数字，其值必须小于或等于value。</td>
</tr>
<tr>
<td>@Size(max,  min)</td>
<td>被注释的元素的取值范围必须是介于min和max之间。</td>
</tr>
<tr>
<td>@Digits  (integer, fraction)</td>
<td>被注释的元素必须是一个数字，其值必须在可接受的范围内。</td>
</tr>
<tr>
<td>@Past</td>
<td>被注释的元素必须是一个过去的日期。</td>
</tr>
<tr>
<td>@Future</td>
<td>被注释的元素必须是一个将来的日期。</td>
</tr>
<tr>
<td>@Pattern(value)</td>
<td>被注释的元素必须符合指定的正则表达式。</td>
</tr>
</tbody></table>
<p>3.2、Hibernate Validator中增加的注释：</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>@Email</td>
<td>被注释的元素值必须是合法的电子邮箱地址。</td>
</tr>
<tr>
<td>@Length</td>
<td>被注释的字符串的长度必须在指定的范围内。</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>被注释的字符串的必须非空。</td>
</tr>
<tr>
<td>@Range</td>
<td>被注释的元素必须在合适的范围内。</td>
</tr>
</tbody></table>
<p>3.3、直接使用注解</p>
<p>①public class Student {</p>
<pre><code>@Past//当前时间以前
private Date birthday ;</code></pre>
<p>}</p>
<p>②在校验的Controller中 ，给校验的对象前增加 @Valid</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public String testDateTimeFormat(@Valid Student student, BindingResult result ,Map&lt;String,Object&gt; map) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="六、Ajax请求SpringMVC，并且JSON格式的数据"><a href="#六、Ajax请求SpringMVC，并且JSON格式的数据" class="headerlink" title="六、Ajax请求SpringMVC，并且JSON格式的数据"></a>六、Ajax请求SpringMVC，并且JSON格式的数据</h1><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2><h1 id="七、文件上传"><a href="#七、文件上传" class="headerlink" title="七、文件上传"></a>七、文件上传</h1><h2 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h2><p>1.1、SpringMVC实现文件上传和Servlet方式的本质一样，都是通过commons-fileupload.jar和commons-io.jar<br>1.2、SpringMVC可以简化文件上传的代码，但是必须满足条件：实现MultipartResolver接口 ；而该接口的实现类SpringMVC也已经提供了CommonsMultipartResolver</p>
<h2 id="2、导包"><a href="#2、导包" class="headerlink" title="2、导包"></a>2、导包</h2><blockquote>
<p>commons-fileupload.jar</p>
<p>commons-io.jar</p>
</blockquote>
<h2 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h2><p>3.1、springmvc.xml</p>
<pre><code>&lt;!-- 配置CommonsMultipartResolver用于文件上传
    其中id值固定为multipartResolver，
    sprigIOC在初始化时，会自动寻找id=multipartResolver的bean，并将其加入容器
 --&gt;
&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;
    &lt;property name=&quot;maxUploadSize&quot; value=&quot;10240000&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre>
<p>3.2、请求：</p>
<pre><code>&lt;form action=&quot;testFileUpLoad&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
    &lt;input name=&quot;file&quot; type=&quot;file&quot;&gt;&lt;br&gt;
    描述：&lt;input name=&quot;desc&quot; type=&quot;text&quot;&gt;&lt;br&gt;
    &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;
&lt;/form&gt;</code></pre>
<p>3.3、控制器实现：</p>
<pre><code>@RequestMapping(value=&quot;testFileUpLoad&quot;)
public String testFileUpLoad(@RequestParam(&quot;desc&quot;) String desc,@RequestParam(&quot;file&quot;) MultipartFile file) throws IOException &#123;
    System.out.println(desc);
    //将文件保存到服务器
    InputStream input = file.getInputStream();
    String fileName=file.getOriginalFilename();
    OutputStream out=new FileOutputStream(&quot;d:\\&quot;+fileName);
    byte[] bs=new byte[1024];
    int len=-1;
    while((len=input.read(bs))!=-1) &#123;
        out.write(bs, 0, len);
    &#125;
    out.close();
    input.close();
    return &quot;welcome&quot;;
&#125; </code></pre>
<h1 id="八、拦截器"><a href="#八、拦截器" class="headerlink" title="八、拦截器"></a>八、拦截器</h1><h2 id="1、实现一个接口HandlerInterceptor"><a href="#1、实现一个接口HandlerInterceptor" class="headerlink" title="1、实现一个接口HandlerInterceptor"></a>1、实现一个接口HandlerInterceptor</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Myinterceptor implements HandlerInterceptor&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		System.out.println(&quot;拦截请求&quot;);</span><br><span class="line">		return true;&#x2F;&#x2F;true:拦截之后放行；false:不放行</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,</span><br><span class="line">			ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">		System.out.println(&quot;拦截响应&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		System.out.println(&quot;视图（jsp）渲染完毕被调用&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2、配置到spring-xml中"><a href="#2、配置到spring-xml中" class="headerlink" title="2、配置到spring.xml中"></a>2、配置到spring.xml中</h2><pre><code>&lt;!-- 默认拦截全部 --&gt;
&lt;mvc:interceptors&gt;
    &lt;!-- 配置具体拦截的路径 --&gt;
    &lt;mvc:interceptor&gt;
        &lt;!-- 指定具体拦截的路径 ，ant风格--&gt;
        &lt;mvc:mapping path=&quot;/**&quot;/&gt;
        &lt;!-- 指定具体不拦截的路径 --&gt;
        &lt;mvc:exclude-mapping path=&quot;testConverter&quot;/&gt;
        &lt;bean class=&quot;cn.nap.interceptor.Myinterceptor&quot;&gt;&lt;/bean&gt;
    &lt;/mvc:interceptor&gt;
&lt;/mvc:interceptors&gt;</code></pre>
<h1 id="九、异常处理"><a href="#九、异常处理" class="headerlink" title="九、异常处理"></a>九、异常处理</h1><h2 id="1、HandlerExceptionResolver接口"><a href="#1、HandlerExceptionResolver接口" class="headerlink" title="1、HandlerExceptionResolver接口"></a>1、HandlerExceptionResolver接口</h2><h3 id="1-1、通过注解-ExceptionHandler（只能捕获当前类：catch）"><a href="#1-1、通过注解-ExceptionHandler（只能捕获当前类：catch）" class="headerlink" title="1.1、通过注解@ExceptionHandler（只能捕获当前类：catch）"></a>1.1、通过注解@ExceptionHandler（只能捕获当前类：catch）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;testException&quot;)</span><br><span class="line">public class secondSpringMVCHandler &#123;</span><br><span class="line">	@RequestMapping(&quot;testExceptionHandler&quot;)</span><br><span class="line">	public String  testExceptionHandler() &#123;</span><br><span class="line">		System.out.println(1&#x2F;0);</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	@RequestMapping(&quot;testExceptionHandler1&quot;)</span><br><span class="line">	public String  testExceptionHandler1() &#123;</span><br><span class="line">		int[] num&#x3D;new int[2];</span><br><span class="line">		System.out.println(num[2]);</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@ExceptionHandler(&#123;ArithmeticException.class,ArrayIndexOutOfBoundsException.class&#125;)</span><br><span class="line">	public ModelAndView  handlerArithmeticException(Exception e) &#123;</span><br><span class="line">		ModelAndView mv&#x3D;new ModelAndView(&quot;exception&quot;);</span><br><span class="line">		System.out.println(e+&quot;,&quot;);</span><br><span class="line">		mv.addObject(&quot;e&quot;,e);</span><br><span class="line">&#x2F;&#x2F;		map.put(&quot;e&quot;, e);&#x2F;&#x2F;使用map显示会报错</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.1.1@ExceptionHandler标识的方法的参数为异常类型(Throwable或其子类) ，如果要在把异常信息放入作用域用于显示，可以用Model对象（此外还可以使用ModelAndView）不能包含其他类型的参数（Map、ModelMap,否则会报500）</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200830120723.png"></p>
<p>1.1.2、异常处理路径：最短优先</p>
<h3 id="1-2、-ControllerAdvice（专门放置异常处理的类）"><a href="#1-2、-ControllerAdvice（专门放置异常处理的类）" class="headerlink" title="1.2、@ControllerAdvice（专门放置异常处理的类）"></a>1.2、@ControllerAdvice（专门放置异常处理的类）</h3><p>@ExceptionHandler默认只能捕获当前类中的异常方法。如果发生异常的方法和处理异常的方法不在同一个类中，使用@ControllerAdvice</p>
<blockquote>
<p>①如果一个方法用于处理异常，并且只处理当前类中的异常：@ExceptionHandler</p>
<p>②如果一个方法用于处理异常，并且处理所有类中的异常： 类前加@ControllerAdvice、 处理异常的方法前加@ExceptionHandler</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class MyExceptionHandler &#123;</span><br><span class="line">	@ExceptionHandler(&#123;ArithmeticException.class,ArrayIndexOutOfBoundsException.class&#125;)</span><br><span class="line">	public ModelAndView  handlerArithmeticException(Exception e,Model mm) &#123;</span><br><span class="line">		ModelAndView mv&#x3D;new ModelAndView(&quot;exception&quot;);</span><br><span class="line">		System.out.println(e+&quot;,&quot;);</span><br><span class="line">		mm.addAttribute(&quot;e&quot;, e);</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、ResponseStatusExceptionResolver：自定义异常显示页面"><a href="#2、ResponseStatusExceptionResolver：自定义异常显示页面" class="headerlink" title="2、ResponseStatusExceptionResolver：自定义异常显示页面"></a>2、ResponseStatusExceptionResolver：自定义异常显示页面</h2><h3 id="2-1-ResponseStatus"><a href="#2-1-ResponseStatus" class="headerlink" title="2.1@ResponseStatus"></a>2.1@ResponseStatus</h3><p>2.1.1、单独创建异常类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ResponseStatus(value &#x3D; HttpStatus.FORBIDDEN,reason &#x3D; &quot;数组越界&quot;)</span><br><span class="line">public class MyArrayIndexOutOfBoundsException extends Exception&#123;&#x2F;&#x2F;自定义异常</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testException&quot;)</span><br><span class="line">	public String testException(@RequestParam(&quot;i&quot;) Integer i) throws Exception &#123;</span><br><span class="line">		if(i&#x3D;&#x3D;5) &#123;</span><br><span class="line">			throw new MyArrayIndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>2.1.2、可以放在方法前面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testException&quot;)</span><br><span class="line">	public String testException(@RequestParam(&quot;i&quot;) Integer i)&#123;</span><br><span class="line">		if(i&#x3D;&#x3D;5) &#123;</span><br><span class="line">			return &quot;redirect:testException1&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br><span class="line">	@ResponseStatus(value &#x3D; HttpStatus.TOO_MANY_REQUESTS,reason &#x3D; &quot;异常加在方法前&quot;)</span><br><span class="line">	@RequestMapping(value&#x3D;&quot;testException1&quot;)</span><br><span class="line">	public String testException1() &#123;</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<h2 id="3、异常处理的实现类"><a href="#3、异常处理的实现类" class="headerlink" title="3、异常处理的实现类"></a>3、异常处理的实现类</h2><p>DefaultHandlerExceptionResolver:SPringMVC在一些常见异常的基础上（300 500  405），新增了一些异常，例如：</p>
<ul>
<li>@see org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler<ul>
<li>@see #handleNoSuchRequestHandlingMethod</li>
<li>@see #handleHttpRequestMethodNotSupported  ：如果springmvc的处理方法限制为post方式，如果实际请求为get,则会触发此异常显示的页面</li>
<li>@see #handleHttpMediaTypeNotSupported</li>
<li>@see #handleMissingServletRequestParameter</li>
<li>@see #handleServletRequestBindingException</li>
<li>@see #handleTypeMismatch</li>
<li>@see #handleHttpMessageNotReadable</li>
<li>@see #handleHttpMessageNotWritable</li>
<li>@see #handleMethodArgumentNotValidException</li>
<li>@see #handleMissingServletRequestParameter</li>
<li>@see #handleMissingServletRequestPartException</li>
<li>@see #handleBindException</li>
</ul>
</li>
</ul>
<h2 id="4、通过配置来实现异常的处理"><a href="#4、通过配置来实现异常的处理" class="headerlink" title="4、通过配置来实现异常的处理"></a>4、通过配置来实现异常的处理</h2><p>SimpleMappingExceptionResolver</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean  class&#x3D;&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;</span><br><span class="line">		&lt;!-- 如果发生异常，异常对象会被保存在  exceptionAttribute的value值中；并且会放入request域中 ；异常变量的默认值是 exception--&gt;</span><br><span class="line">		&lt;!--&lt;property name&#x3D;&quot;exceptionAttribute&quot; value&#x3D;&quot;exception&quot;&gt;&lt;&#x2F;property&gt;--&gt;</span><br><span class="line">			&lt;property name&#x3D;&quot;exceptionMappings&quot;&gt;</span><br><span class="line">					&lt;props&gt;</span><br><span class="line">						&lt;!-- 相当于catch(ArithmeticException ex)&#123; 跳转：error &#125; --&gt;</span><br><span class="line">						&lt;prop key&#x3D;&quot;java.lang.ArithmeticException&quot;&gt;</span><br><span class="line">							exception</span><br><span class="line">						&lt;&#x2F;prop&gt;</span><br><span class="line">						&lt;prop key&#x3D;&quot;java.lang.NullPointerException&quot;&gt;</span><br><span class="line">							exception</span><br><span class="line">						&lt;&#x2F;prop&gt;</span><br><span class="line">					</span><br><span class="line">					&lt;&#x2F;props&gt;</span><br><span class="line">			&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h1 id="十、SSM整合"><a href="#十、SSM整合" class="headerlink" title="十、SSM整合"></a>十、SSM整合</h1><h2 id="1、Spring-MyBatis-需要整合：将MyBatis的SqlSessionFactory-交给Spring"><a href="#1、Spring-MyBatis-需要整合：将MyBatis的SqlSessionFactory-交给Spring" class="headerlink" title="1、Spring -  MyBatis   :    需要整合：将MyBatis的SqlSessionFactory 交给Spring"></a>1、Spring -  MyBatis   :    需要整合：将MyBatis的SqlSessionFactory 交给Spring</h2><p>1.1、导包</p>
<p>1.2、类——表 对应（创建entity包以及entity类）</p>
<p>1.3、通过mapper.xml将类——表建立映射关系（创建mapper包XXXMapper.xml）</p>
<p>1.4、配置Spring配置文件（applicationContext.xml）  （Web项目）：</p>
<p>之前使用MyBatis:    conf.xml -&gt;SqlSessionFacotry web.xml</p>
<p>现在整合的时候，需要通过Spring管理SqlSessionFacotry ，因此 产生qlSessionFacotry 所需要的数据库信息 不在放入conf.xml  而需要放入spring配置文件中    </p>
<p>①<code>web.xml</code></p>
<pre><code>&lt;!-- needed for ContextLoaderListener --&gt;
    &lt;context-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
    &lt;/context-param&gt;

    &lt;!-- Bootstraps the root web application context before servlet initialization --&gt;
    &lt;listener&gt;
        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
    &lt;/listener&gt;</code></pre>
<p>②<code>applicationContext.xml</code>数据源（db.properties）、mapper.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;config&quot; class&#x3D;&quot;org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer&quot; &gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;locations&quot;&gt;</span><br><span class="line">			&lt;array&gt;</span><br><span class="line">			&lt;value&gt;classpath:db.properties&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;&#x2F;array&gt;</span><br><span class="line">		&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;</span><br><span class="line">		&lt;!-- 配置database --&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;usename&#125;&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p>③<code>applicationContext.xml</code>配置mapper.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在SpringIoc容器中 创建MyBatis的核心类 SqlSesionFactory --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot; &gt;</span><br><span class="line">	&lt;property ref&#x3D;&quot;dataSource&quot; name&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">	&lt;!-- 加载mapper.xml路径 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;mapperLocations&quot; value&#x3D;&quot;classpath:cn&#x2F;nap&#x2F;mapper&#x2F;*.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 将MyBatis的SqlSessionFactory 交给Spring --&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;sqlSessionFactoryBeanName&quot; value&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;cn.nap.mapper&quot;&#x2F;&gt;</span><br><span class="line">	&lt;!--上面basePackage所在的property的作用：</span><br><span class="line">	将cn.nap.mapper包中，所有的接口 产生与之对应的 动态代理对象（对象名 就是 首字母小写的接口名） </span><br><span class="line">	studentMapper.querystudentByNO();</span><br><span class="line">	 --&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p>1.5、使用Spring整合MyBatis ：将MyBatis的SqlSessionFactory 交给Spring</p>
<p>（见1.4③）</p>
<h2 id="2、继续整合SpringMVC：将springmvc加入项目即可"><a href="#2、继续整合SpringMVC：将springmvc加入项目即可" class="headerlink" title="2、继续整合SpringMVC：将springmvc加入项目即可"></a>2、继续整合SpringMVC：将springmvc加入项目即可</h2><p>2.1、给项目加入SpringMVC支持，<code>web.xml: dispatcherServlet</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;</span><br><span class="line">	&lt;servlet&gt;</span><br><span class="line">		&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">		&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">		&lt;init-param&gt;</span><br><span class="line">			&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">			&lt;param-value&gt;classpath:applicationContext-controller.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">		&lt;&#x2F;init-param&gt;</span><br><span class="line">		&lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">	&lt;&#x2F;servlet&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span><br><span class="line">	&lt;servlet-mapping&gt;</span><br><span class="line">		&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">		&lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">	&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>2.2、配置<code>applicationContext-controller.xml</code>：视图解析器、基础配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置视图解析器InternalResourceViewResolver --&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">	&lt;!-- 配置跳转文件 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;views&#x2F;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 基础配置 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h2>]]></content>
      <tags>
        <tag>java</tag>
        <tag>SpringMVC</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybaatis 笔记</title>
    <url>/2020/08/27/Mybatis-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、Mybatis简介"><a href="#一、Mybatis简介" class="headerlink" title="一、Mybatis简介"></a>一、Mybatis简介</h1><a id="more"></a>

<h2 id="1、ORM"><a href="#1、ORM" class="headerlink" title="1、ORM"></a>1、ORM</h2><p>1.1  ORM：Object Relational Mapping（对象映射关系），是一个将对象与表一一对应的概念，</p>
<p>Mybatis是ORM的一种实现方式，此外还有Hibernate也是一种实现。</p>
<p>1.2  Mybatis通过操作对象来进行对表（数据）的操作</p>
<h2 id="2、Mybatis文档"><a href="#2、Mybatis文档" class="headerlink" title="2、Mybatis文档"></a>2、<a href="https://mybatis.org/mybatis-3/zh/index.html">Mybatis文档</a></h2><h1 id="二、第一个Mybatis程序（基础方式的crud）"><a href="#二、第一个Mybatis程序（基础方式的crud）" class="headerlink" title="二、第一个Mybatis程序（基础方式的crud）"></a>二、第一个Mybatis程序（基础方式的crud）</h1><h2 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h2><blockquote>
<p>mybatis.jar 驱动包</p>
<p>mysql-connector-java.jar</p>
</blockquote>
<h2 id="2、创建要对应的类（包含于包entity）和表"><a href="#2、创建要对应的类（包含于包entity）和表" class="headerlink" title="2、创建要对应的类（包含于包entity）和表"></a>2、创建要对应的<code>类</code>（包含于包entity）和<code>表</code></h2><h2 id="3、创建并配置映射文件XXXMapper-xml"><a href="#3、创建并配置映射文件XXXMapper-xml" class="headerlink" title="3、创建并配置映射文件XXXMapper.xml"></a>3、创建并配置映射文件<code>XXXMapper.xml</code></h2><h3 id="3-1XXXMapper-xml"><a href="#3-1XXXMapper-xml" class="headerlink" title="3.1XXXMapper.xml"></a>3.1<code>XXXMapper.xml</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!-- namespace:此映射文件的唯一标识符 --&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;cn.nap.entity.personMapper&quot;&gt;</span><br><span class="line">	&lt;!-- Sql语句的获取：namespace.id --&gt;</span><br><span class="line">	&lt;!-- 增删查改标签的属性：</span><br><span class="line">		parameterType：输入参数类型</span><br><span class="line">		resultType：返回值的类型（全类名）</span><br><span class="line">	 --&gt;</span><br><span class="line">	&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		select * from person where id &#x3D; #&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br><span class="line">	&lt;select id&#x3D;&quot;queryAllPerson&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		select * from person</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br><span class="line">	&lt;insert id&#x3D;&quot;addPerson&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		insert into person(id,name,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line">	&lt;&#x2F;insert&gt;</span><br><span class="line">	&lt;delete id&#x3D;&quot;deletePersonById&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		delete from person where id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;delete&gt;</span><br><span class="line">	&lt;update id&#x3D;&quot;updatePersonById&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		update person set name&#x3D;#&#123;name&#125;,age&#x3D;#&#123;age&#125; where id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;update&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>

<p>其中放置了增删改查标签，如<code>&lt;select&gt;</code></p>
<h3 id="3-2Mybatis对于sql语句的规定"><a href="#3-2Mybatis对于sql语句的规定" class="headerlink" title="3.2Mybatis对于sql语句的规定"></a>3.2Mybatis对于sql语句的规定</h3><p>①mybatis约定：输入参数parameterType 和 输出参数resultType ，在形式上都只能有一个</p>
<p>②如果输入参数 ：是简单类型（8个基本类型+String） 是可以使用任何占位符,#{xxxx}<br>如果是对象类型，则必须是对象的属性 #{属性名}</p>
<p>③输出参数：  如果返回值类型是一个 对象（如Student），则无论返回一个、还是多个，在resultType都写成cn.nap.entity.Student</p>
<h2 id="4、创建并配置Mybatis的配置文件：conf-xml"><a href="#4、创建并配置Mybatis的配置文件：conf-xml" class="headerlink" title="4、创建并配置Mybatis的配置文件：conf.xml"></a>4、创建并配置Mybatis的配置文件：<code>conf.xml</code></h2><h3 id="4-1conf-xml"><a href="#4-1conf-xml" class="headerlink" title="4.1conf.xml"></a>4.1<code>conf.xml</code></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 通过environments的default属性和environment的id属性指定Mybatis运行环境，该环境可以再SqlSessionFactoryBuilder().build(reader,&quot;development&quot;)进行最终的更改 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 开发环境（自己的计算机） --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">			<span class="comment">&lt;!-- 事务提交方式：</span></span><br><span class="line"><span class="comment">				JDBC：利用JDBC方式处理事务（commit rollback close）</span></span><br><span class="line"><span class="comment">				MANAGED：将事务交给其他组件托管，比如spring。默认会关闭连接，可通过&lt;property name=&quot;closeConnection&quot; value=&quot;false&quot;/&gt;来取消</span></span><br><span class="line"><span class="comment">			 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 指定数据源类型</span></span><br><span class="line"><span class="comment">			UNPOOLED:传统JDBC模式</span></span><br><span class="line"><span class="comment">			POOLED:使用数据库连接池，属于第三方</span></span><br><span class="line"><span class="comment">			JNDI:从Tomcat中获取一个内置的数据库连接池</span></span><br><span class="line"><span class="comment">			 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 配置database --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root123&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 开发环境（真正项目所在的计算机） --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;deployer&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 配置database --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root123&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 开发环境（测试项目所在的计算机） --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;testdeployer&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 配置database --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root123&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/nap/entity/personMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中包括配置数据库和映射文件的载入（包名+文件名）。</p>
<h2 id="4、创建测试"><a href="#4、创建测试" class="headerlink" title="4、创建测试"></a>4、创建测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestMybatis &#123;</span><br><span class="line">	public static void main(String[] args) throws IOException &#123;</span><br><span class="line">		queryPersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line">&#x2F;&#x2F;		addPerson();</span><br><span class="line">		updatePersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line">		deletePersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line">	&#125;</span><br><span class="line">	public static void queryPersonById() throws IOException &#123;</span><br><span class="line">		&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">		Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">		SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		&#x2F;&#x2F;session -connection</span><br><span class="line">		SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">		String statement &#x3D; &quot;cn.nap.entity.personMapper.queryPersonById&quot;;</span><br><span class="line">		Person person &#x3D; session.selectOne(statement,1);</span><br><span class="line">		System.out.println(person);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	public static void queryAllPerson() throws IOException &#123;</span><br><span class="line">		&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">		Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">		SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		&#x2F;&#x2F;session -connection</span><br><span class="line">		SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">		String statement &#x3D; &quot;cn.nap.entity.personMapper.queryAllPerson&quot;;</span><br><span class="line">		List&lt;Person&gt; persons &#x3D; session.selectList(statement);</span><br><span class="line">		System.out.println(persons);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	public static void addPerson() throws IOException &#123;</span><br><span class="line">		&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">		Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">		SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		&#x2F;&#x2F;session -connection</span><br><span class="line">		SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">		String statement &#x3D; &quot;cn.nap.entity.personMapper.addPerson&quot;;</span><br><span class="line">		int count &#x3D; session.insert(statement, new Person(2,&quot;zhao2&quot;,20));</span><br><span class="line">		&#x2F;&#x2F;&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;,需要手动提交</span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(&quot;增加了&quot;+count+&quot;个&quot;);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	public static void deletePersonById() throws IOException &#123;</span><br><span class="line">		&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">		Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">		SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		&#x2F;&#x2F;session -connection</span><br><span class="line">		SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">		String statement &#x3D; &quot;cn.nap.entity.personMapper.deletePersonById&quot;;</span><br><span class="line">		int count &#x3D; session.delete(statement,2);</span><br><span class="line">		&#x2F;&#x2F;&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;,需要手动提交</span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(&quot;删除了&quot;+count+&quot;个&quot;);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	public static void updatePersonById() throws IOException &#123;</span><br><span class="line">		&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">		Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">		SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		&#x2F;&#x2F;session -connection</span><br><span class="line">		SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">		String statement &#x3D; &quot;cn.nap.entity.personMapper.updatePersonById&quot;;</span><br><span class="line">		Person person&#x3D;new Person();</span><br><span class="line">		person.setName(&quot;zhao3&quot;);</span><br><span class="line">		person.setAge(22);</span><br><span class="line">		person.setId(1);</span><br><span class="line">		int count &#x3D; session.update(statement, person);</span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(&quot;修改了&quot;+count+&quot;个&quot;);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>String statement = &quot;cn.nap.entity.personMapper.queryPersonById&quot;;</code>Sql语句的组成为<code>XXXMpper.xml</code>文件内的namespace和id 组成。</p>
<p>如果使用的 事务方式为 jdbc,则需要 手工commit提交，即session.commit();</p>
<h1 id="三、mapper动态代理方式（接口开发，基于约定）的crud"><a href="#三、mapper动态代理方式（接口开发，基于约定）的crud" class="headerlink" title="三、mapper动态代理方式（接口开发，基于约定）的crud"></a>三、mapper动态代理方式（接口开发，基于约定）的crud</h1><h2 id="1、实现"><a href="#1、实现" class="headerlink" title="1、实现"></a>1、实现</h2><h3 id="1-1环境"><a href="#1-1环境" class="headerlink" title="1.1环境"></a>1.1环境</h3><blockquote>
<p>mybatis.jar 驱动包</p>
<p>mysql-connector-java.jar</p>
<p>conf.xml</p>
<p>mapper.xml</p>
</blockquote>
<h3 id="1-2约定Sql语句"><a href="#1-2约定Sql语句" class="headerlink" title="1.2约定Sql语句"></a>1.2约定Sql语句</h3><p>①创建接口（Mapper包），接口如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface PersonMapper &#123;</span><br><span class="line">	&#x2F;&#x2F;1、方法名和mapper.xml中的sql标签id一致</span><br><span class="line">	&#x2F;&#x2F;2、方法的参数与mapper.xml中的输入类型parameterType一致</span><br><span class="line">	&#x2F;&#x2F;3、方法的返回值与mapper.xml中的返回类型resultType一致</span><br><span class="line">	Person queryPersonById(int id);</span><br><span class="line">	List&lt;Person&gt; queryAllPerson();</span><br><span class="line">	void addPerson(Person person);</span><br><span class="line">	void deletePersonById(int id);</span><br><span class="line">	void updatePersonById(Person person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②设置mapper.xml 中namespace值为接口全类名，实现对应关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;cn.nap.mapper.PersonMapper&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>③使用：</p>
<p>a.根据 接口名 找到 mapper.xml文件（根据的是namespace=接口全类名）<br>b.根据 接口的方法名 找到 mapper.xml文件中的SQL标签 （方法名=SQL标签Id值）</p>
<p>c.表现形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void queryPersonById() throws IOException &#123;</span><br><span class="line">	&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">	Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">	SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	&#x2F;&#x2F;session -connection</span><br><span class="line">	SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;动态代理</span><br><span class="line">	PersonMapper personMapper &#x3D; session.getMapper(PersonMapper.class);&#x2F;&#x2F;通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	Person person &#x3D; personMapper.queryPersonById(1);&#x2F;&#x2F;再调用该接口中的方法，程序会自动执行该方法对应的SQL</span><br><span class="line">	</span><br><span class="line">	System.out.println(person);</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3db-properties"><a href="#1-3db-properties" class="headerlink" title="1.3db.properties"></a>1.3<code>db.properties</code></h3><p>①创建file：db.properties，保存数据库信息（key-value）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC</span><br><span class="line">usename&#x3D;root</span><br><span class="line">password&#x3D;root123</span><br></pre></td></tr></table></figure>

<p>②将db.properties在conf.xml中进行配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">	&lt;properties resource&#x3D;&quot;db.properties&quot;&gt;&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>

<p>③conf.xml关于数据库部分的配置更改为：<code>$&#123;...&#125;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">&lt;!-- 配置database --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;usename&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4Mybatis全局参数"><a href="#1-4Mybatis全局参数" class="headerlink" title="1.4Mybatis全局参数"></a>1.4Mybatis全局参数</h3><p>在conf.xml中设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">		&lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;false&quot;  &#x2F;&gt;</span><br><span class="line">		&lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;false&quot;  &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2、别名"><a href="#2、别名" class="headerlink" title="2、别名"></a>2、别名</h2><h3 id="2-1设置单个别名"><a href="#2-1设置单个别名" class="headerlink" title="2.1设置单个别名"></a>2.1设置单个别名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;typeAliases&gt;</span><br><span class="line">		&lt;!-- 单个别名 --&gt;</span><br><span class="line">		&lt;typeAlias type&#x3D;&quot;cn.nap.mapper.PersonMapper&quot; alias&#x3D;&quot;personMapper&quot;&#x2F;&gt;</span><br><span class="line">		&lt;typeAlias type&#x3D;&quot;&quot; alias&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2批量设置别名"><a href="#2-2批量设置别名" class="headerlink" title="2.2批量设置别名"></a>2.2批量设置别名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">	&lt;!-- 批量设置别名 --&gt;</span><br><span class="line">	&lt;package name&#x3D;&quot;cn.nap.entity&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure>

<p>自动将该包中的所有类批量定义别名： 别名就是类名（不带包名，忽略大小写）</p>
<h3 id="2-3Mybatis自带别名"><a href="#2-3Mybatis自带别名" class="headerlink" title="2.3Mybatis自带别名"></a>2.3Mybatis自带别名</h3><p><img src="http://qflrz833q.hn-bkt.clouddn.com/MyBatis%E5%86%85%E7%BD%AE%E5%88%AB%E5%90%8D.png"></p>
<h2 id="3、类型处理器"><a href="#3、类型处理器" class="headerlink" title="3、类型处理器"></a>3、类型处理器</h2><h3 id="3-1Mybatis自带常见处理器"><a href="#3-1Mybatis自带常见处理器" class="headerlink" title="3.1Mybatis自带常见处理器"></a>3.1Mybatis自带常见处理器</h3><table>
<thead>
<tr>
<th>类型处理器</th>
<th>Java类型</th>
<th>JDBC类型</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean<strong>TypeHandler</strong></td>
<td>Boolean，boolean</td>
<td>任何兼容的布尔值</td>
</tr>
<tr>
<td>ByteTypeHandler</td>
<td>Byte，byte</td>
<td>任何兼容的数字或字节类型</td>
</tr>
<tr>
<td>ShortTypeHandler</td>
<td>Short，short</td>
<td>任何兼容的数字或短整型</td>
</tr>
<tr>
<td>IntegerTypeHandler</td>
<td>Integer，int</td>
<td>任何兼容的数字和整型</td>
</tr>
<tr>
<td>LongTypeHandler</td>
<td>Long，long</td>
<td>任何兼容的数字或长整型</td>
</tr>
<tr>
<td>FloatTypeHandler</td>
<td>Float，float</td>
<td>任何兼容的数字或单精度浮点型</td>
</tr>
<tr>
<td>DoubleTypeHandler</td>
<td>Double，double</td>
<td>任何兼容的数字或双精度浮点型</td>
</tr>
<tr>
<td>BigDecimalTypeHandler</td>
<td>BigDecimal</td>
<td>任何兼容的数字或十进制小数类型</td>
</tr>
<tr>
<td>StringTypeHandler</td>
<td>String</td>
<td>CHAR和VARCHAR类型</td>
</tr>
<tr>
<td>ClobTypeHandler</td>
<td>String</td>
<td>CLOB和LONGVARCHAR类型</td>
</tr>
<tr>
<td>NStringTypeHandler</td>
<td>String</td>
<td>NVARCHAR和NCHAR类型</td>
</tr>
<tr>
<td>NClobTypeHandler</td>
<td>String</td>
<td>NCLOB类型</td>
</tr>
<tr>
<td>ByteArrayTypeHandler</td>
<td>byte[]</td>
<td>任何兼容的字节流类型</td>
</tr>
<tr>
<td>BlobTypeHandler</td>
<td>byte[]</td>
<td>BLOB和LONGVARBINARY类型</td>
</tr>
<tr>
<td>DateTypeHandler</td>
<td>Date（java.util）</td>
<td>TIMESTAMP类型</td>
</tr>
<tr>
<td>DateOnlyTypeHandler</td>
<td>Date（java.util）</td>
<td>DATE类型</td>
</tr>
<tr>
<td>TimeOnlyTypeHandler</td>
<td>Date（java.util）</td>
<td>TIME类型</td>
</tr>
<tr>
<td>SqlTimestampTypeHandler</td>
<td>Timestamp（java.sql）</td>
<td>TIMESTAMP类型</td>
</tr>
<tr>
<td>SqlDateTypeHandler</td>
<td>Date（java.sql）</td>
<td>DATE类型</td>
</tr>
<tr>
<td>SqlTimeTypeHandler</td>
<td>Time（java.sql）</td>
<td>TIME类型</td>
</tr>
<tr>
<td>ObjectTypeHandler</td>
<td>任意</td>
<td>其他或未指定类型</td>
</tr>
<tr>
<td>EnumTypeHandler</td>
<td>Enumeration类型</td>
<td>VARCHAR。任何兼容的字符串类型，作为代码存储（而不是索引）。</td>
</tr>
</tbody></table>
<h3 id="3-2自定义Mybatis类型处理器：java-—数据库-jdbc类型"><a href="#3-2自定义Mybatis类型处理器：java-—数据库-jdbc类型" class="headerlink" title="3.2自定义Mybatis类型处理器：java —数据库(jdbc类型)"></a>3.2自定义Mybatis类型处理器：java —数据库(jdbc类型)</h3><p>①创建类型转换器：</p>
<p>方式一：通过接口实现TypeHandler</p>
<p>方式二：通过继承BaseTypeHandler</p>
<p>其中BaseTypeHandler继承了TypeHandler</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BooleanToIntConverter extends BaseTypeHandler&lt;Boolean&gt;&#123;</span><br><span class="line">	&#x2F;&#x2F;java-&gt;db</span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * </span><br><span class="line">	 * @param ps：PreparedStatement对象</span><br><span class="line">	 * @param i：PreparedStatement对象操作参数的位置</span><br><span class="line">	 * @param parameter：java值</span><br><span class="line">	 * @param jdbcType：数据库类型</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	@Override</span><br><span class="line">	public void setNonNullParameter(PreparedStatement ps, int i, Boolean parameter, JdbcType jdbcType)</span><br><span class="line">			throws SQLException &#123;</span><br><span class="line">		if(parameter) &#123;</span><br><span class="line">			ps.setInt(i, 1);</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			ps.setInt(i, 0);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;db(number)-&gt;java(boolean)</span><br><span class="line">	</span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(ResultSet rs, String columnName) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; rs.getInt(columnName);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(ResultSet rs, int columnIndex) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; rs.getInt(columnIndex);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(CallableStatement cs, int columnIndex) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; cs.getInt(columnIndex);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②配置<code>conf.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeHandlers&gt;</span><br><span class="line">		&lt;typeHandler handler&#x3D;&quot;cn.nap.converter.BooleanToIntConverter&quot; javaType&#x3D;&quot;Boolean&quot; jdbcType&#x3D;&quot;INTEGER&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeHandlers&gt;</span><br></pre></td></tr></table></figure>

<p>③配置``mapper.xml`</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 带转换器的查看 --&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithConverser&quot;  parameterType&#x3D;&quot;int&quot; resultMap&#x3D;&quot;personResult&quot;&gt;</span><br><span class="line">	select * from person where id &#x3D; #&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap type&#x3D;&quot;cn.nap.entity.Person&quot; id&#x3D;&quot;personResult&quot;&gt;</span><br><span class="line">	&lt;!-- 主键id和非主键result --&gt;</span><br><span class="line">	&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;age&quot; column&#x3D;&quot;age&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot; javaType&#x3D;&quot;Boolean&quot; jdbcType&#x3D;&quot;INTEGER&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>resultMap可以实现2个功能：<br>1.类型转换<br>2.属性-字段的映射关系</p>
<p>④测试使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void queryPersonByIdWithConverser() throws IOException &#123;</span><br><span class="line">	&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">	Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">	SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	&#x2F;&#x2F;session -connection</span><br><span class="line">	SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;动态代理</span><br><span class="line">	PersonMapper personMapper &#x3D; session.getMapper(PersonMapper.class);&#x2F;&#x2F;通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	Person person &#x3D; personMapper.queryPersonByIdWithConverser(1);&#x2F;&#x2F;再调用该接口中的方法，程序会自动执行该方法对应的SQL</span><br><span class="line">	</span><br><span class="line">	System.out.println(person);</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、输入类型parameterType接受标识符-、-的区别"><a href="#4、输入类型parameterType接受标识符-、-的区别" class="headerlink" title="4、输入类型parameterType接受标识符#{}、${}的区别"></a>4、输入类型parameterType接受标识符#{}、${}的区别</h2><h3 id="4-1简单类型"><a href="#4-1简单类型" class="headerlink" title="4.1简单类型"></a>4.1简单类型</h3><p>①接受方式：</p>
<p>方式一：#{任意值}<br>方式二：${value} ，其中的标识符只能是value</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">	select * from person where id &#x3D; #&#123;xxx&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		select * from person where id &#x3D; $&#123;value&#125; </span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>②两种方式区别</p>
<p>#{}自动给String类型加上’’  （自动类型转换）</p>
<p> ${} 原样输出，但是适合于动态排序（动态字段），手动添加</p>
<p><code>&#39;$&#123;value&#125;&#39;</code></p>
<p>动态排序：<br>select stuno,stuname,stuage  from student  order by ${value} asc</p>
<p>③此外：</p>
<p>#{}可以防止SQL注入<br> ${}不防止</p>
<p>④${}、#{}相同之处：<br>都可以 获取对象的值 （嵌套类型对象）</p>
<h3 id="4-2引用类型"><a href="#4-2引用类型" class="headerlink" title="4.2引用类型"></a>4.2引用类型</h3><p>方式一：#{属性名}<br>方式二：${属性名}</p>
<h2 id="5、parameterType值为HashMap"><a href="#5、parameterType值为HashMap" class="headerlink" title="5、parameterType值为HashMap"></a>5、parameterType值为HashMap</h2><p>①输入对象为HashMap：<br>where stuage= #{stuAge}</p>
<p>用map中key的值 匹配 占位符#{stuAge}，如果匹配成功 就用map的value替换占位符</p>
<h3 id="6、Mybatis调用存储过程"><a href="#6、Mybatis调用存储过程" class="headerlink" title="6、Mybatis调用存储过程"></a>6、Mybatis调用存储过程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryCountByGradeWithProcedure&quot; statementType&#x3D;&quot;CALLABLE&quot;  parameterType&#x3D;&quot;HashMap&quot; &gt;</span><br><span class="line">		&#123;</span><br><span class="line">			CALL queryCountByGradeWithProcedure(</span><br><span class="line">				#&#123;gName,jdbcType&#x3D;VARCHAR,mode&#x3D;IN&#125;,</span><br><span class="line">				#&#123;scount,jdbcType&#x3D;INTEGER,mode&#x3D;OUT&#125;</span><br><span class="line">			) </span><br><span class="line">		&#125;	</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>其中 通过statementType=”CALLABLE”设置SQL的执行方式是存储过程。 存储过程的输入参数gName需要通过HashMap来指定<br>在使用时，通过hashmap的put方法传入输入参数的值；通过hashmap的Get方法 获取输出参数的值。</p>
<h1 id="四、Mybatis实现动态Sql"><a href="#四、Mybatis实现动态Sql" class="headerlink" title="四、Mybatis实现动态Sql"></a>四、Mybatis实现动态Sql</h1><h2 id="1、动态SQL"><a href="#1、动态SQL" class="headerlink" title="1、动态SQL"></a>1、动态SQL</h2><h3 id="1-1where-1-1实现"><a href="#1-1where-1-1实现" class="headerlink" title="1.1where 1=1实现"></a>1.1<code>where 1=1</code>实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">	select id,name,age from person where 1&#x3D;1</span><br><span class="line">	&lt;!-- test&#x3D;&quot;cn.nap.entity.Person中有id属性且属性值不为null&quot; --&gt;</span><br><span class="line">	&lt;if test&#x3D;&quot;id!&#x3D;null and id!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">		and id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;if test&#x3D;&quot;name!&#x3D;null and name!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">		and name&#x3D;#&#123;name&#125;</span><br><span class="line">	&lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-2where-1-1-与-lt-where-gt-标签"><a href="#1-2where-1-1-与-lt-where-gt-标签" class="headerlink" title="1.2where 1=1 与&lt;where&gt;标签"></a>1.2<code>where 1=1</code> 与<code>&lt;where&gt;标签</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">	select id,name,age from person</span><br><span class="line">	&lt;where&gt;</span><br><span class="line">		&lt;!-- test&#x3D;&quot;cn.nap.entity.Person中有id属性且属性值不为null&quot; --&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;id!&#x3D;null and id!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">			and id&#x3D;#&#123;id&#125;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;name!&#x3D;null and name!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">			and name&#x3D;#&#123;name&#125;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>说明：<code>&lt;where&gt;标签</code>会根据实际情况自动助理其后的第一个<code>and</code></p>
<h3 id="1-3foreach"><a href="#1-3foreach" class="headerlink" title="1.3foreach"></a>1.3<code>foreach</code></h3><p>①foreach迭代的类型：数组、对象数组、集合、属性</p>
<p>②将多个元素放入属性中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;Grade&quot;&gt;</span><br><span class="line">	select id,name,age from person</span><br><span class="line">	&lt;where&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;names!&#x3D;null and names.zize&gt;0&quot;&gt;</span><br><span class="line">			&lt;foreach collection&#x3D;&quot;names&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">				#&#123;name&#125;</span><br><span class="line">			&lt;&#x2F;foreach&gt;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>③将多个元素放入<code>简单类型</code>数组中：<code>array</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int[]&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;array!&#x3D;null and array.length&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;array&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>④将多个元素放入List中：<code>list</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;list&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;list!&#x3D;null and list.size&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;list&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>⑤对象数组：Person[] persons=new Person[]{person1,person2,personn3}  <code>Object[]</code>+<code>array</code>+<code>对象.属性</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;Object[]&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;array!&#x3D;null and array.length&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;array&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;person&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;person.name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4SQL片段"><a href="#1-4SQL片段" class="headerlink" title="1.4SQL片段"></a>1.4SQL片段</h3><p><code>&lt;sql&gt;</code>和<code>&lt;include&gt;</code></p>
<h2 id="2、关联查询"><a href="#2、关联查询" class="headerlink" title="2、关联查询"></a>2、关联查询</h2><h3 id="2-1一对一"><a href="#2-1一对一" class="headerlink" title="2.1一对一"></a>2.1一对一</h3><p>①方式一：业务扩展类</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybaatis 笔记</title>
    <url>/2020/08/27/Mybatis-%E7%AC%94%E8%AE%B0%20(2)/</url>
    <content><![CDATA[<h1 id="一、Mybatis简介"><a href="#一、Mybatis简介" class="headerlink" title="一、Mybatis简介"></a>一、Mybatis简介</h1><a id="more"></a>

<h2 id="1、ORM"><a href="#1、ORM" class="headerlink" title="1、ORM"></a>1、ORM</h2><p>1.1  ORM：Object Relational Mapping（对象映射关系），是一个将对象与表一一对应的概念，</p>
<p>Mybatis是ORM的一种实现方式，此外还有Hibernate也是一种实现。</p>
<p>1.2  Mybatis通过操作对象来进行对表（数据）的操作</p>
<h2 id="2、Mybatis文档"><a href="#2、Mybatis文档" class="headerlink" title="2、Mybatis文档"></a>2、<a href="https://mybatis.org/mybatis-3/zh/index.html">Mybatis文档</a></h2><h1 id="二、第一个Mybatis程序（基础方式的crud）"><a href="#二、第一个Mybatis程序（基础方式的crud）" class="headerlink" title="二、第一个Mybatis程序（基础方式的crud）"></a>二、第一个Mybatis程序（基础方式的crud）</h1><h2 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h2><blockquote>
<p>mybatis.jar 驱动包</p>
<p>mysql-connector-java.jar</p>
</blockquote>
<h2 id="2、创建要对应的类（包含于包entity）和表"><a href="#2、创建要对应的类（包含于包entity）和表" class="headerlink" title="2、创建要对应的类（包含于包entity）和表"></a>2、创建要对应的<code>类</code>（包含于包entity）和<code>表</code></h2><h2 id="3、创建并配置映射文件XXXMapper-xml"><a href="#3、创建并配置映射文件XXXMapper-xml" class="headerlink" title="3、创建并配置映射文件XXXMapper.xml"></a>3、创建并配置映射文件<code>XXXMapper.xml</code></h2><h3 id="3-1XXXMapper-xml"><a href="#3-1XXXMapper-xml" class="headerlink" title="3.1XXXMapper.xml"></a>3.1<code>XXXMapper.xml</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!-- namespace:此映射文件的唯一标识符 --&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;cn.nap.entity.personMapper&quot;&gt;</span><br><span class="line">	&lt;!-- Sql语句的获取：namespace.id --&gt;</span><br><span class="line">	&lt;!-- 增删查改标签的属性：</span><br><span class="line">		parameterType：输入参数类型</span><br><span class="line">		resultType：返回值的类型（全类名）</span><br><span class="line">	 --&gt;</span><br><span class="line">	&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		select * from person where id &#x3D; #&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br><span class="line">	&lt;select id&#x3D;&quot;queryAllPerson&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		select * from person</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br><span class="line">	&lt;insert id&#x3D;&quot;addPerson&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		insert into person(id,name,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line">	&lt;&#x2F;insert&gt;</span><br><span class="line">	&lt;delete id&#x3D;&quot;deletePersonById&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		delete from person where id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;delete&gt;</span><br><span class="line">	&lt;update id&#x3D;&quot;updatePersonById&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		update person set name&#x3D;#&#123;name&#125;,age&#x3D;#&#123;age&#125; where id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;update&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>

<p>其中放置了增删改查标签，如<code>&lt;select&gt;</code></p>
<h3 id="3-2Mybatis对于sql语句的规定"><a href="#3-2Mybatis对于sql语句的规定" class="headerlink" title="3.2Mybatis对于sql语句的规定"></a>3.2Mybatis对于sql语句的规定</h3><p>①mybatis约定：输入参数parameterType 和 输出参数resultType ，在形式上都只能有一个</p>
<p>②如果输入参数 ：是简单类型（8个基本类型+String） 是可以使用任何占位符,#{xxxx}<br>如果是对象类型，则必须是对象的属性 #{属性名}</p>
<p>③输出参数：  如果返回值类型是一个 对象（如Student），则无论返回一个、还是多个，在resultType都写成cn.nap.entity.Student</p>
<h2 id="4、创建并配置Mybatis的配置文件：conf-xml"><a href="#4、创建并配置Mybatis的配置文件：conf-xml" class="headerlink" title="4、创建并配置Mybatis的配置文件：conf.xml"></a>4、创建并配置Mybatis的配置文件：<code>conf.xml</code></h2><h3 id="4-1conf-xml"><a href="#4-1conf-xml" class="headerlink" title="4.1conf.xml"></a>4.1<code>conf.xml</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 通过environments的default属性和environment的id属性指定Mybatis运行环境，该环境可以再SqlSessionFactoryBuilder().build(reader,&quot;development&quot;)进行最终的更改 --&gt;</span><br><span class="line">	&lt;environments default&#x3D;&quot;development&quot;&gt;</span><br><span class="line">		&lt;!-- 开发环境（自己的计算机） --&gt;</span><br><span class="line">		&lt;environment id&#x3D;&quot;development&quot;&gt;</span><br><span class="line">		</span><br><span class="line">			&lt;!-- 事务提交方式：</span><br><span class="line">				JDBC：利用JDBC方式处理事务（commit rollback close）</span><br><span class="line">				MANAGED：将事务交给其他组件托管，比如spring。默认会关闭连接，可通过&lt;property name&#x3D;&quot;closeConnection&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;来取消</span><br><span class="line">			 --&gt;</span><br><span class="line">			&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">			&lt;!-- 指定数据源类型</span><br><span class="line">			UNPOOLED:传统JDBC模式</span><br><span class="line">			POOLED:使用数据库连接池，属于第三方</span><br><span class="line">			JNDI:从Tomcat中获取一个内置的数据库连接池</span><br><span class="line">			 --&gt;</span><br><span class="line">			&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">				&lt;!-- 配置database --&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root123&quot;&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;dataSource&gt;</span><br><span class="line">		&lt;&#x2F;environment&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!-- 开发环境（真正项目所在的计算机） --&gt;</span><br><span class="line">		&lt;environment id&#x3D;&quot;deployer&quot;&gt;</span><br><span class="line">			&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">			&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">				&lt;!-- 配置database --&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root123&quot;&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;dataSource&gt;</span><br><span class="line">		&lt;&#x2F;environment&gt;</span><br><span class="line">		&lt;!-- 开发环境（测试项目所在的计算机） --&gt;</span><br><span class="line">		&lt;environment id&#x3D;&quot;testdeployer&quot;&gt;</span><br><span class="line">			&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">			&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">				&lt;!-- 配置database --&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root123&quot;&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;dataSource&gt;</span><br><span class="line">		&lt;&#x2F;environment&gt;</span><br><span class="line">	&lt;&#x2F;environments&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;!-- 加载映射文件 --&gt;</span><br><span class="line">&lt;mapper resource&#x3D;&quot;cn&#x2F;nap&#x2F;entity&#x2F;personMapper.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<p>其中包括配置数据库和映射文件的载入（包名+文件名）。</p>
<h2 id="4、创建测试"><a href="#4、创建测试" class="headerlink" title="4、创建测试"></a>4、创建测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		queryPersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line"><span class="comment">//		addPerson();</span></span><br><span class="line">		updatePersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line">		deletePersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		String statement = <span class="string">&quot;cn.nap.entity.personMapper.queryPersonById&quot;</span>;</span><br><span class="line">		Person person = session.selectOne(statement,<span class="number">1</span>);</span><br><span class="line">		System.out.println(person);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryAllPerson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		String statement = <span class="string">&quot;cn.nap.entity.personMapper.queryAllPerson&quot;</span>;</span><br><span class="line">		List&lt;Person&gt; persons = session.selectList(statement);</span><br><span class="line">		System.out.println(persons);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addPerson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		String statement = <span class="string">&quot;cn.nap.entity.personMapper.addPerson&quot;</span>;</span><br><span class="line">		<span class="keyword">int</span> count = session.insert(statement, <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">&quot;zhao2&quot;</span>,<span class="number">20</span>));</span><br><span class="line">		<span class="comment">//&lt;transactionManager type=&quot;JDBC&quot;/&gt;,需要手动提交</span></span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(<span class="string">&quot;增加了&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deletePersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		String statement = <span class="string">&quot;cn.nap.entity.personMapper.deletePersonById&quot;</span>;</span><br><span class="line">		<span class="keyword">int</span> count = session.delete(statement,<span class="number">2</span>);</span><br><span class="line">		<span class="comment">//&lt;transactionManager type=&quot;JDBC&quot;/&gt;,需要手动提交</span></span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(<span class="string">&quot;删除了&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updatePersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		String statement = <span class="string">&quot;cn.nap.entity.personMapper.updatePersonById&quot;</span>;</span><br><span class="line">		Person person=<span class="keyword">new</span> Person();</span><br><span class="line">		person.setName(<span class="string">&quot;zhao3&quot;</span>);</span><br><span class="line">		person.setAge(<span class="number">22</span>);</span><br><span class="line">		person.setId(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> count = session.update(statement, person);</span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(<span class="string">&quot;修改了&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>String statement = &quot;cn.nap.entity.personMapper.queryPersonById&quot;;</code>Sql语句的组成为<code>XXXMpper.xml</code>文件内的namespace和id 组成。</p>
<p>如果使用的 事务方式为 jdbc,则需要 手工commit提交，即session.commit()；<code>如果要设置自动提交：</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sessioonFactory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>



<h1 id="三、mapper动态代理方式（接口开发，基于约定）的crud"><a href="#三、mapper动态代理方式（接口开发，基于约定）的crud" class="headerlink" title="三、mapper动态代理方式（接口开发，基于约定）的crud"></a>三、mapper动态代理方式（接口开发，基于约定）的crud</h1><h2 id="1、实现"><a href="#1、实现" class="headerlink" title="1、实现"></a>1、实现</h2><h3 id="1-1环境"><a href="#1-1环境" class="headerlink" title="1.1环境"></a>1.1环境</h3><blockquote>
<p>mybatis.jar 驱动包</p>
<p>mysql-connector-java.jar</p>
<p>conf.xml</p>
<p>mapper.xml</p>
</blockquote>
<h3 id="1-2约定Sql语句"><a href="#1-2约定Sql语句" class="headerlink" title="1.2约定Sql语句"></a>1.2约定Sql语句</h3><p>①创建接口（Mapper包），接口如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface PersonMapper &#123;</span><br><span class="line">	&#x2F;&#x2F;1、方法名和mapper.xml中的sql标签id一致</span><br><span class="line">	&#x2F;&#x2F;2、方法的参数与mapper.xml中的输入类型parameterType一致</span><br><span class="line">	&#x2F;&#x2F;3、方法的返回值与mapper.xml中的返回类型resultType一致</span><br><span class="line">	Person queryPersonById(int id);</span><br><span class="line">	List&lt;Person&gt; queryAllPerson();</span><br><span class="line">	void addPerson(Person person);</span><br><span class="line">	void deletePersonById(int id);</span><br><span class="line">	void updatePersonById(Person person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②设置mapper.xml 中namespace值为接口全类名，实现对应关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;cn.nap.mapper.PersonMapper&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>③使用：</p>
<p>a.根据 接口名 找到 mapper.xml文件（根据的是namespace=接口全类名）<br>b.根据 接口的方法名 找到 mapper.xml文件中的SQL标签 （方法名=SQL标签Id值）</p>
<p>c.表现形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void queryPersonById() throws IOException &#123;</span><br><span class="line">	&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">	Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">	SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	&#x2F;&#x2F;session -connection</span><br><span class="line">	SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;动态代理</span><br><span class="line">	PersonMapper personMapper &#x3D; session.getMapper(PersonMapper.class);&#x2F;&#x2F;通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	Person person &#x3D; personMapper.queryPersonById(1);&#x2F;&#x2F;再调用该接口中的方法，程序会自动执行该方法对应的SQL</span><br><span class="line">	</span><br><span class="line">	System.out.println(person);</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3db-properties"><a href="#1-3db-properties" class="headerlink" title="1.3db.properties"></a>1.3<code>db.properties</code></h3><p>①创建file：db.properties，保存数据库信息（key-value）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC</span><br><span class="line">usename&#x3D;root</span><br><span class="line">password&#x3D;root123</span><br></pre></td></tr></table></figure>

<p>②将db.properties在conf.xml中进行配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">	&lt;properties resource&#x3D;&quot;db.properties&quot;&gt;&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>

<p>③conf.xml关于数据库部分的配置更改为：<code>$&#123;...&#125;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">&lt;!-- 配置database --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;usename&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4Mybatis全局参数"><a href="#1-4Mybatis全局参数" class="headerlink" title="1.4Mybatis全局参数"></a>1.4Mybatis全局参数</h3><p>在conf.xml中设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">		&lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;false&quot;  &#x2F;&gt;</span><br><span class="line">		&lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;false&quot;  &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2、别名（conf-xml）"><a href="#2、别名（conf-xml）" class="headerlink" title="2、别名（conf.xml）"></a>2、别名（conf.xml）</h2><h3 id="2-1设置单个别名"><a href="#2-1设置单个别名" class="headerlink" title="2.1设置单个别名"></a>2.1设置单个别名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;typeAliases&gt;</span><br><span class="line">		&lt;!-- 单个别名 --&gt;</span><br><span class="line">		&lt;typeAlias type&#x3D;&quot;cn.nap.mapper.PersonMapper&quot; alias&#x3D;&quot;personMapper&quot;&#x2F;&gt;</span><br><span class="line">		&lt;typeAlias type&#x3D;&quot;&quot; alias&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2批量设置别名"><a href="#2-2批量设置别名" class="headerlink" title="2.2批量设置别名"></a>2.2批量设置别名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">	&lt;!-- 批量设置别名 --&gt;</span><br><span class="line">	&lt;package name&#x3D;&quot;cn.nap.entity&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure>

<p>自动将该包中和子包中的所有类批量定义别名： 别名就是类名（不带包名，忽略大小写）</p>
<p>如果在批量设置别名时，出现了冲突。可以在相同类名前使用@Alias(“myStudent”)区分</p>
<h3 id="2-3Mybatis自带别名"><a href="#2-3Mybatis自带别名" class="headerlink" title="2.3Mybatis自带别名"></a>2.3Mybatis自带别名</h3><p><img src="http://qflrz833q.hn-bkt.clouddn.com/MyBatis%E5%86%85%E7%BD%AE%E5%88%AB%E5%90%8D.png"></p>
<h2 id="3、类型处理器"><a href="#3、类型处理器" class="headerlink" title="3、类型处理器"></a>3、类型处理器</h2><h3 id="3-1Mybatis自带常见处理器"><a href="#3-1Mybatis自带常见处理器" class="headerlink" title="3.1Mybatis自带常见处理器"></a>3.1Mybatis自带常见处理器</h3><table>
<thead>
<tr>
<th>类型处理器</th>
<th>Java类型</th>
<th>JDBC类型</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean<strong>TypeHandler</strong></td>
<td>Boolean，boolean</td>
<td>任何兼容的布尔值</td>
</tr>
<tr>
<td>ByteTypeHandler</td>
<td>Byte，byte</td>
<td>任何兼容的数字或字节类型</td>
</tr>
<tr>
<td>ShortTypeHandler</td>
<td>Short，short</td>
<td>任何兼容的数字或短整型</td>
</tr>
<tr>
<td>IntegerTypeHandler</td>
<td>Integer，int</td>
<td>任何兼容的数字和整型</td>
</tr>
<tr>
<td>LongTypeHandler</td>
<td>Long，long</td>
<td>任何兼容的数字或长整型</td>
</tr>
<tr>
<td>FloatTypeHandler</td>
<td>Float，float</td>
<td>任何兼容的数字或单精度浮点型</td>
</tr>
<tr>
<td>DoubleTypeHandler</td>
<td>Double，double</td>
<td>任何兼容的数字或双精度浮点型</td>
</tr>
<tr>
<td>BigDecimalTypeHandler</td>
<td>BigDecimal</td>
<td>任何兼容的数字或十进制小数类型</td>
</tr>
<tr>
<td>StringTypeHandler</td>
<td>String</td>
<td>CHAR和VARCHAR类型</td>
</tr>
<tr>
<td>ClobTypeHandler</td>
<td>String</td>
<td>CLOB和LONGVARCHAR类型</td>
</tr>
<tr>
<td>NStringTypeHandler</td>
<td>String</td>
<td>NVARCHAR和NCHAR类型</td>
</tr>
<tr>
<td>NClobTypeHandler</td>
<td>String</td>
<td>NCLOB类型</td>
</tr>
<tr>
<td>ByteArrayTypeHandler</td>
<td>byte[]</td>
<td>任何兼容的字节流类型</td>
</tr>
<tr>
<td>BlobTypeHandler</td>
<td>byte[]</td>
<td>BLOB和LONGVARBINARY类型</td>
</tr>
<tr>
<td>DateTypeHandler</td>
<td>Date（java.util）</td>
<td>TIMESTAMP类型</td>
</tr>
<tr>
<td>DateOnlyTypeHandler</td>
<td>Date（java.util）</td>
<td>DATE类型</td>
</tr>
<tr>
<td>TimeOnlyTypeHandler</td>
<td>Date（java.util）</td>
<td>TIME类型</td>
</tr>
<tr>
<td>SqlTimestampTypeHandler</td>
<td>Timestamp（java.sql）</td>
<td>TIMESTAMP类型</td>
</tr>
<tr>
<td>SqlDateTypeHandler</td>
<td>Date（java.sql）</td>
<td>DATE类型</td>
</tr>
<tr>
<td>SqlTimeTypeHandler</td>
<td>Time（java.sql）</td>
<td>TIME类型</td>
</tr>
<tr>
<td>ObjectTypeHandler</td>
<td>任意</td>
<td>其他或未指定类型</td>
</tr>
<tr>
<td>EnumTypeHandler</td>
<td>Enumeration类型</td>
<td>VARCHAR。任何兼容的字符串类型，作为代码存储（而不是索引）。</td>
</tr>
</tbody></table>
<h3 id="3-2自定义Mybatis类型处理器：java-—数据库-jdbc类型"><a href="#3-2自定义Mybatis类型处理器：java-—数据库-jdbc类型" class="headerlink" title="3.2自定义Mybatis类型处理器：java —数据库(jdbc类型)"></a>3.2自定义Mybatis类型处理器：java —数据库(jdbc类型)</h3><p>①创建类型转换器：</p>
<p>方式一：通过接口实现TypeHandler</p>
<p>方式二：通过继承BaseTypeHandler</p>
<p>其中BaseTypeHandler继承了TypeHandler</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BooleanToIntConverter extends BaseTypeHandler&lt;Boolean&gt;&#123;</span><br><span class="line">	&#x2F;&#x2F;java-&gt;db</span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * </span><br><span class="line">	 * @param ps：PreparedStatement对象</span><br><span class="line">	 * @param i：PreparedStatement对象操作参数的位置</span><br><span class="line">	 * @param parameter：java值</span><br><span class="line">	 * @param jdbcType：数据库类型</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	@Override</span><br><span class="line">	public void setNonNullParameter(PreparedStatement ps, int i, Boolean parameter, JdbcType jdbcType)</span><br><span class="line">			throws SQLException &#123;</span><br><span class="line">		if(parameter) &#123;</span><br><span class="line">			ps.setInt(i, 1);</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			ps.setInt(i, 0);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;db(number)-&gt;java(boolean)</span><br><span class="line">	</span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(ResultSet rs, String columnName) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; rs.getInt(columnName);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(ResultSet rs, int columnIndex) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; rs.getInt(columnIndex);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(CallableStatement cs, int columnIndex) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; cs.getInt(columnIndex);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②配置<code>conf.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeHandlers&gt;</span><br><span class="line">		&lt;typeHandler handler&#x3D;&quot;cn.nap.converter.BooleanToIntConverter&quot; javaType&#x3D;&quot;Boolean&quot; jdbcType&#x3D;&quot;INTEGER&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeHandlers&gt;</span><br></pre></td></tr></table></figure>

<p>③配置``mapper.xml`</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 带转换器的查看 --&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithConverser&quot;  parameterType&#x3D;&quot;int&quot; resultMap&#x3D;&quot;personResult&quot;&gt;</span><br><span class="line">	select * from person where id &#x3D; #&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap type&#x3D;&quot;cn.nap.entity.Person&quot; id&#x3D;&quot;personResult&quot;&gt;</span><br><span class="line">	&lt;!-- 主键id和非主键result --&gt;</span><br><span class="line">	&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;age&quot; column&#x3D;&quot;age&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot; javaType&#x3D;&quot;Boolean&quot; jdbcType&#x3D;&quot;INTEGER&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>resultMap可以实现2个功能：<br>1.类型转换<br>2.属性-字段的映射关系</p>
<p>④测试使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void queryPersonByIdWithConverser() throws IOException &#123;</span><br><span class="line">	&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">	Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">	SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	&#x2F;&#x2F;session -connection</span><br><span class="line">	SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;动态代理</span><br><span class="line">	PersonMapper personMapper &#x3D; session.getMapper(PersonMapper.class);&#x2F;&#x2F;通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	Person person &#x3D; personMapper.queryPersonByIdWithConverser(1);&#x2F;&#x2F;再调用该接口中的方法，程序会自动执行该方法对应的SQL</span><br><span class="line">	</span><br><span class="line">	System.out.println(person);</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、输入类型parameterType接受标识符-、-的区别"><a href="#4、输入类型parameterType接受标识符-、-的区别" class="headerlink" title="4、输入类型parameterType接受标识符#{}、${}的区别"></a>4、输入类型parameterType接受标识符#{}、${}的区别</h2><h3 id="4-1简单类型"><a href="#4-1简单类型" class="headerlink" title="4.1简单类型"></a>4.1简单类型</h3><p>①接受方式：</p>
<p>方式一：#{任意值}<br>方式二：${value} ，其中的标识符只能是value</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">	select * from person where id &#x3D; #&#123;xxx&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		select * from person where id &#x3D; $&#123;value&#125; </span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>②两种方式区别</p>
<p>#{}自动给String类型加上’’  （自动类型转换）</p>
<p> ${} 原样输出，但是适合于动态排序（动态字段），手动添加</p>
<p><code>&#39;$&#123;value&#125;&#39;</code></p>
<p>动态排序：<br>select stuno,stuname,stuage  from student  order by ${value} asc</p>
<p>③此外：</p>
<p>#{}可以防止SQL注入<br> ${}不防止</p>
<p>④${}、#{}相同之处：<br>都可以 获取对象的值 （嵌套类型对象）</p>
<h3 id="4-2引用类型"><a href="#4-2引用类型" class="headerlink" title="4.2引用类型"></a>4.2引用类型</h3><p>方式一：#{属性名}<br>方式二：${属性名}</p>
<h2 id="5、parameterType值为HashMap"><a href="#5、parameterType值为HashMap" class="headerlink" title="5、parameterType值为HashMap"></a>5、parameterType值为HashMap</h2><p>①输入对象为HashMap：<br>where stuage= #{stuAge}</p>
<p>用map中key的值 匹配 占位符#{stuAge}，如果匹配成功 就用map的value替换占位符</p>
<h3 id="6、Mybatis调用存储过程"><a href="#6、Mybatis调用存储过程" class="headerlink" title="6、Mybatis调用存储过程"></a>6、Mybatis调用存储过程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryCountByGradeWithProcedure&quot; statementType&#x3D;&quot;CALLABLE&quot;  parameterType&#x3D;&quot;HashMap&quot; &gt;</span><br><span class="line">		&#123;</span><br><span class="line">			CALL queryCountByGradeWithProcedure(</span><br><span class="line">				#&#123;gName,jdbcType&#x3D;VARCHAR,mode&#x3D;IN&#125;,</span><br><span class="line">				#&#123;scount,jdbcType&#x3D;INTEGER,mode&#x3D;OUT&#125;</span><br><span class="line">			) </span><br><span class="line">		&#125;	</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>其中 通过statementType=”CALLABLE”设置SQL的执行方式是存储过程。 存储过程的输入参数gName需要通过HashMap来指定<br>在使用时，通过hashmap的put方法传入输入参数的值；通过hashmap的Get方法 获取输出参数的值。</p>
<h1 id="四、Mybatis实现动态Sql"><a href="#四、Mybatis实现动态Sql" class="headerlink" title="四、Mybatis实现动态Sql"></a>四、Mybatis实现动态Sql</h1><h2 id="1、动态SQL"><a href="#1、动态SQL" class="headerlink" title="1、动态SQL"></a>1、动态SQL</h2><h3 id="1-1where-1-1实现"><a href="#1-1where-1-1实现" class="headerlink" title="1.1where 1=1实现"></a>1.1<code>where 1=1</code>实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">	select id,name,age from person where 1&#x3D;1</span><br><span class="line">	&lt;!-- test&#x3D;&quot;cn.nap.entity.Person中有id属性且属性值不为null&quot; --&gt;</span><br><span class="line">	&lt;if test&#x3D;&quot;id!&#x3D;null and id!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">		and id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;if test&#x3D;&quot;name!&#x3D;null and name!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">		and name&#x3D;#&#123;name&#125;</span><br><span class="line">	&lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-2where-1-1-与-lt-where-gt-标签"><a href="#1-2where-1-1-与-lt-where-gt-标签" class="headerlink" title="1.2where 1=1 与&lt;where&gt;标签"></a>1.2<code>where 1=1</code> 与<code>&lt;where&gt;标签</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">	select id,name,age from person</span><br><span class="line">	&lt;where&gt;</span><br><span class="line">		&lt;!-- test&#x3D;&quot;cn.nap.entity.Person中有id属性且属性值不为null&quot; --&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;id!&#x3D;null and id!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">			and id&#x3D;#&#123;id&#125;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;name!&#x3D;null and name!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">			and name&#x3D;#&#123;name&#125;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>说明：<code>&lt;where&gt;标签</code>会根据实际情况自动助理其后的第一个<code>and</code></p>
<h3 id="1-3trim标签：可以处理拼接sql中-【开头或结尾】第一个and（或其他）"><a href="#1-3trim标签：可以处理拼接sql中-【开头或结尾】第一个and（或其他）" class="headerlink" title="1.3trim标签：可以处理拼接sql中 【开头或结尾】第一个and（或其他）"></a>1.3<code>trim</code>标签：可以处理拼接sql中 【开头或结尾】第一个and（或其他）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;stuName != null and stuName !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and stuName like &#x27;%$&#123;stuName&#125;%&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;graName != null and graName !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and graName like &#x27;%$&#123;graName&#125;%&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;stuAge != null and stuAge !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and stuAge = #&#123;stuAge&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;_queryName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+stuName+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;_parameter.stuName != null and _parameter.stuName !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        stuName like #&#123;_queryName&#125; and</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;graName != null and graName !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        graName like &#x27;%$&#123;graName&#125;%&#x27; and</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;stuAge != null and stuAge !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        stuAge = #&#123;stuAge&#125; and</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据学号，修改学生信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudentByNo&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">parameterType</span>=<span class="string">&quot;com.yanqun.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    update student</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuName !=null and stuName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            stuName=#&#123;stuName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuAge !=null and stuAge !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            stuAge=#&#123;stuAge&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;graName !=null and graName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            graName=#&#123;graName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    where stuNo=#&#123;stuNo&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3foreach"><a href="#1-3foreach" class="headerlink" title="1.3foreach"></a>1.3<code>foreach</code></h3><p>①foreach迭代的类型：数组、对象数组、集合、属性</p>
<p>②将多个元素放入属性中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;Grade&quot;&gt;</span><br><span class="line">	select id,name,age from person</span><br><span class="line">	&lt;where&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;names!&#x3D;null and names.zize&gt;0&quot;&gt;</span><br><span class="line">			&lt;foreach collection&#x3D;&quot;names&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">				#&#123;name&#125;</span><br><span class="line">			&lt;&#x2F;foreach&gt;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>③将多个元素放入<code>简单类型</code>数组中：<code>array</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int[]&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;array!&#x3D;null and array.length&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;array&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>④将多个元素放入List中：<code>list</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;list&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;list!&#x3D;null and list.size&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;list&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>⑤对象数组：Person[] persons=new Person[]{person1,person2,personn3}  <code>Object[]</code>+<code>array</code>+<code>对象.属性</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;Object[]&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;array!&#x3D;null and array.length&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;array&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;person&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;person.name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4SQL片段"><a href="#1-4SQL片段" class="headerlink" title="1.4SQL片段"></a>1.4SQL片段</h3><p><code>&lt;sql&gt;</code>和<code>&lt;include&gt;</code></p>
<h2 id="2、关联查询"><a href="#2、关联查询" class="headerlink" title="2、关联查询"></a>2、关联查询</h2><h3 id="2-1一对一"><a href="#2-1一对一" class="headerlink" title="2.1一对一"></a>2.1一对一</h3><p>①方式一：业务扩展类：用resultType属性包含多表查询的所有字段</p>
<p>创建关联业务：继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonBusiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> cardId;</span><br><span class="line">	<span class="keyword">private</span> String cardInfo;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<p>增加关联查询：resultType</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;queryPersonByIdWithOO&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultType=<span class="string">&quot;cn.nap.entity.PersonBusiness&quot;</span>&gt;</span><br><span class="line">    select s.*,c.* from person s inner join personcard c </span><br><span class="line">    on s.cardid=c.cardid</span><br><span class="line">    where s.id=#&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>增加接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">PersonBusiness <span class="title">queryPersonByIdWithOO</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonByIdWithOO</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//动态代理</span></span><br><span class="line">		PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">		Person person = personMapper.queryPersonByIdWithOO(<span class="number">1</span>);<span class="comment">//再调用该接口中的方法，程序会自动执行该方法对应的SQL</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(person);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>②方式二：Mybatis的resultMap</p>
<p>创建关联业务：组合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonCard</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> cardId;</span><br><span class="line">	<span class="keyword">private</span> String cardInfo;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	……</span><br><span class="line">	<span class="comment">//通过resultMap实现关联查询</span></span><br><span class="line">	<span class="keyword">private</span> PersonCard personCard;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<p>增加关联查询：resultMap</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- resultMap实现一对一 --&gt;</span><br><span class="line">	&lt;select id=<span class="string">&quot;queryPersonByIdWithOO2&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultMap=<span class="string">&quot;person_card_map&quot;</span>&gt;</span><br><span class="line">		select s.*,c.* from person s inner join personcard c </span><br><span class="line">		on s.cardid=c.cardid</span><br><span class="line">		where s.id=#&#123;id&#125;</span><br><span class="line">	&lt;/select&gt;</span><br><span class="line">	&lt;resultMap type=<span class="string">&quot;cn.nap.entity.Person&quot;</span> id=<span class="string">&quot;person_card_map&quot;</span>&gt;</span><br><span class="line">		&lt;!-- person属性 --&gt;</span><br><span class="line">		&lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">&quot;age&quot;</span> column=<span class="string">&quot;age&quot;</span>/&gt;</span><br><span class="line">		&lt;!-- personcard属性 ，一对一用association--&gt;</span><br><span class="line">		&lt;association property=<span class="string">&quot;personCard&quot;</span> javaType=<span class="string">&quot;cn.nap.entity.PersonCard&quot;</span>&gt;</span><br><span class="line">			&lt;id property=<span class="string">&quot;cardId&quot;</span> column=<span class="string">&quot;cardid&quot;</span>/&gt;</span><br><span class="line">			&lt;result property=<span class="string">&quot;cardInfo&quot;</span> column=<span class="string">&quot;cardinfo&quot;</span>/&gt;</span><br><span class="line">		&lt;/association&gt;</span><br><span class="line">	&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>增加接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Person <span class="title">queryPersonByIdWithOO2</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonByIdWithOO2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//动态代理</span></span><br><span class="line">		PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">		Person person = personMapper.queryPersonByIdWithOO2(<span class="number">1</span>);<span class="comment">//再调用该接口中的方法，程序会自动执行该方法对应的SQL</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(person);</span><br><span class="line">		session.close();		</span><br></pre></td></tr></table></figure>

<h3 id="2-2、一对多"><a href="#2-2、一对多" class="headerlink" title="2.2、一对多"></a>2.2、一对多</h3><p>创建关联业务：组合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonClass</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> classId;</span><br><span class="line">	<span class="keyword">private</span> String className;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//一对多查询</span></span><br><span class="line">	List&lt;Person&gt; persons;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<p>增加关联查询：一对多：collection：属性类型：javaType，属性元素类型：ofType</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- resultMap实现一对多 --&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;queryClassAndPersons&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultMap=<span class="string">&quot;class_persons_map&quot;</span>&gt;</span><br><span class="line">	select c.*,s.* from person s inner join personclass c </span><br><span class="line">	on c.classid=s.classid</span><br><span class="line">	where c.classid=#&#123;classid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;!-- 类表对应关系 --&gt;</span><br><span class="line">&lt;resultMap type=<span class="string">&quot;cn.nap.entity.PersonClass&quot;</span> id=<span class="string">&quot;class_persons_map&quot;</span>&gt;</span><br><span class="line">	&lt;!-- personClass属性 --&gt;</span><br><span class="line">	&lt;id property=<span class="string">&quot;classId&quot;</span> column=<span class="string">&quot;classid&quot;</span>/&gt;</span><br><span class="line">	&lt;result property=<span class="string">&quot;className&quot;</span> column=<span class="string">&quot;classname&quot;</span>/&gt;</span><br><span class="line">	&lt;!-- person属性，一对多：collection：属性类型：javaType，属性元素类型：ofType --&gt;</span><br><span class="line">	&lt;collection property=<span class="string">&quot;persons&quot;</span> ofType=<span class="string">&quot;cn.nap.entity.Person&quot;</span>&gt;</span><br><span class="line">		&lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">&quot;age&quot;</span> column=<span class="string">&quot;age&quot;</span>/&gt;</span><br><span class="line">	&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>增加接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">PersonClass <span class="title">queryClassAndPersons</span><span class="params">(<span class="keyword">int</span> classId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryClassAndPersons</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">	Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">	SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	<span class="comment">//session -connection</span></span><br><span class="line">	SqlSession session = sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//动态代理</span></span><br><span class="line">	PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	PersonClass personClass = personMapper.queryClassAndPersons(<span class="number">1</span>);<span class="comment">//再调用该接口中的方法，程序会自动执行该方法对应的SQL</span></span><br><span class="line">	</span><br><span class="line">	System.out.println(personClass.getClassId()+personClass.getClassName());</span><br><span class="line">	List&lt;Person&gt; persons=personClass.getPersons();</span><br><span class="line">	<span class="keyword">for</span>(Person person:persons) &#123;</span><br><span class="line">		System.out.println(person.getId()+person.getName()+person.getAge());</span><br><span class="line">	&#125;</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、整合Log4j"><a href="#3、整合Log4j" class="headerlink" title="3、整合Log4j"></a>3、整合Log4j</h2><h3 id="1、导包-1"><a href="#1、导包-1" class="headerlink" title="1、导包"></a>1、导包</h3><blockquote>
<p>log4j-1.2.17.jar</p>
</blockquote>
<h3 id="2、配置日志"><a href="#2、配置日志" class="headerlink" title="2、配置日志"></a>2、配置日志</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 开启日志，并指定具体日志 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果不指定，Mybatis就会根据以下顺序 寻找日志<br>SLF4J →Apache Commons Logging →Log4j 2 → Log4j →JDK logging</p>
<h3 id="3、编写配置日志输出文件：log4j-properties"><a href="#3、编写配置日志输出文件：log4j-properties" class="headerlink" title="3、编写配置日志输出文件：log4j.properties"></a>3、编写配置日志输出文件：log4j.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, stdout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure>

<p>日志级别：<br>    DEBUG&lt;INFO&lt;WARN&lt;ERROR<br>如果设置为info，则只显示 info及以上级别的信息；<br>建议：在开发时设置debug，在运行时设置为info或以上。</p>
<p><a href="http://logging.apache.org/log4j/1.2/faq.html#noconfig">http://logging.apache.org/log4j/1.2/faq.html#noconfig</a></p>
<p>mybatis实际执行sql语句 以及SQL中的参数 和返回结果</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200914130657.png"></p>
<h2 id="4、延迟加载（通过select属性指定延时加载，column属性指定外键）"><a href="#4、延迟加载（通过select属性指定延时加载，column属性指定外键）" class="headerlink" title="4、延迟加载（通过select属性指定延时加载，column属性指定外键）"></a>4、延迟加载（通过select属性指定延时加载，column属性指定外键）</h2><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>延迟加载：如果想要暂时只查询1的一方，  而多的一方先不查询，而是在需要的时候再去查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	……</span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 关闭立即加载 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/nap/mapper/personMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/nap/mapper/personCardMapper.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1、一对一"><a href="#1、一对一" class="headerlink" title="1、一对一"></a>1、一对一</h3><p>创建延时加载mapper文件（需要在配置中加载映射文件）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.nap.mapper.PersonCardMapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersonCard&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.nap.entity.PersonCard&quot;</span>&gt;</span></span><br><span class="line">		select * from personcard where cardid=#&#123;cardId&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>增加关联查询：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resultMap实现一对一延时加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersonByIdWithOOLazyLoad&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;person_card_lazyload_map&quot;</span>&gt;</span></span><br><span class="line">	select * from person</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span> <span class="attr">id</span>=<span class="string">&quot;person_card_lazyload_map&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- person属性 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 延时加载personcard属性 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;personCard&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;cn.nap.entity.PersonCard&quot;</span> <span class="attr">select</span>=<span class="string">&quot;cn.nap.mapper.PersonCardMapper.queryPersonCard&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cardid&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>增加接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Person&gt; <span class="title">queryPersonByIdWithOOLazyLoad</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonByIdWithOOLazyLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">	Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">	SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	<span class="comment">//session -connection</span></span><br><span class="line">	SqlSession session = sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//动态代理</span></span><br><span class="line">	PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	List&lt;Person&gt; persons = personMapper.queryPersonByIdWithOOLazyLoad();<span class="comment">//再调用该接口中的方法，程序会自动执行该方法对应的SQL</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(Person person:persons) &#123;</span><br><span class="line">		System.out.println(person.getId()+person.getName()+person.getAge());</span><br><span class="line">		PersonCard personCard=person.getPersonCard();</span><br><span class="line">		System.out.println(personCard.getCardId()+personCard.getCardInfo());</span><br><span class="line">	&#125;</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、一对多：和一对一的延迟加载配置方法相同"><a href="#2、一对多：和一对一的延迟加载配置方法相同" class="headerlink" title="2、一对多：和一对一的延迟加载配置方法相同"></a>2、一对多：和一对一的延迟加载配置方法相同</h2><p>创建创建延时加载mapper文件（需要在配置中加载映射文件）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.nap.mapper.PersonClassMapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersons&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span>&gt;</span></span><br><span class="line">		select * from person where classid=#&#123;classId&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>增加关联查询：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resultMap实现一对多延时加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryClassAndPersonsLazyLoad&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;class_person_lazyload_map&quot;</span>&gt;</span></span><br><span class="line">	select * from personclass</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;cn.nap.entity.PersonClass&quot;</span> <span class="attr">id</span>=<span class="string">&quot;class_person_lazyload_map&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- personClass属性 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classid&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classname&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- person属性，一对多：collection：属性类型：javaType，属性元素类型：ofType --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;persons&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span> <span class="attr">select</span>=<span class="string">&quot;cn.nap.mapper.PersonClassMapper.queryPersons&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classid&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="五、查询缓存和逆行工程"><a href="#五、查询缓存和逆行工程" class="headerlink" title="五、查询缓存和逆行工程"></a>五、查询缓存和逆行工程</h1><h2 id="1、查询缓存"><a href="#1、查询缓存" class="headerlink" title="1、查询缓存"></a>1、查询缓存</h2><h3 id="1、一级缓存：同一个SqlSession对象"><a href="#1、一级缓存：同一个SqlSession对象" class="headerlink" title="1、一级缓存：同一个SqlSession对象"></a>1、一级缓存：同一个SqlSession对象</h3><p>MyBatis默认开启一级缓存，如果用同样的SqlSession对象查询相同的数据，则只会在第一次查询时向数据库发送SQL语句，并将查询的结果放入到SqlSession对象中（作为缓存存在）；后续再次查询该同样的对象时，则直接从缓存中查询该对象即可（即省略了数据库的访问）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">	Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">	SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	<span class="comment">//session -connection</span></span><br><span class="line">	SqlSession session = sessioonFactory.openSession();</span><br><span class="line"></span><br><span class="line">	PersonMapper personMapper = session.getMapper(PersonMapper.class);</span><br><span class="line">       <span class="comment">//验证一级缓存</span></span><br><span class="line">	Person person = personMapper.queryPersonById(<span class="number">1</span>);</span><br><span class="line">	Person person2 = personMapper.queryPersonById(<span class="number">1</span>);<span class="comment">//再调用该接口中的方法，程序会自动执行该方法对应的SQL</span></span><br><span class="line">	System.out.println(person.getName());</span><br><span class="line">	System.out.println(person2.getName());</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两次查询只有一天查询语句：</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200914144208.png" style="zoom:67%;" />



<p>增删改的commit会清理缓存：第二次查询时又连接了数据库：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">……</span><br><span class="line">	Person person = personMapper.queryPersonById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	session.commit();<span class="comment">//增删改的commit会清理缓存</span></span><br><span class="line">       </span><br><span class="line">	Person person2 = personMapper.queryPersonById(<span class="number">1</span>);</span><br><span class="line">	System.out.println(person.getName());</span><br><span class="line">	System.out.println(person2.getName());</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200914144039.png" style="zoom:67%;" />



<h3 id="2、二级缓存"><a href="#2、二级缓存" class="headerlink" title="2、二级缓存"></a>2、二级缓存</h3><p>1、自带二级缓存：同一个<code>namespace</code>生成的一个或多个mapper对象</p>
<p>①namespace：接口的全类名（包名.类名），通过接口可以产生代理对象（studentMapper对象）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		……</span><br><span class="line">		<span class="comment">//动态代理</span></span><br><span class="line">		PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">		……</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>②开启二级缓存：conf.xml和XXXMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	……</span><br><span class="line">	<span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">&quot;cn.nap.mapper.PersonMapper&quot;</span>&gt;</span><br><span class="line">	……</span><br><span class="line">	&lt;cache&gt;&lt;/cache&gt;</span><br></pre></td></tr></table></figure>

<p>③序列化缓存对象以及缓存对象的级联属性、父类<br>根据异常提示：NotSerializableException可知，MyBatis的二级缓存是将对象放入硬盘文件中<br>                序列化：内存-&gt;硬盘<br>                反序列化：硬盘-&gt;内存<br>④触发将对象写入二级缓存的时机：SqlSession对象的close()方法。</p>
<p>⑤测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">	Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">	SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	<span class="comment">//session -connection</span></span><br><span class="line">	SqlSession session1 = sessioonFactory.openSession();</span><br><span class="line">	PersonMapper personMapper1 = session1.getMapper(PersonMapper.class);</span><br><span class="line">	Person person1 = personMapper1.queryPersonById(<span class="number">1</span>);</span><br><span class="line">	System.out.println(person1.getName());</span><br><span class="line">	session1.close();		</span><br><span class="line">	</span><br><span class="line">	SqlSession session2 = sessioonFactory.openSession();</span><br><span class="line">	PersonMapper personMapper2 = session2.getMapper(PersonMapper.class);</span><br><span class="line">	Person person2 = personMapper2.queryPersonById(<span class="number">1</span>);</span><br><span class="line">	System.out.println(person2.getName());</span><br><span class="line">	session2.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⑥禁用二级缓存：useCache=”false”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersonById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">		select * from person where id = $&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>⑦清理缓存：</p>
<p>方式一：增删改的commit（防止脏数据）</p>
<p>方式二：flushCache=”true”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersonById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">	select * from person where id = $&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2、第三方缓存：<br>要想整合三方提供的二级缓存 （或者自定义二级缓存），必须实现org.apache.ibatis.cache.Cache接口，该接口的默认实现类是PerpetualCache</p>
<pre><code>    整合ehcache二级缓存：
    a.
    ehcache-core.jar
    mybatis-Ehcache.jar
    slf4j-api.jar

    b.编写ehcache配置文件 Ehcache.xml

    c.开启EhCache二级缓存

        在xxxMapper.xml中开启
        &lt;cache  type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;&gt;
            &lt;!-- 通过property覆盖Ehcache.xml中的值 --&gt;
            &lt;property name=&quot;maxElementsInMemory&quot; value=&quot;2000&quot;/&gt;
            &lt;property name=&quot;maxElementsOnDisk&quot; value=&quot;3000&quot;/&gt;
        &lt;/cache&gt;</code></pre>
<h2 id="2、逆向工程"><a href="#2、逆向工程" class="headerlink" title="2、逆向工程"></a>2、逆向工程</h2><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200914160351.png" style="zoom:50%;" />

<p>表、类、接口、mapper.xml四者密切相关，因此 当知道一个的时候  其他三个应该可以自动生成。<br>1、表-&gt;其他三个</p>
<p>①导包</p>
<blockquote>
<p>mybatis-generator-core.jar</p>
<p>mybatis.jar</p>
<p>ojdbc.jar</p>
</blockquote>
<p>②逆向工程的配置文件generator.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			suppressAllComments属性值：</span></span><br><span class="line"><span class="comment">				true:自动生成实体类、SQL映射文件时没有注释</span></span><br><span class="line"><span class="comment">				true:自动生成实体类、SQL映射文件，并附有注释</span></span><br><span class="line"><span class="comment">		  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 数据库连接信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			forceBigDecimals属性值： </span></span><br><span class="line"><span class="comment">				true:把数据表中的DECIMAL和NUMERIC类型，</span></span><br><span class="line"><span class="comment">解析为JAVA代码中的java.math.BigDecimal类型 </span></span><br><span class="line"><span class="comment">				false(默认):把数据表中的DECIMAL和NUMERIC类型，</span></span><br><span class="line"><span class="comment">解析为解析为JAVA代码中的Integer类型 </span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		targetProject属性值:实体类的生成位置  </span></span><br><span class="line"><span class="comment">		targetPackage属性值：实体类所在包的路径</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;cn.nap.entity&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- trimStrings属性值：</span></span><br><span class="line"><span class="comment">			true：对数据库的查询结果进行trim操作</span></span><br><span class="line"><span class="comment">			false(默认)：不进行trim操作       </span></span><br><span class="line"><span class="comment">		  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		targetProject属性值:SQL映射文件的生成位置  </span></span><br><span class="line"><span class="comment">		targetPackage属性值：SQL映射文件所在包的路径</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;cn.nap.mapper&quot;</span> </span></span><br><span class="line"><span class="tag">			<span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 生成动态代理的接口  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;cn.nap.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 指定数据库表  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;Person&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;personCard&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;personClass&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, Exception </span>&#123;</span><br><span class="line">		File file=<span class="keyword">new</span> File(<span class="string">&quot;src/generator.xml&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		List&lt;String&gt; warnings=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		ConfigurationParser cp=<span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">		Configuration configuration=cp.parseConfiguration(file);</span><br><span class="line">		</span><br><span class="line">		DefaultShellCallback shellCallback=<span class="keyword">new</span> DefaultShellCallback(<span class="keyword">true</span>);</span><br><span class="line">		<span class="comment">//逆向工程的核心类</span></span><br><span class="line">		MyBatisGenerator generator=<span class="keyword">new</span> MyBatisGenerator(configuration, shellCallback, warnings);</span><br><span class="line">		generator.generate(<span class="keyword">null</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、使用(QBC:query by criteria)：对于like模糊查询，逆向工程需要在传值时 写入%x%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGenerator</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//动态代理</span></span><br><span class="line">		PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">		</span><br><span class="line">		PersonExample example=<span class="keyword">new</span> PersonExample();</span><br><span class="line">		Criteria criteria = example.createCriteria();</span><br><span class="line">		criteria.andIdBetween(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">		List&lt;Person&gt; persons=personMapper.selectByExample(example);</span><br><span class="line">		System.out.println(persons);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybaatis 笔记</title>
    <url>/2020/08/27/Mybatis-%E7%AC%94%E8%AE%B0%20/</url>
    <content><![CDATA[<h1 id="一、Mybatis简介"><a href="#一、Mybatis简介" class="headerlink" title="一、Mybatis简介"></a>一、Mybatis简介</h1><a id="more"></a>

<h2 id="1、ORM"><a href="#1、ORM" class="headerlink" title="1、ORM"></a>1、ORM</h2><p>1.1  ORM：Object Relational Mapping（对象映射关系），是一个将对象与表一一对应的概念，</p>
<p>Mybatis是ORM的一种实现方式，此外还有Hibernate也是一种实现。</p>
<p>1.2  Mybatis通过操作对象来进行对表（数据）的操作</p>
<h2 id="2、Mybatis文档"><a href="#2、Mybatis文档" class="headerlink" title="2、Mybatis文档"></a>2、<a href="https://mybatis.org/mybatis-3/zh/index.html">Mybatis文档</a></h2><h1 id="二、第一个Mybatis程序（基础方式的crud）"><a href="#二、第一个Mybatis程序（基础方式的crud）" class="headerlink" title="二、第一个Mybatis程序（基础方式的crud）"></a>二、第一个Mybatis程序（基础方式的crud）</h1><h2 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h2><blockquote>
<p>mybatis.jar 驱动包</p>
<p>mysql-connector-java.jar</p>
</blockquote>
<h2 id="2、创建要对应的类（包含于包entity）和表"><a href="#2、创建要对应的类（包含于包entity）和表" class="headerlink" title="2、创建要对应的类（包含于包entity）和表"></a>2、创建要对应的<code>类</code>（包含于包entity）和<code>表</code></h2><h2 id="3、创建并配置映射文件XXXMapper-xml"><a href="#3、创建并配置映射文件XXXMapper-xml" class="headerlink" title="3、创建并配置映射文件XXXMapper.xml"></a>3、创建并配置映射文件<code>XXXMapper.xml</code></h2><h3 id="3-1XXXMapper-xml"><a href="#3-1XXXMapper-xml" class="headerlink" title="3.1XXXMapper.xml"></a>3.1<code>XXXMapper.xml</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!-- namespace:此映射文件的唯一标识符 --&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;cn.nap.entity.personMapper&quot;&gt;</span><br><span class="line">	&lt;!-- Sql语句的获取：namespace.id --&gt;</span><br><span class="line">	&lt;!-- 增删查改标签的属性：</span><br><span class="line">		parameterType：输入参数类型</span><br><span class="line">		resultType：返回值的类型（全类名）</span><br><span class="line">	 --&gt;</span><br><span class="line">	&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		select * from person where id &#x3D; #&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br><span class="line">	&lt;select id&#x3D;&quot;queryAllPerson&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		select * from person</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br><span class="line">	&lt;insert id&#x3D;&quot;addPerson&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		insert into person(id,name,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line">	&lt;&#x2F;insert&gt;</span><br><span class="line">	&lt;delete id&#x3D;&quot;deletePersonById&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		delete from person where id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;delete&gt;</span><br><span class="line">	&lt;update id&#x3D;&quot;updatePersonById&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		update person set name&#x3D;#&#123;name&#125;,age&#x3D;#&#123;age&#125; where id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;update&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>

<p>其中放置了增删改查标签，如<code>&lt;select&gt;</code></p>
<h3 id="3-2Mybatis对于sql语句的规定"><a href="#3-2Mybatis对于sql语句的规定" class="headerlink" title="3.2Mybatis对于sql语句的规定"></a>3.2Mybatis对于sql语句的规定</h3><p>①mybatis约定：输入参数parameterType 和 输出参数resultType ，在形式上都只能有一个</p>
<p>②如果输入参数 ：是简单类型（8个基本类型+String） 是可以使用任何占位符,#{xxxx}<br>如果是对象类型，则必须是对象的属性 #{属性名}</p>
<p>③输出参数：  如果返回值类型是一个 对象（如Student），则无论返回一个、还是多个，在resultType都写成cn.nap.entity.Student</p>
<h2 id="4、创建并配置Mybatis的配置文件：conf-xml"><a href="#4、创建并配置Mybatis的配置文件：conf-xml" class="headerlink" title="4、创建并配置Mybatis的配置文件：conf.xml"></a>4、创建并配置Mybatis的配置文件：<code>conf.xml</code></h2><h3 id="4-1conf-xml"><a href="#4-1conf-xml" class="headerlink" title="4.1conf.xml"></a>4.1<code>conf.xml</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 通过environments的default属性和environment的id属性指定Mybatis运行环境，该环境可以再SqlSessionFactoryBuilder().build(reader,&quot;development&quot;)进行最终的更改 --&gt;</span><br><span class="line">	&lt;environments default&#x3D;&quot;development&quot;&gt;</span><br><span class="line">		&lt;!-- 开发环境（自己的计算机） --&gt;</span><br><span class="line">		&lt;environment id&#x3D;&quot;development&quot;&gt;</span><br><span class="line">		</span><br><span class="line">			&lt;!-- 事务提交方式：</span><br><span class="line">				JDBC：利用JDBC方式处理事务（commit rollback close）</span><br><span class="line">				MANAGED：将事务交给其他组件托管，比如spring。默认会关闭连接，可通过&lt;property name&#x3D;&quot;closeConnection&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;来取消</span><br><span class="line">			 --&gt;</span><br><span class="line">			&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">			&lt;!-- 指定数据源类型</span><br><span class="line">			UNPOOLED:传统JDBC模式</span><br><span class="line">			POOLED:使用数据库连接池，属于第三方</span><br><span class="line">			JNDI:从Tomcat中获取一个内置的数据库连接池</span><br><span class="line">			 --&gt;</span><br><span class="line">			&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">				&lt;!-- 配置database --&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root123&quot;&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;dataSource&gt;</span><br><span class="line">		&lt;&#x2F;environment&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!-- 开发环境（真正项目所在的计算机） --&gt;</span><br><span class="line">		&lt;environment id&#x3D;&quot;deployer&quot;&gt;</span><br><span class="line">			&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">			&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">				&lt;!-- 配置database --&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root123&quot;&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;dataSource&gt;</span><br><span class="line">		&lt;&#x2F;environment&gt;</span><br><span class="line">		&lt;!-- 开发环境（测试项目所在的计算机） --&gt;</span><br><span class="line">		&lt;environment id&#x3D;&quot;testdeployer&quot;&gt;</span><br><span class="line">			&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">			&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">				&lt;!-- 配置database --&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root123&quot;&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;dataSource&gt;</span><br><span class="line">		&lt;&#x2F;environment&gt;</span><br><span class="line">	&lt;&#x2F;environments&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;!-- 加载映射文件 --&gt;</span><br><span class="line">&lt;mapper resource&#x3D;&quot;cn&#x2F;nap&#x2F;entity&#x2F;personMapper.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<p>其中包括配置数据库和映射文件的载入（包名+文件名）。</p>
<h2 id="4、创建测试"><a href="#4、创建测试" class="headerlink" title="4、创建测试"></a>4、创建测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		queryPersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line"><span class="comment">//		addPerson();</span></span><br><span class="line">		updatePersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line">		deletePersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		String statement = <span class="string">&quot;cn.nap.entity.personMapper.queryPersonById&quot;</span>;</span><br><span class="line">		Person person = session.selectOne(statement,<span class="number">1</span>);</span><br><span class="line">		System.out.println(person);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryAllPerson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		String statement = <span class="string">&quot;cn.nap.entity.personMapper.queryAllPerson&quot;</span>;</span><br><span class="line">		List&lt;Person&gt; persons = session.selectList(statement);</span><br><span class="line">		System.out.println(persons);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addPerson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		String statement = <span class="string">&quot;cn.nap.entity.personMapper.addPerson&quot;</span>;</span><br><span class="line">		<span class="keyword">int</span> count = session.insert(statement, <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">&quot;zhao2&quot;</span>,<span class="number">20</span>));</span><br><span class="line">		<span class="comment">//&lt;transactionManager type=&quot;JDBC&quot;/&gt;,需要手动提交</span></span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(<span class="string">&quot;增加了&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deletePersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		String statement = <span class="string">&quot;cn.nap.entity.personMapper.deletePersonById&quot;</span>;</span><br><span class="line">		<span class="keyword">int</span> count = session.delete(statement,<span class="number">2</span>);</span><br><span class="line">		<span class="comment">//&lt;transactionManager type=&quot;JDBC&quot;/&gt;,需要手动提交</span></span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(<span class="string">&quot;删除了&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updatePersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		String statement = <span class="string">&quot;cn.nap.entity.personMapper.updatePersonById&quot;</span>;</span><br><span class="line">		Person person=<span class="keyword">new</span> Person();</span><br><span class="line">		person.setName(<span class="string">&quot;zhao3&quot;</span>);</span><br><span class="line">		person.setAge(<span class="number">22</span>);</span><br><span class="line">		person.setId(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> count = session.update(statement, person);</span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(<span class="string">&quot;修改了&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>String statement = &quot;cn.nap.entity.personMapper.queryPersonById&quot;;</code>Sql语句的组成为<code>XXXMpper.xml</code>文件内的namespace和id 组成。</p>
<p>如果使用的 事务方式为 jdbc,则需要 手工commit提交，即session.commit()；<code>如果要设置自动提交：</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sessioonFactory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>



<h1 id="三、mapper动态代理方式（接口开发，基于约定）的crud"><a href="#三、mapper动态代理方式（接口开发，基于约定）的crud" class="headerlink" title="三、mapper动态代理方式（接口开发，基于约定）的crud"></a>三、mapper动态代理方式（接口开发，基于约定）的crud</h1><h2 id="1、实现"><a href="#1、实现" class="headerlink" title="1、实现"></a>1、实现</h2><h3 id="1-1环境"><a href="#1-1环境" class="headerlink" title="1.1环境"></a>1.1环境</h3><blockquote>
<p>mybatis.jar 驱动包</p>
<p>mysql-connector-java.jar</p>
<p>conf.xml</p>
<p>mapper.xml</p>
</blockquote>
<h3 id="1-2约定Sql语句"><a href="#1-2约定Sql语句" class="headerlink" title="1.2约定Sql语句"></a>1.2约定Sql语句</h3><p>①创建接口（Mapper包），接口如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface PersonMapper &#123;</span><br><span class="line">	&#x2F;&#x2F;1、方法名和mapper.xml中的sql标签id一致</span><br><span class="line">	&#x2F;&#x2F;2、方法的参数与mapper.xml中的输入类型parameterType一致</span><br><span class="line">	&#x2F;&#x2F;3、方法的返回值与mapper.xml中的返回类型resultType一致</span><br><span class="line">	Person queryPersonById(int id);</span><br><span class="line">	List&lt;Person&gt; queryAllPerson();</span><br><span class="line">	void addPerson(Person person);</span><br><span class="line">	void deletePersonById(int id);</span><br><span class="line">	void updatePersonById(Person person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②设置mapper.xml 中namespace值为接口全类名，实现对应关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;cn.nap.mapper.PersonMapper&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>③使用：</p>
<p>a.根据 接口名 找到 mapper.xml文件（根据的是namespace=接口全类名）<br>b.根据 接口的方法名 找到 mapper.xml文件中的SQL标签 （方法名=SQL标签Id值）</p>
<p>c.表现形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void queryPersonById() throws IOException &#123;</span><br><span class="line">	&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">	Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">	SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	&#x2F;&#x2F;session -connection</span><br><span class="line">	SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;动态代理</span><br><span class="line">	PersonMapper personMapper &#x3D; session.getMapper(PersonMapper.class);&#x2F;&#x2F;通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	Person person &#x3D; personMapper.queryPersonById(1);&#x2F;&#x2F;再调用该接口中的方法，程序会自动执行该方法对应的SQL</span><br><span class="line">	</span><br><span class="line">	System.out.println(person);</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3db-properties"><a href="#1-3db-properties" class="headerlink" title="1.3db.properties"></a>1.3<code>db.properties</code></h3><p>①创建file：db.properties，保存数据库信息（key-value）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC</span><br><span class="line">usename&#x3D;root</span><br><span class="line">password&#x3D;root123</span><br></pre></td></tr></table></figure>

<p>②将db.properties在conf.xml中进行配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">	&lt;properties resource&#x3D;&quot;db.properties&quot;&gt;&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>

<p>③conf.xml关于数据库部分的配置更改为：<code>$&#123;...&#125;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">&lt;!-- 配置database --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;usename&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4Mybatis全局参数"><a href="#1-4Mybatis全局参数" class="headerlink" title="1.4Mybatis全局参数"></a>1.4Mybatis全局参数</h3><p>在conf.xml中设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">		&lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;false&quot;  &#x2F;&gt;</span><br><span class="line">		&lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;false&quot;  &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2、别名（conf-xml）"><a href="#2、别名（conf-xml）" class="headerlink" title="2、别名（conf.xml）"></a>2、别名（conf.xml）</h2><h3 id="2-1设置单个别名"><a href="#2-1设置单个别名" class="headerlink" title="2.1设置单个别名"></a>2.1设置单个别名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;typeAliases&gt;</span><br><span class="line">		&lt;!-- 单个别名 --&gt;</span><br><span class="line">		&lt;typeAlias type&#x3D;&quot;cn.nap.mapper.PersonMapper&quot; alias&#x3D;&quot;personMapper&quot;&#x2F;&gt;</span><br><span class="line">		&lt;typeAlias type&#x3D;&quot;&quot; alias&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2批量设置别名"><a href="#2-2批量设置别名" class="headerlink" title="2.2批量设置别名"></a>2.2批量设置别名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">	&lt;!-- 批量设置别名 --&gt;</span><br><span class="line">	&lt;package name&#x3D;&quot;cn.nap.entity&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure>

<p>自动将该包中和子包中的所有类批量定义别名： 别名就是类名（不带包名，忽略大小写）</p>
<p>如果在批量设置别名时，出现了冲突。可以在相同类名前使用@Alias(“myStudent”)区分</p>
<h3 id="2-3Mybatis自带别名"><a href="#2-3Mybatis自带别名" class="headerlink" title="2.3Mybatis自带别名"></a>2.3Mybatis自带别名</h3><p><img src="http://qflrz833q.hn-bkt.clouddn.com/MyBatis%E5%86%85%E7%BD%AE%E5%88%AB%E5%90%8D.png"></p>
<h2 id="3、类型处理器"><a href="#3、类型处理器" class="headerlink" title="3、类型处理器"></a>3、类型处理器</h2><h3 id="3-1Mybatis自带常见处理器"><a href="#3-1Mybatis自带常见处理器" class="headerlink" title="3.1Mybatis自带常见处理器"></a>3.1Mybatis自带常见处理器</h3><table>
<thead>
<tr>
<th>类型处理器</th>
<th>Java类型</th>
<th>JDBC类型</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean<strong>TypeHandler</strong></td>
<td>Boolean，boolean</td>
<td>任何兼容的布尔值</td>
</tr>
<tr>
<td>ByteTypeHandler</td>
<td>Byte，byte</td>
<td>任何兼容的数字或字节类型</td>
</tr>
<tr>
<td>ShortTypeHandler</td>
<td>Short，short</td>
<td>任何兼容的数字或短整型</td>
</tr>
<tr>
<td>IntegerTypeHandler</td>
<td>Integer，int</td>
<td>任何兼容的数字和整型</td>
</tr>
<tr>
<td>LongTypeHandler</td>
<td>Long，long</td>
<td>任何兼容的数字或长整型</td>
</tr>
<tr>
<td>FloatTypeHandler</td>
<td>Float，float</td>
<td>任何兼容的数字或单精度浮点型</td>
</tr>
<tr>
<td>DoubleTypeHandler</td>
<td>Double，double</td>
<td>任何兼容的数字或双精度浮点型</td>
</tr>
<tr>
<td>BigDecimalTypeHandler</td>
<td>BigDecimal</td>
<td>任何兼容的数字或十进制小数类型</td>
</tr>
<tr>
<td>StringTypeHandler</td>
<td>String</td>
<td>CHAR和VARCHAR类型</td>
</tr>
<tr>
<td>ClobTypeHandler</td>
<td>String</td>
<td>CLOB和LONGVARCHAR类型</td>
</tr>
<tr>
<td>NStringTypeHandler</td>
<td>String</td>
<td>NVARCHAR和NCHAR类型</td>
</tr>
<tr>
<td>NClobTypeHandler</td>
<td>String</td>
<td>NCLOB类型</td>
</tr>
<tr>
<td>ByteArrayTypeHandler</td>
<td>byte[]</td>
<td>任何兼容的字节流类型</td>
</tr>
<tr>
<td>BlobTypeHandler</td>
<td>byte[]</td>
<td>BLOB和LONGVARBINARY类型</td>
</tr>
<tr>
<td>DateTypeHandler</td>
<td>Date（java.util）</td>
<td>TIMESTAMP类型</td>
</tr>
<tr>
<td>DateOnlyTypeHandler</td>
<td>Date（java.util）</td>
<td>DATE类型</td>
</tr>
<tr>
<td>TimeOnlyTypeHandler</td>
<td>Date（java.util）</td>
<td>TIME类型</td>
</tr>
<tr>
<td>SqlTimestampTypeHandler</td>
<td>Timestamp（java.sql）</td>
<td>TIMESTAMP类型</td>
</tr>
<tr>
<td>SqlDateTypeHandler</td>
<td>Date（java.sql）</td>
<td>DATE类型</td>
</tr>
<tr>
<td>SqlTimeTypeHandler</td>
<td>Time（java.sql）</td>
<td>TIME类型</td>
</tr>
<tr>
<td>ObjectTypeHandler</td>
<td>任意</td>
<td>其他或未指定类型</td>
</tr>
<tr>
<td>EnumTypeHandler</td>
<td>Enumeration类型</td>
<td>VARCHAR。任何兼容的字符串类型，作为代码存储（而不是索引）。</td>
</tr>
</tbody></table>
<h3 id="3-2自定义Mybatis类型处理器：java-—数据库-jdbc类型"><a href="#3-2自定义Mybatis类型处理器：java-—数据库-jdbc类型" class="headerlink" title="3.2自定义Mybatis类型处理器：java —数据库(jdbc类型)"></a>3.2自定义Mybatis类型处理器：java —数据库(jdbc类型)</h3><p>①创建类型转换器：</p>
<p>方式一：通过接口实现TypeHandler</p>
<p>方式二：通过继承BaseTypeHandler</p>
<p>其中BaseTypeHandler继承了TypeHandler</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BooleanToIntConverter extends BaseTypeHandler&lt;Boolean&gt;&#123;</span><br><span class="line">	&#x2F;&#x2F;java-&gt;db</span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * </span><br><span class="line">	 * @param ps：PreparedStatement对象</span><br><span class="line">	 * @param i：PreparedStatement对象操作参数的位置</span><br><span class="line">	 * @param parameter：java值</span><br><span class="line">	 * @param jdbcType：数据库类型</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	@Override</span><br><span class="line">	public void setNonNullParameter(PreparedStatement ps, int i, Boolean parameter, JdbcType jdbcType)</span><br><span class="line">			throws SQLException &#123;</span><br><span class="line">		if(parameter) &#123;</span><br><span class="line">			ps.setInt(i, 1);</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			ps.setInt(i, 0);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;db(number)-&gt;java(boolean)</span><br><span class="line">	</span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(ResultSet rs, String columnName) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; rs.getInt(columnName);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(ResultSet rs, int columnIndex) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; rs.getInt(columnIndex);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(CallableStatement cs, int columnIndex) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; cs.getInt(columnIndex);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②配置<code>conf.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeHandlers&gt;</span><br><span class="line">		&lt;typeHandler handler&#x3D;&quot;cn.nap.converter.BooleanToIntConverter&quot; javaType&#x3D;&quot;Boolean&quot; jdbcType&#x3D;&quot;INTEGER&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeHandlers&gt;</span><br></pre></td></tr></table></figure>

<p>③配置``mapper.xml`</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 带转换器的查看 --&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithConverser&quot;  parameterType&#x3D;&quot;int&quot; resultMap&#x3D;&quot;personResult&quot;&gt;</span><br><span class="line">	select * from person where id &#x3D; #&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap type&#x3D;&quot;cn.nap.entity.Person&quot; id&#x3D;&quot;personResult&quot;&gt;</span><br><span class="line">	&lt;!-- 主键id和非主键result --&gt;</span><br><span class="line">	&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;age&quot; column&#x3D;&quot;age&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot; javaType&#x3D;&quot;Boolean&quot; jdbcType&#x3D;&quot;INTEGER&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>resultMap可以实现2个功能：<br>1.类型转换<br>2.属性-字段的映射关系</p>
<p>④测试使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void queryPersonByIdWithConverser() throws IOException &#123;</span><br><span class="line">	&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">	Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">	SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	&#x2F;&#x2F;session -connection</span><br><span class="line">	SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;动态代理</span><br><span class="line">	PersonMapper personMapper &#x3D; session.getMapper(PersonMapper.class);&#x2F;&#x2F;通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	Person person &#x3D; personMapper.queryPersonByIdWithConverser(1);&#x2F;&#x2F;再调用该接口中的方法，程序会自动执行该方法对应的SQL</span><br><span class="line">	</span><br><span class="line">	System.out.println(person);</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、输入类型parameterType接受标识符-、-的区别"><a href="#4、输入类型parameterType接受标识符-、-的区别" class="headerlink" title="4、输入类型parameterType接受标识符#{}、${}的区别"></a>4、输入类型parameterType接受标识符#{}、${}的区别</h2><h3 id="4-1简单类型"><a href="#4-1简单类型" class="headerlink" title="4.1简单类型"></a>4.1简单类型</h3><p>①接受方式：</p>
<p>方式一：#{任意值}<br>方式二：${value} ，其中的标识符只能是value</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">	select * from person where id &#x3D; #&#123;xxx&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		select * from person where id &#x3D; $&#123;value&#125; </span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>②两种方式区别</p>
<p>#{}自动给String类型加上’’  （自动类型转换）</p>
<p> ${} 原样输出，但是适合于动态排序（动态字段），手动添加</p>
<p><code>&#39;$&#123;value&#125;&#39;</code></p>
<p>动态排序：<br>select stuno,stuname,stuage  from student  order by ${value} asc</p>
<p>③此外：</p>
<p>#{}可以防止SQL注入<br> ${}不防止</p>
<p>④${}、#{}相同之处：<br>都可以 获取对象的值 （嵌套类型对象）</p>
<h3 id="4-2引用类型"><a href="#4-2引用类型" class="headerlink" title="4.2引用类型"></a>4.2引用类型</h3><p>方式一：#{属性名}<br>方式二：${属性名}</p>
<h2 id="5、parameterType值为HashMap"><a href="#5、parameterType值为HashMap" class="headerlink" title="5、parameterType值为HashMap"></a>5、parameterType值为HashMap</h2><p>①输入对象为HashMap：<br>where stuage= #{stuAge}</p>
<p>用map中key的值 匹配 占位符#{stuAge}，如果匹配成功 就用map的value替换占位符</p>
<h3 id="6、Mybatis调用存储过程"><a href="#6、Mybatis调用存储过程" class="headerlink" title="6、Mybatis调用存储过程"></a>6、Mybatis调用存储过程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryCountByGradeWithProcedure&quot; statementType&#x3D;&quot;CALLABLE&quot;  parameterType&#x3D;&quot;HashMap&quot; &gt;</span><br><span class="line">		&#123;</span><br><span class="line">			CALL queryCountByGradeWithProcedure(</span><br><span class="line">				#&#123;gName,jdbcType&#x3D;VARCHAR,mode&#x3D;IN&#125;,</span><br><span class="line">				#&#123;scount,jdbcType&#x3D;INTEGER,mode&#x3D;OUT&#125;</span><br><span class="line">			) </span><br><span class="line">		&#125;	</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>其中 通过statementType=”CALLABLE”设置SQL的执行方式是存储过程。 存储过程的输入参数gName需要通过HashMap来指定<br>在使用时，通过hashmap的put方法传入输入参数的值；通过hashmap的Get方法 获取输出参数的值。</p>
<h1 id="四、Mybatis实现动态Sql"><a href="#四、Mybatis实现动态Sql" class="headerlink" title="四、Mybatis实现动态Sql"></a>四、Mybatis实现动态Sql</h1><h2 id="1、动态SQL"><a href="#1、动态SQL" class="headerlink" title="1、动态SQL"></a>1、动态SQL</h2><h3 id="1-1where-1-1实现"><a href="#1-1where-1-1实现" class="headerlink" title="1.1where 1=1实现"></a>1.1<code>where 1=1</code>实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">	select id,name,age from person where 1&#x3D;1</span><br><span class="line">	&lt;!-- test&#x3D;&quot;cn.nap.entity.Person中有id属性且属性值不为null&quot; --&gt;</span><br><span class="line">	&lt;if test&#x3D;&quot;id!&#x3D;null and id!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">		and id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;if test&#x3D;&quot;name!&#x3D;null and name!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">		and name&#x3D;#&#123;name&#125;</span><br><span class="line">	&lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-2where-1-1-与-lt-where-gt-标签"><a href="#1-2where-1-1-与-lt-where-gt-标签" class="headerlink" title="1.2where 1=1 与&lt;where&gt;标签"></a>1.2<code>where 1=1</code> 与<code>&lt;where&gt;标签</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">	select id,name,age from person</span><br><span class="line">	&lt;where&gt;</span><br><span class="line">		&lt;!-- test&#x3D;&quot;cn.nap.entity.Person中有id属性且属性值不为null&quot; --&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;id!&#x3D;null and id!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">			and id&#x3D;#&#123;id&#125;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;name!&#x3D;null and name!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">			and name&#x3D;#&#123;name&#125;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>说明：<code>&lt;where&gt;标签</code>会根据实际情况自动助理其后的第一个<code>and</code></p>
<h3 id="1-3trim标签：可以处理拼接sql中-【开头或结尾】第一个and（或其他）"><a href="#1-3trim标签：可以处理拼接sql中-【开头或结尾】第一个and（或其他）" class="headerlink" title="1.3trim标签：可以处理拼接sql中 【开头或结尾】第一个and（或其他）"></a>1.3<code>trim</code>标签：可以处理拼接sql中 【开头或结尾】第一个and（或其他）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;stuName != null and stuName !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and stuName like &#x27;%$&#123;stuName&#125;%&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;graName != null and graName !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and graName like &#x27;%$&#123;graName&#125;%&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;stuAge != null and stuAge !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and stuAge = #&#123;stuAge&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;_queryName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+stuName+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;_parameter.stuName != null and _parameter.stuName !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        stuName like #&#123;_queryName&#125; and</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;graName != null and graName !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        graName like &#x27;%$&#123;graName&#125;%&#x27; and</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span>  <span class="attr">test</span>=<span class="string">&quot;stuAge != null and stuAge !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        stuAge = #&#123;stuAge&#125; and</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据学号，修改学生信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudentByNo&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">parameterType</span>=<span class="string">&quot;com.yanqun.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    update student</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuName !=null and stuName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            stuName=#&#123;stuName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuAge !=null and stuAge !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            stuAge=#&#123;stuAge&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;graName !=null and graName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            graName=#&#123;graName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    where stuNo=#&#123;stuNo&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3foreach"><a href="#1-3foreach" class="headerlink" title="1.3foreach"></a>1.3<code>foreach</code></h3><p>①foreach迭代的类型：数组、对象数组、集合、属性</p>
<p>②将多个元素放入属性中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;Grade&quot;&gt;</span><br><span class="line">	select id,name,age from person</span><br><span class="line">	&lt;where&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;names!&#x3D;null and names.zize&gt;0&quot;&gt;</span><br><span class="line">			&lt;foreach collection&#x3D;&quot;names&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">				#&#123;name&#125;</span><br><span class="line">			&lt;&#x2F;foreach&gt;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>③将多个元素放入<code>简单类型</code>数组中：<code>array</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int[]&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;array!&#x3D;null and array.length&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;array&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>④将多个元素放入List中：<code>list</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;list&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;list!&#x3D;null and list.size&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;list&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>⑤对象数组：Person[] persons=new Person[]{person1,person2,personn3}  <code>Object[]</code>+<code>array</code>+<code>对象.属性</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;Object[]&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;array!&#x3D;null and array.length&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;array&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;person&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;person.name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4SQL片段"><a href="#1-4SQL片段" class="headerlink" title="1.4SQL片段"></a>1.4SQL片段</h3><p><code>&lt;sql&gt;</code>和<code>&lt;include&gt;</code></p>
<h2 id="2、关联查询"><a href="#2、关联查询" class="headerlink" title="2、关联查询"></a>2、关联查询</h2><h3 id="2-1一对一"><a href="#2-1一对一" class="headerlink" title="2.1一对一"></a>2.1一对一</h3><p>①方式一：业务扩展类：用resultType属性包含多表查询的所有字段</p>
<p>创建关联业务：继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonBusiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> cardId;</span><br><span class="line">	<span class="keyword">private</span> String cardInfo;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<p>增加关联查询：resultType</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;queryPersonByIdWithOO&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultType=<span class="string">&quot;cn.nap.entity.PersonBusiness&quot;</span>&gt;</span><br><span class="line">    select s.*,c.* from person s inner join personcard c </span><br><span class="line">    on s.cardid=c.cardid</span><br><span class="line">    where s.id=#&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>增加接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">PersonBusiness <span class="title">queryPersonByIdWithOO</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonByIdWithOO</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//动态代理</span></span><br><span class="line">		PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">		Person person = personMapper.queryPersonByIdWithOO(<span class="number">1</span>);<span class="comment">//再调用该接口中的方法，程序会自动执行该方法对应的SQL</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(person);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>②方式二：Mybatis的resultMap</p>
<p>创建关联业务：组合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonCard</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> cardId;</span><br><span class="line">	<span class="keyword">private</span> String cardInfo;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	……</span><br><span class="line">	<span class="comment">//通过resultMap实现关联查询</span></span><br><span class="line">	<span class="keyword">private</span> PersonCard personCard;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<p>增加关联查询：resultMap</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- resultMap实现一对一 --&gt;</span><br><span class="line">	&lt;select id=<span class="string">&quot;queryPersonByIdWithOO2&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultMap=<span class="string">&quot;person_card_map&quot;</span>&gt;</span><br><span class="line">		select s.*,c.* from person s inner join personcard c </span><br><span class="line">		on s.cardid=c.cardid</span><br><span class="line">		where s.id=#&#123;id&#125;</span><br><span class="line">	&lt;/select&gt;</span><br><span class="line">	&lt;resultMap type=<span class="string">&quot;cn.nap.entity.Person&quot;</span> id=<span class="string">&quot;person_card_map&quot;</span>&gt;</span><br><span class="line">		&lt;!-- person属性 --&gt;</span><br><span class="line">		&lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">&quot;age&quot;</span> column=<span class="string">&quot;age&quot;</span>/&gt;</span><br><span class="line">		&lt;!-- personcard属性 ，一对一用association--&gt;</span><br><span class="line">		&lt;association property=<span class="string">&quot;personCard&quot;</span> javaType=<span class="string">&quot;cn.nap.entity.PersonCard&quot;</span>&gt;</span><br><span class="line">			&lt;id property=<span class="string">&quot;cardId&quot;</span> column=<span class="string">&quot;cardid&quot;</span>/&gt;</span><br><span class="line">			&lt;result property=<span class="string">&quot;cardInfo&quot;</span> column=<span class="string">&quot;cardinfo&quot;</span>/&gt;</span><br><span class="line">		&lt;/association&gt;</span><br><span class="line">	&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>增加接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Person <span class="title">queryPersonByIdWithOO2</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonByIdWithOO2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//动态代理</span></span><br><span class="line">		PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">		Person person = personMapper.queryPersonByIdWithOO2(<span class="number">1</span>);<span class="comment">//再调用该接口中的方法，程序会自动执行该方法对应的SQL</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(person);</span><br><span class="line">		session.close();		</span><br></pre></td></tr></table></figure>

<h3 id="2-2、一对多"><a href="#2-2、一对多" class="headerlink" title="2.2、一对多"></a>2.2、一对多</h3><p>创建关联业务：组合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonClass</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> classId;</span><br><span class="line">	<span class="keyword">private</span> String className;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//一对多查询</span></span><br><span class="line">	List&lt;Person&gt; persons;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<p>增加关联查询：一对多：collection：属性类型：javaType，属性元素类型：ofType</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- resultMap实现一对多 --&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;queryClassAndPersons&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultMap=<span class="string">&quot;class_persons_map&quot;</span>&gt;</span><br><span class="line">	select c.*,s.* from person s inner join personclass c </span><br><span class="line">	on c.classid=s.classid</span><br><span class="line">	where c.classid=#&#123;classid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;!-- 类表对应关系 --&gt;</span><br><span class="line">&lt;resultMap type=<span class="string">&quot;cn.nap.entity.PersonClass&quot;</span> id=<span class="string">&quot;class_persons_map&quot;</span>&gt;</span><br><span class="line">	&lt;!-- personClass属性 --&gt;</span><br><span class="line">	&lt;id property=<span class="string">&quot;classId&quot;</span> column=<span class="string">&quot;classid&quot;</span>/&gt;</span><br><span class="line">	&lt;result property=<span class="string">&quot;className&quot;</span> column=<span class="string">&quot;classname&quot;</span>/&gt;</span><br><span class="line">	&lt;!-- person属性，一对多：collection：属性类型：javaType，属性元素类型：ofType --&gt;</span><br><span class="line">	&lt;collection property=<span class="string">&quot;persons&quot;</span> ofType=<span class="string">&quot;cn.nap.entity.Person&quot;</span>&gt;</span><br><span class="line">		&lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">&quot;age&quot;</span> column=<span class="string">&quot;age&quot;</span>/&gt;</span><br><span class="line">	&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>增加接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">PersonClass <span class="title">queryClassAndPersons</span><span class="params">(<span class="keyword">int</span> classId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryClassAndPersons</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">	Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">	SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	<span class="comment">//session -connection</span></span><br><span class="line">	SqlSession session = sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//动态代理</span></span><br><span class="line">	PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	PersonClass personClass = personMapper.queryClassAndPersons(<span class="number">1</span>);<span class="comment">//再调用该接口中的方法，程序会自动执行该方法对应的SQL</span></span><br><span class="line">	</span><br><span class="line">	System.out.println(personClass.getClassId()+personClass.getClassName());</span><br><span class="line">	List&lt;Person&gt; persons=personClass.getPersons();</span><br><span class="line">	<span class="keyword">for</span>(Person person:persons) &#123;</span><br><span class="line">		System.out.println(person.getId()+person.getName()+person.getAge());</span><br><span class="line">	&#125;</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、整合Log4j"><a href="#3、整合Log4j" class="headerlink" title="3、整合Log4j"></a>3、整合Log4j</h2><h3 id="1、导包-1"><a href="#1、导包-1" class="headerlink" title="1、导包"></a>1、导包</h3><blockquote>
<p>log4j-1.2.17.jar</p>
</blockquote>
<h3 id="2、配置日志"><a href="#2、配置日志" class="headerlink" title="2、配置日志"></a>2、配置日志</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 开启日志，并指定具体日志 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果不指定，Mybatis就会根据以下顺序 寻找日志<br>SLF4J →Apache Commons Logging →Log4j 2 → Log4j →JDK logging</p>
<h3 id="3、编写配置日志输出文件：log4j-properties"><a href="#3、编写配置日志输出文件：log4j-properties" class="headerlink" title="3、编写配置日志输出文件：log4j.properties"></a>3、编写配置日志输出文件：log4j.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, stdout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure>

<p>日志级别：<br>    DEBUG&lt;INFO&lt;WARN&lt;ERROR<br>如果设置为info，则只显示 info及以上级别的信息；<br>建议：在开发时设置debug，在运行时设置为info或以上。</p>
<p><a href="http://logging.apache.org/log4j/1.2/faq.html#noconfig">http://logging.apache.org/log4j/1.2/faq.html#noconfig</a></p>
<p>mybatis实际执行sql语句 以及SQL中的参数 和返回结果</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200914130657.png"></p>
<h2 id="4、延迟加载（通过select属性指定延时加载，column属性指定外键）"><a href="#4、延迟加载（通过select属性指定延时加载，column属性指定外键）" class="headerlink" title="4、延迟加载（通过select属性指定延时加载，column属性指定外键）"></a>4、延迟加载（通过select属性指定延时加载，column属性指定外键）</h2><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>延迟加载：如果想要暂时只查询1的一方，  而多的一方先不查询，而是在需要的时候再去查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	……</span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 关闭立即加载 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/nap/mapper/personMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/nap/mapper/personCardMapper.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1、一对一"><a href="#1、一对一" class="headerlink" title="1、一对一"></a>1、一对一</h3><p>创建延时加载mapper文件（需要在配置中加载映射文件）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.nap.mapper.PersonCardMapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersonCard&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.nap.entity.PersonCard&quot;</span>&gt;</span></span><br><span class="line">		select * from personcard where cardid=#&#123;cardId&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>增加关联查询：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resultMap实现一对一延时加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersonByIdWithOOLazyLoad&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;person_card_lazyload_map&quot;</span>&gt;</span></span><br><span class="line">	select * from person</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span> <span class="attr">id</span>=<span class="string">&quot;person_card_lazyload_map&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- person属性 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 延时加载personcard属性 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;personCard&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;cn.nap.entity.PersonCard&quot;</span> <span class="attr">select</span>=<span class="string">&quot;cn.nap.mapper.PersonCardMapper.queryPersonCard&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cardid&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>增加接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Person&gt; <span class="title">queryPersonByIdWithOOLazyLoad</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonByIdWithOOLazyLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">	Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">	SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	<span class="comment">//session -connection</span></span><br><span class="line">	SqlSession session = sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//动态代理</span></span><br><span class="line">	PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	List&lt;Person&gt; persons = personMapper.queryPersonByIdWithOOLazyLoad();<span class="comment">//再调用该接口中的方法，程序会自动执行该方法对应的SQL</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(Person person:persons) &#123;</span><br><span class="line">		System.out.println(person.getId()+person.getName()+person.getAge());</span><br><span class="line">		PersonCard personCard=person.getPersonCard();</span><br><span class="line">		System.out.println(personCard.getCardId()+personCard.getCardInfo());</span><br><span class="line">	&#125;</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、一对多：和一对一的延迟加载配置方法相同"><a href="#2、一对多：和一对一的延迟加载配置方法相同" class="headerlink" title="2、一对多：和一对一的延迟加载配置方法相同"></a>2、一对多：和一对一的延迟加载配置方法相同</h2><p>创建创建延时加载mapper文件（需要在配置中加载映射文件）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.nap.mapper.PersonClassMapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersons&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span>&gt;</span></span><br><span class="line">		select * from person where classid=#&#123;classId&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>增加关联查询：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resultMap实现一对多延时加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryClassAndPersonsLazyLoad&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;class_person_lazyload_map&quot;</span>&gt;</span></span><br><span class="line">	select * from personclass</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;cn.nap.entity.PersonClass&quot;</span> <span class="attr">id</span>=<span class="string">&quot;class_person_lazyload_map&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- personClass属性 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classid&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classname&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- person属性，一对多：collection：属性类型：javaType，属性元素类型：ofType --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;persons&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span> <span class="attr">select</span>=<span class="string">&quot;cn.nap.mapper.PersonClassMapper.queryPersons&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classid&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="五、查询缓存和逆行工程"><a href="#五、查询缓存和逆行工程" class="headerlink" title="五、查询缓存和逆行工程"></a>五、查询缓存和逆行工程</h1><h2 id="1、查询缓存"><a href="#1、查询缓存" class="headerlink" title="1、查询缓存"></a>1、查询缓存</h2><h3 id="1、一级缓存：同一个SqlSession对象"><a href="#1、一级缓存：同一个SqlSession对象" class="headerlink" title="1、一级缓存：同一个SqlSession对象"></a>1、一级缓存：同一个SqlSession对象</h3><p>MyBatis默认开启一级缓存，如果用同样的SqlSession对象查询相同的数据，则只会在第一次查询时向数据库发送SQL语句，并将查询的结果放入到SqlSession对象中（作为缓存存在）；后续再次查询该同样的对象时，则直接从缓存中查询该对象即可（即省略了数据库的访问）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">	Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">	SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	<span class="comment">//session -connection</span></span><br><span class="line">	SqlSession session = sessioonFactory.openSession();</span><br><span class="line"></span><br><span class="line">	PersonMapper personMapper = session.getMapper(PersonMapper.class);</span><br><span class="line">       <span class="comment">//验证一级缓存</span></span><br><span class="line">	Person person = personMapper.queryPersonById(<span class="number">1</span>);</span><br><span class="line">	Person person2 = personMapper.queryPersonById(<span class="number">1</span>);<span class="comment">//再调用该接口中的方法，程序会自动执行该方法对应的SQL</span></span><br><span class="line">	System.out.println(person.getName());</span><br><span class="line">	System.out.println(person2.getName());</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两次查询只有一天查询语句：</p>
<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200914144208.png" style="zoom:67%;" />



<p>增删改的commit会清理缓存：第二次查询时又连接了数据库：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">……</span><br><span class="line">	Person person = personMapper.queryPersonById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	session.commit();<span class="comment">//增删改的commit会清理缓存</span></span><br><span class="line">       </span><br><span class="line">	Person person2 = personMapper.queryPersonById(<span class="number">1</span>);</span><br><span class="line">	System.out.println(person.getName());</span><br><span class="line">	System.out.println(person2.getName());</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200914144039.png" style="zoom:67%;" />



<h3 id="2、二级缓存"><a href="#2、二级缓存" class="headerlink" title="2、二级缓存"></a>2、二级缓存</h3><p>1、自带二级缓存：同一个<code>namespace</code>生成的一个或多个mapper对象</p>
<p>①namespace：接口的全类名（包名.类名），通过接口可以产生代理对象（studentMapper对象）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		……</span><br><span class="line">		<span class="comment">//动态代理</span></span><br><span class="line">		PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">		……</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>②开启二级缓存：conf.xml和XXXMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	……</span><br><span class="line">	<span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">&quot;cn.nap.mapper.PersonMapper&quot;</span>&gt;</span><br><span class="line">	……</span><br><span class="line">	&lt;cache&gt;&lt;/cache&gt;</span><br></pre></td></tr></table></figure>

<p>③序列化缓存对象以及缓存对象的级联属性、父类<br>根据异常提示：NotSerializableException可知，MyBatis的二级缓存是将对象放入硬盘文件中<br>                序列化：内存-&gt;硬盘<br>                反序列化：硬盘-&gt;内存<br>④触发将对象写入二级缓存的时机：SqlSession对象的close()方法。</p>
<p>⑤测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryPersonById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	<span class="comment">//加载Mybatis配置文件，访问数据库</span></span><br><span class="line">	Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">	SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	<span class="comment">//session -connection</span></span><br><span class="line">	SqlSession session1 = sessioonFactory.openSession();</span><br><span class="line">	PersonMapper personMapper1 = session1.getMapper(PersonMapper.class);</span><br><span class="line">	Person person1 = personMapper1.queryPersonById(<span class="number">1</span>);</span><br><span class="line">	System.out.println(person1.getName());</span><br><span class="line">	session1.close();		</span><br><span class="line">	</span><br><span class="line">	SqlSession session2 = sessioonFactory.openSession();</span><br><span class="line">	PersonMapper personMapper2 = session2.getMapper(PersonMapper.class);</span><br><span class="line">	Person person2 = personMapper2.queryPersonById(<span class="number">1</span>);</span><br><span class="line">	System.out.println(person2.getName());</span><br><span class="line">	session2.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⑥禁用二级缓存：useCache=”false”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersonById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">		select * from person where id = $&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>⑦清理缓存：</p>
<p>方式一：增删改的commit（防止脏数据）</p>
<p>方式二：flushCache=”true”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPersonById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.nap.entity.Person&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">	select * from person where id = $&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2、第三方缓存：<br>要想整合三方提供的二级缓存 （或者自定义二级缓存），必须实现org.apache.ibatis.cache.Cache接口，该接口的默认实现类是PerpetualCache</p>
<pre><code>    整合ehcache二级缓存：
    a.
    ehcache-core.jar
    mybatis-Ehcache.jar
    slf4j-api.jar

    b.编写ehcache配置文件 Ehcache.xml

    c.开启EhCache二级缓存

        在xxxMapper.xml中开启
        &lt;cache  type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;&gt;
            &lt;!-- 通过property覆盖Ehcache.xml中的值 --&gt;
            &lt;property name=&quot;maxElementsInMemory&quot; value=&quot;2000&quot;/&gt;
            &lt;property name=&quot;maxElementsOnDisk&quot; value=&quot;3000&quot;/&gt;
        &lt;/cache&gt;</code></pre>
<h2 id="2、逆向工程"><a href="#2、逆向工程" class="headerlink" title="2、逆向工程"></a>2、逆向工程</h2><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200914160351.png" style="zoom:50%;" />

<p>表、类、接口、mapper.xml四者密切相关，因此 当知道一个的时候  其他三个应该可以自动生成。<br>1、表-&gt;其他三个</p>
<p>①导包</p>
<blockquote>
<p>mybatis-generator-core.jar</p>
<p>mybatis.jar</p>
<p>ojdbc.jar</p>
</blockquote>
<p>②逆向工程的配置文件generator.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			suppressAllComments属性值：</span></span><br><span class="line"><span class="comment">				true:自动生成实体类、SQL映射文件时没有注释</span></span><br><span class="line"><span class="comment">				true:自动生成实体类、SQL映射文件，并附有注释</span></span><br><span class="line"><span class="comment">		  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 数据库连接信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			forceBigDecimals属性值： </span></span><br><span class="line"><span class="comment">				true:把数据表中的DECIMAL和NUMERIC类型，</span></span><br><span class="line"><span class="comment">解析为JAVA代码中的java.math.BigDecimal类型 </span></span><br><span class="line"><span class="comment">				false(默认):把数据表中的DECIMAL和NUMERIC类型，</span></span><br><span class="line"><span class="comment">解析为解析为JAVA代码中的Integer类型 </span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		targetProject属性值:实体类的生成位置  </span></span><br><span class="line"><span class="comment">		targetPackage属性值：实体类所在包的路径</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;cn.nap.entity&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- trimStrings属性值：</span></span><br><span class="line"><span class="comment">			true：对数据库的查询结果进行trim操作</span></span><br><span class="line"><span class="comment">			false(默认)：不进行trim操作       </span></span><br><span class="line"><span class="comment">		  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		targetProject属性值:SQL映射文件的生成位置  </span></span><br><span class="line"><span class="comment">		targetPackage属性值：SQL映射文件所在包的路径</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;cn.nap.mapper&quot;</span> </span></span><br><span class="line"><span class="tag">			<span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 生成动态代理的接口  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;cn.nap.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 指定数据库表  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;Person&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;personCard&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;personClass&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, Exception </span>&#123;</span><br><span class="line">		File file=<span class="keyword">new</span> File(<span class="string">&quot;src/generator.xml&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		List&lt;String&gt; warnings=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		ConfigurationParser cp=<span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">		Configuration configuration=cp.parseConfiguration(file);</span><br><span class="line">		</span><br><span class="line">		DefaultShellCallback shellCallback=<span class="keyword">new</span> DefaultShellCallback(<span class="keyword">true</span>);</span><br><span class="line">		<span class="comment">//逆向工程的核心类</span></span><br><span class="line">		MyBatisGenerator generator=<span class="keyword">new</span> MyBatisGenerator(configuration, shellCallback, warnings);</span><br><span class="line">		generator.generate(<span class="keyword">null</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、使用(QBC:query by criteria)：对于like模糊查询，逆向工程需要在传值时 写入%x%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGenerator</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Reader reader=Resources.getResourceAsReader(<span class="string">&quot;conf.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory sessioonFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		<span class="comment">//session -connection</span></span><br><span class="line">		SqlSession session = sessioonFactory.openSession();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//动态代理</span></span><br><span class="line">		PersonMapper personMapper = session.getMapper(PersonMapper.class);//通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">		</span><br><span class="line">		PersonExample example=<span class="keyword">new</span> PersonExample();</span><br><span class="line">		Criteria criteria = example.createCriteria();</span><br><span class="line">		criteria.andIdBetween(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">		List&lt;Person&gt; persons=personMapper.selectByExample(example);</span><br><span class="line">		System.out.println(persons);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>图像测试</title>
    <url>/2020/08/25/%E5%9B%BE%E5%83%8F%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p><img src="http://qflrz833q.hn-bkt.clouddn.com/2019-09-05-20-49-27_0.png"></p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>My first BLOG</title>
    <url>/2020/08/22/My-first-BLOG/</url>
    <content><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><a id="more"></a>

<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><strong>加粗</strong></p>
<p><em>倾斜</em></p>
<p><strong><em>加粗倾斜</em></strong></p>
<p><del>删除</del></p>
<p>==高亮==</p>
<p>上标^上标^</p>
<p>下标<del>下标</del></p>
<p>==列表==</p>
<ul>
<li>一级列表<ul>
<li>一级分列表<ul>
<li>一级分分列表</li>
<li>……</li>
</ul>
</li>
<li>二级分列表</li>
</ul>
</li>
<li>二级列表</li>
<li>三级列表</li>
</ul>
<ol>
<li>一级列表<ol>
<li>一级分列表<ol>
<li>一级分分列表</li>
<li>……</li>
</ol>
</li>
<li>二级分列表</li>
</ol>
</li>
<li>二级列表</li>
<li>三级列表</li>
</ol>
<p>==表格==</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>==引用==</p>
<blockquote>
<p>一级引用</p>
<blockquote>
<p>二级引用</p>
<blockquote>
<p>三级引用</p>
<blockquote>
<p>……</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>==分割线==</p>
<hr>
<p>==代码==</p>
<p><code>public static viod main(String[] args)&#123;&#125;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>==链接==</p>
<p><a href="http://www.bilibili.com/" title="bilibili">哔哩哔哩</a></p>
<p>==图片==</p>
<p><img src="My-first-BLOG.assets/2019-09-05-20-49-27_0.png" alt="图片"></p>
<p>==脚注==</p>
<p>待解释<a href="%E8%A7%A3%E9%87%8A%E6%96%87%E6%9C%AC">^1</a></p>
<hr>
<p>==缩进==</p>
<p>缩进</p>
<p>&emsp;缩进</p>
<p>&ensp;缩进</p>
<p>&nbsp;缩进</p>
<hr>
<p>==居中==</p>
<div align=center>居中</div>

<hr>
<p><img src="My-first-BLOG.assets/2019-09-05-20-49-27_0.png"></p>
]]></content>
  </entry>
</search>
