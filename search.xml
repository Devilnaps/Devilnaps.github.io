<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>spring 笔记</title>
    <url>/2020/08/25/spring-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、IoC容器（控制反转，也叫DI：依赖注入）"><a href="#一、IoC容器（控制反转，也叫DI：依赖注入）" class="headerlink" title="一、IoC容器（控制反转，也叫DI：依赖注入）"></a>一、IoC容器（控制反转，也叫DI：依赖注入）</h1><h2 id="1、搭建spring环境"><a href="#1、搭建spring环境" class="headerlink" title="1、搭建spring环境"></a>1、搭建spring环境</h2><h3 id="1-1导包（5-1）"><a href="#1-1导包（5-1）" class="headerlink" title="1.1导包（5+1）"></a>1.1导包（5+1）</h3><a id="more"></a>

<blockquote>
<p>spring-aop.jar    开发<code>AOP</code>特性时需要</p>
<p>spring-beans.jar    处理bean的jar，例如在applicationContext.xml中的<bean></bean></p>
<p>spring-context.jar    处理上下文的jar</p>
<p>spring-core.jar    spring的核心jar</p>
<p>spring-expression.jar    spring表达式</p>
</blockquote>
<p><a href="https://maven.springframework.org/release/org/springframework/spring/">spring-framework 下载</a></p>
<blockquote>
<p>commons-logging.jar 日志，由第三方提供</p>
</blockquote>
<p><a href="https://mvnrepository.com/">推荐Maven Repository下载</a></p>
<hr>
<h3 id="1-2生成配置文件"><a href="#1-2生成配置文件" class="headerlink" title="1.2生成配置文件"></a>1.2生成配置文件</h3><h4 id="1-2-1工具：sts（spring-tool-suite）"><a href="#1-2-1工具：sts（spring-tool-suite）" class="headerlink" title="1.2.1工具：sts（spring tool suite）"></a>1.2.1工具：sts（spring tool suite）</h4><blockquote>
<p>方式一：安装插件</p>
<p>方式二：下载sts工具</p>
</blockquote>
<p>创建配置文件：</p>
<blockquote>
<p>new 一个<code>Bean Configuration File</code>文件，取名<code>applicationContext.xml</code></p>
</blockquote>
<img src="http://qflrz833q.hn-bkt.clouddn.com/image-20200825121122619.png" style="zoom: 33%;" />



<h4 id="1-2-2配置文件配置方法："><a href="#1-2-2配置文件配置方法：" class="headerlink" title="1.2.2配置文件配置方法："></a>1.2.2配置文件配置方法：</h4><h5 id="方式一：编写applicationContext-xml文件"><a href="#方式一：编写applicationContext-xml文件" class="headerlink" title="方式一：编写applicationContext.xml文件"></a>方式一：编写applicationContext.xml文件</h5><h6 id="【1】先看一个例子："><a href="#【1】先看一个例子：" class="headerlink" title="【1】先看一个例子："></a>【1】先看一个例子：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;cn.nap.entity.Student&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuNo&quot; value&#x3D;&quot;1&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuName&quot; value&#x3D;&quot;zhao&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuAge&quot; value&#x3D;&quot;18&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【2】依赖注入的3种方法："><a href="#【2】依赖注入的3种方法：" class="headerlink" title="【2】依赖注入的3种方法："></a>【2】依赖注入的<code>3种方法</code>：</h6><p> 1、<code>set注入</code>:必须要有set()方法</p>
<p>①实际表现形式：<code>&lt;property ……&gt;&lt;/property&gt;</code></p>
<p>②参数：</p>
<p>③例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;cn.nap.entity.Student&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuNo&quot; value&#x3D;&quot;1&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuName&quot; value&#x3D;&quot;zhao&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;stuAge&quot; value&#x3D;&quot;18&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p>2、<code>构造器注入</code>:必须要提供空构造器以及相应的构造器</p>
<p>①实际表现形式：<code>&lt;constructor-arg ……&gt;&lt;/constructor-arg&gt;</code></p>
<p>②参数：</p>
<blockquote>
<p>name：构造器的属性引用名称</p>
<p>value：构造器的属性对象值</p>
<p>ref：与<code>value</code>区别在于<code>ref</code>后要接除了8种基本类型、String外的引用类型</p>
<p>index：指定顺序<code>&lt;constructor-arg ……&gt;&lt;/constructor-arg&gt;</code></p>
<p>type：辅助指定顺序</p>
</blockquote>
<p>③例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;cn.nap.entity.Student&quot;&gt;</span><br><span class="line">	&lt;constructor-arg name&#x3D;&quot;stuNo&quot; value&#x3D;&quot;2&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">	&lt;constructor-arg name&#x3D;&quot;stuName&quot; value&#x3D;&quot;liu&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">	&lt;constructor-arg name&#x3D;&quot;stuAge&quot; value&#x3D;&quot;20&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p> 3、p命名空间注入：</p>
<p>①实际表现形式：<code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p>
<p>② 参数：</p>
<blockquote>
<p><code>p:</code>：后面接简单类型（含String），如果是引用类型需要在加<code>-ref</code>(p:teacher-ref=”……”)</p>
</blockquote>
<p>③例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;cn.nap.entity.Student&quot; p:stuName&#x3D;&quot;zhao&quot; p:stuNo&#x3D;&quot;3&quot; p:stuAge&#x3D;&quot;22&quot;&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【3】容器的注入"><a href="#【3】容器的注入" class="headerlink" title="【3】容器的注入"></a>【3】容器的注入</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;allcollectiontype&quot; class&#x3D;&quot;cn.nap.entity.AllCollectionType&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;list&quot;&gt;</span><br><span class="line">		&lt;list&gt;</span><br><span class="line">			&lt;value&gt;list1&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;list2&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;list3&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;……&lt;&#x2F;value&gt;			</span><br><span class="line">		&lt;&#x2F;list&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;array&quot;&gt;</span><br><span class="line">		&lt;array&gt;</span><br><span class="line">			&lt;value&gt;array1&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;array2&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;array3&lt;&#x2F;value&gt;			</span><br><span class="line">			&lt;value&gt;……&lt;&#x2F;value&gt;						</span><br><span class="line">		&lt;&#x2F;array&gt;	</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;set&quot;&gt;</span><br><span class="line">		&lt;set&gt;</span><br><span class="line">			&lt;value&gt;set1&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;value&gt;set2&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;value&gt;set3&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;value&gt;……&lt;&#x2F;value&gt;</span><br><span class="line">		&lt;&#x2F;set&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;map&quot;&gt;</span><br><span class="line">		&lt;map&gt;</span><br><span class="line">			&lt;entry&gt;</span><br><span class="line">				&lt;key&gt;</span><br><span class="line">					&lt;value&gt;key1&lt;&#x2F;value&gt;</span><br><span class="line">				&lt;&#x2F;key&gt;</span><br><span class="line">				&lt;value&gt;value1&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;&#x2F;entry&gt;</span><br><span class="line">			&lt;entry&gt;</span><br><span class="line">				&lt;key&gt;</span><br><span class="line">					&lt;value&gt;key2&lt;&#x2F;value&gt;</span><br><span class="line">				&lt;&#x2F;key&gt;</span><br><span class="line">				&lt;value&gt;value2&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;&#x2F;entry&gt;</span><br><span class="line">			&lt;entry&gt;</span><br><span class="line">				&lt;key&gt;</span><br><span class="line">					&lt;value&gt;key3&lt;&#x2F;value&gt;</span><br><span class="line">				&lt;&#x2F;key&gt;</span><br><span class="line">				&lt;value&gt;value3&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;&#x2F;entry&gt;</span><br><span class="line">			&lt;entry&gt;</span><br><span class="line">				&lt;key&gt;</span><br><span class="line">					&lt;value&gt;……&lt;&#x2F;value&gt;</span><br><span class="line">				&lt;&#x2F;key&gt;</span><br><span class="line">				&lt;value&gt;……&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;&#x2F;entry&gt;</span><br><span class="line">		&lt;&#x2F;map&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;props&quot;&gt;</span><br><span class="line">		&lt;props&gt;</span><br><span class="line">			&lt;prop key&#x3D;&quot;props1&quot;&gt;props1&lt;&#x2F;prop&gt;</span><br><span class="line">			&lt;prop key&#x3D;&quot;props2&quot;&gt;props2&lt;&#x2F;prop&gt;</span><br><span class="line">			&lt;prop key&#x3D;&quot;props3&quot;&gt;props3&lt;&#x2F;prop&gt;</span><br><span class="line">			&lt;prop key&#x3D;&quot;……&quot;&gt;……&lt;&#x2F;prop&gt;</span><br><span class="line">		&lt;&#x2F;props&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【4】特殊值的注入"><a href="#【4】特殊值的注入" class="headerlink" title="【4】特殊值的注入"></a>【4】特殊值的注入</h6><p>①value与<value>注入方式的区别</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"><value>……</value></th>
<th align="center">value属性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">位置</td>
<td align="center">写在首尾标签（<value></value>）的中间(不加双引号)</td>
<td align="center">写在value的属性值中（必须加双引号）</td>
</tr>
<tr>
<td align="center"><code>type</code>属性</td>
<td align="center">有（可选）<br />可以通过type属性指定数据类型（<code>全类名</code>）</td>
<td align="center">/</td>
</tr>
<tr>
<td align="center">特殊值的注入</td>
<td align="center">①使用<code>&lt;![CDATA[ ]]&gt;</code><br />②使用XML预定义的实体引用</td>
<td align="center">只能使用XML预定义的实体引用</td>
</tr>
</tbody></table>
<p>②XML预定义的实体引用：</p>
<table>
<thead>
<tr>
<th align="center">实体引用</th>
<th align="center">表示符号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&amp;lt;</code></td>
<td align="center">&lt;</td>
</tr>
<tr>
<td align="center"><code>&amp;amp;</code></td>
<td align="center">&amp;</td>
</tr>
<tr>
<td align="center"><code>&amp;gt;</code></td>
<td align="center">&gt;</td>
</tr>
</tbody></table>
<p>③例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;stuName&quot;&gt;&lt;value&gt;zhao&lt;![CDATA[&lt;&amp;&gt;]]&gt;&lt;&#x2F;value&gt;&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;stuName&quot; value&#x3D;&quot;zhao&lt;&amp;&gt;&quot;&gt;&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<p>④<code>null</code>与<code>&quot;&quot;</code>两种空值的注入</p>
<p>给对象类型赋值null ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;stuName&quot; &gt;  </span><br><span class="line">		&lt;null&#x2F;&gt;       --&gt;注意 没有&lt;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<p>赋空值 “”  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;name&quot; &gt;  </span><br><span class="line">		&lt;value&gt;&lt;&#x2F;value&gt;  </span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【5】自动装配（只用于引用类型）"><a href="#【5】自动装配（只用于引用类型）" class="headerlink" title="【5】自动装配（只用于引用类型）"></a>【5】自动装配（只用于引用类型）</h6><p>①实际表现形式：<code>autowire=</code></p>
<p>②参数：</p>
<blockquote>
<p>“default”：默认值</p>
<p>“byName”：通过id（实际为”byId”）自动在IoC容器中查找，所以IoC容器中必须有需要引用的对象</p>
<p>“byType”：通过引用（ref）类型自动在IoC容器中查找相应的其他bean的类型（class），<code>此参数需满足当前IOC容器中只有一个其他bean满足条件</code></p>
<p>“constructor”：通过该类的构造方法参数自动在IoC容器中查找相应的其他bean的类型（class）</p>
</blockquote>
<p>③例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;cn.nap.entity.Student&quot; autowire&#x3D;&quot;byName&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>④统一自动装配方式：在命名空间内配置，<code>可以在具体bean后面写具体方式，覆盖统一方式</code></p>
<p><code>&lt;beans ……     default-autowire=&quot;default&quot;&gt;</code></p>
<h5 id="方式二：注解"><a href="#方式二：注解" class="headerlink" title="方式二：注解"></a>方式二：注解</h5><h6 id="【1】配置扫描器：扫描器-会将-指定的包-中的-Componet-Service-Respository-Controller修饰的类产生的对象-增加到IOC容器中"><a href="#【1】配置扫描器：扫描器-会将-指定的包-中的-Componet-Service-Respository-Controller修饰的类产生的对象-增加到IOC容器中" class="headerlink" title="【1】配置扫描器：扫描器 会将 指定的包 中的  @Componet @Service  @Respository   @Controller修饰的类产生的对象 增加到IOC容器中"></a>【1】配置扫描器：扫描器 会将 指定的包 中的  @Componet @Service  @Respository   @Controller修饰的类产生的对象 增加到IOC容器中</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置扫描器 --&gt;</span><br><span class="line">	&lt;context:component-scan base-package&#x3D;&quot;package cn.nap.dao&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【2】注入流程"><a href="#【2】注入流程" class="headerlink" title="【2】注入流程"></a>【2】注入流程</h6><p>Spring在启动的时候，会根据base-package在 该包中扫描所有类，查找这些类是否有注解@Component(“studentDao”),如果有，则将该类 加入spring Ioc容器。</p>
<h6 id="【3】-Component细化："><a href="#【3】-Component细化：" class="headerlink" title="【3】@Component细化："></a>【3】@Component细化：</h6><p>dao层注解：@Repository<br>service层注解：@Service<br>控制器层注解：@Controller</p>
<h6 id="【4】注解形式依赖注入"><a href="#【4】注解形式依赖注入" class="headerlink" title="【4】注解形式依赖注入"></a>【4】注解形式依赖注入</h6><p>@Autowire</p>
<p>@Qualifier（”id 值”）//byName</p>
<h3 id="1-3开发IoC程序：在原本要new的地方通过以下方式获得"><a href="#1-3开发IoC程序：在原本要new的地方通过以下方式获得" class="headerlink" title="1.3开发IoC程序：在原本要new的地方通过以下方式获得"></a>1.3开发IoC程序：在原本要<code>new</code>的地方通过以下方式获得</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext context&#x3D;new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">Student student&#x3D;(Student)context.getBean(&quot;student&quot;);</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="2、使用注解实现声明式事务"><a href="#2、使用注解实现声明式事务" class="headerlink" title="2、使用注解实现声明式事务"></a>2、使用注解实现声明式事务</h2><h3 id="2-1-添加jar包（6）"><a href="#2-1-添加jar包（6）" class="headerlink" title="2.1 添加jar包（6）"></a>2.1 添加jar包（<code>6</code>）</h3><blockquote>
<p>spring-tx-4.3.9.RELEASE.jar 事务包</p>
<p>mysql-connector-java-8.0.20.jar 驱动包</p>
<p>commons-dbcp.jar  连接池使用到数据源</p>
<p>commons-pool.jar  连接池</p>
<p>spring-jdbc-4.3.9.RELEASE.jar</p>
<p>aopalliance.jar   aop依赖的包</p>
</blockquote>
<h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><p>①增加事务tx的命名空间</p>
<p>②</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置数据库 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;maven?serverTimezone&#x3D;UTC&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root123&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置事务管理器&quot;transactionManager&quot; --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">	</span><br><span class="line">&lt;!-- 增加对事务的支持 --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h3><p>将需要 成为事务的方法 前增加注解：<br>@Transactional(readOnly=false,propagation=Propagation.REQUIRED)</p>
<h1 id="二、AOP"><a href="#二、AOP" class="headerlink" title="二、AOP"></a>二、AOP</h1><h2 id="1、通过实现接口实现通知"><a href="#1、通过实现接口实现通知" class="headerlink" title="1、通过实现接口实现通知"></a>1、通过实现接口实现通知</h2><h3 id="1-1-导包"><a href="#1-1-导包" class="headerlink" title="1.1 导包"></a>1.1 导包</h3><blockquote>
<p>aopalliance.jar   aop依赖的包</p>
<p>aspectjweaver.jar</p>
</blockquote>
<h3 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h3><p>①前置通知</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置前置通知 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 方法所在的类 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;studentserviceimpl&quot; class&#x3D;&quot;cn.nap.service.impl.StudentServiceImpl&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;studentDao&quot; ref&#x3D;&quot;StudentDaoImpl&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;!-- 通知类 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;logBefore&quot; class&#x3D;&quot;cn.nap.aop.LogBefore&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;!-- 关联 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">	&lt;!-- 配置切入点 --&gt;</span><br><span class="line">	&lt;aop:pointcut expression&#x3D;&quot;execution(public void cn.nap.service.impl.StudentServiceImpl.addStudent(cn.nap.entity.Student))&quot; id&#x3D;&quot;pointcut&quot;&#x2F;&gt;</span><br><span class="line">	&lt;aop:advisor advice-ref&#x3D;&quot;logBefore&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>

<p>②表达式<code>expression=&quot;execution(…)&quot; </code>用法</p>
<table>
<thead>
<tr>
<th>public boolean addStudent(org.lanqiao.entity.Student))</th>
<th>所有返回类型为boolean、参数类型为org.lanqiao.entity.Student的addStudent()方法</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean org.lanqiao.service.IStudentService.<br />addStudent(org.lanqiao.entity.Student)</td>
<td>org.lanqiao.service.IStudentService类（或接口）中的addStudent()方法，并且返回类型是boolean、参数类型是org.lanqiao.entity.Student</td>
</tr>
<tr>
<td>public * addStudent(org.lanqiao.entity.Student)</td>
<td>“*”代表任意返回类型</td>
</tr>
<tr>
<td>public void *( org.lanqiao.entity.Student)</td>
<td>“*”代表任意方法名</td>
</tr>
<tr>
<td>public void addStudent(..)</td>
<td>“..”代表任意参数列表</td>
</tr>
<tr>
<td>* org.lanqiao.service.<em>.</em>(..)</td>
<td>org.lanqiao.service.IStudentService包中，包含的所有方法（不包含子包中的方法）</td>
</tr>
<tr>
<td>* org.lanqiao.service..<em>.</em>(..)</td>
<td>org.lanqiao.service.IStudentService包中，包含的所有方法（包含子包中的方法）</td>
</tr>
</tbody></table>
<h3 id="1-3使用"><a href="#1-3使用" class="headerlink" title="1.3使用"></a>1.3使用</h3><p>①前置通知：实现接口 <code>MethodBeforeAdvice</code>重写方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LogBefore implements MethodBeforeAdvice&#123;</span><br><span class="line">	@Override</span><br><span class="line">	public void before(Method arg0, Object[] arg1, Object arg2) throws Throwable &#123;</span><br><span class="line">		System.out.println(&quot;前置通知&quot;);</span><br><span class="line">	&#125;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②后置通知：实现接口<code>AfterReturningAdvice</code>重写方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LogAfter implements AfterReturningAdvice&#123;</span><br><span class="line">	@Override</span><br><span class="line">	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable &#123;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③异常通知：实现接口<code>ThrowsAdvice</code>自己添加方法，具体见源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LogException implements ThrowsAdvice&#123;</span><br><span class="line">	public void afterThrowing(Method method, Object[] args,Object target, Throwable ex) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>④环绕通知：实现接口<code>MethodInterceptor</code>重写方法</p>
<pre><code>在使用环绕通知时，目标方法的一切信息 都可以通过invocation参数获取到
环绕通知 底层是通过拦截器实现的。</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LogAround implements MethodInterceptor&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Object invoke(MethodInvocation invocation) throws Throwable &#123;</span><br><span class="line">		Object result&#x3D;null;</span><br><span class="line">		try &#123;</span><br><span class="line">			&#x2F;&#x2F;前置通知</span><br><span class="line">			result&#x3D;invocation.proceed();</span><br><span class="line">			&#x2F;&#x2F;后置通知</span><br><span class="line">		&#125;catch(Exception e) &#123;</span><br><span class="line">			&#x2F;&#x2F;异常通知</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			&#x2F;&#x2F;最终通知</span><br><span class="line">		&#125;	</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、通过注解实现通知"><a href="#2、通过注解实现通知" class="headerlink" title="2、通过注解实现通知"></a>2、通过注解实现通知</h2><h3 id="2-1导包：与接口实现一样"><a href="#2-1导包：与接口实现一样" class="headerlink" title="2.1导包：与接口实现一样"></a>2.1导包：与接口实现一样</h3><h3 id="2-2配置："><a href="#2-2配置：" class="headerlink" title="2.2配置："></a>2.2配置：</h3><p>@Aspect不需要 加入扫描器，只需要开启即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开启 注解对AOP的支持 --&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy&gt;&lt;&#x2F;aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-表现形式"><a href="#2-3-表现形式" class="headerlink" title="2.3 表现形式"></a>2.3 表现形式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Aspect &#x2F;&#x2F;声明该类是一个通知</span><br><span class="line">public class LogAspectAnnotation &#123;</span><br><span class="line">	&#x2F;&#x2F;前置通知</span><br><span class="line">	@Before(&quot;execution(public void addStudent(..))&quot;)</span><br><span class="line">	public void logBefore(JoinPoint jp) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;后置通知</span><br><span class="line">	@AfterReturning(pointcut&#x3D;&quot;execution(public void addStudent(..))&quot;,returning&#x3D;&quot;returningValue&quot;)</span><br><span class="line">	public void logAfter(JoinPoint jp,Object returningValue) &#123;&#x2F;&#x2F;returningValue需要在@AfterReturning后面声明</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;异常通知，如果只捕获特定异常，则可以通过第二个参数实现：e</span><br><span class="line">	@AfterThrowing(pointcut&#x3D;&quot;execution(public void addStudent(..))&quot;,throwing&#x3D;&quot;e&quot;)</span><br><span class="line">	public void logException(JoinPoint jp,NullPointerException e) &#123;&#x2F;&#x2F;e需要在@AfterThrowing后面声明		</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;环绕通知，参数为ProceedingJoinPoint对象</span><br><span class="line">	@Around(&quot;execution(public void addStudent(..))&quot;)</span><br><span class="line">	public void logAround(ProceedingJoinPoint jp) &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			jp.proceed();</span><br><span class="line">	</span><br><span class="line">		&#125; catch (Throwable e) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;最终通知</span><br><span class="line">	@After(&quot;execution(public void addStudent(..))&quot;)</span><br><span class="line">	public void logAfter(JoinPoint jp) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;		</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-4-通过注解形式获取目标对象参数，需要使用一个对象：JoinPoint"><a href="#2-4-通过注解形式获取目标对象参数，需要使用一个对象：JoinPoint" class="headerlink" title="2.4 通过注解形式获取目标对象参数，需要使用一个对象：JoinPoint"></a>2.4 通过注解形式获取目标对象参数，需要使用一个对象：JoinPoint</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@AfterReturning(pointcut&#x3D;&quot;execution(public void addStudent(..))&quot;,returning&#x3D;&quot;returningValue&quot;)</span><br><span class="line">	public void logAfter(JoinPoint jp,Object returningValue) &#123;&#x2F;&#x2F;returningValue需要在@AfterReturning后面声明</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、通过配置将类转换为通知"><a href="#3、通过配置将类转换为通知" class="headerlink" title="3、通过配置将类转换为通知"></a>3、通过配置将类转换为通知</h2><h4 id="3-1基于Schema"><a href="#3-1基于Schema" class="headerlink" title="3.1基于Schema"></a>3.1基于Schema</h4><p>①编写一个普通类  public class LogAfter {}<br>②将该类 通过配置，转为一个“通知”</p>
<h4 id="3-2配置"><a href="#3-2配置" class="headerlink" title="3.2配置"></a>3.2配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 将要转换的类纳入容器 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;logSchema&quot; class&#x3D;&quot;cn.nap.aop.LogSchema&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">	&lt;!-- 关联 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">	&lt;!-- 配置切入点 --&gt;</span><br><span class="line">	&lt;aop:pointcut expression&#x3D;&quot;execution(public void cn.nap.service.impl.StudentServiceImpl.addStudent(cn.nap.entity.Student))&quot; id&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">	&lt;!-- &lt;aop:advisor advice-ref&#x3D;&quot;logSchema&quot; pointcut-ref&#x3D;&quot;pointcut1&quot;&#x2F;&gt; --&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- Schema方法 --&gt;</span><br><span class="line">	&lt;aop:aspect ref&#x3D;&quot;logSchema&quot;&gt;</span><br><span class="line">		&lt;aop:before method&#x3D;&quot;before&quot; pointcut&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">		&lt;aop:after-returning method&#x3D;&quot;afterReturning&quot; returning&#x3D;&quot;returningValue&quot; pointcut&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">		&lt;aop:after-throwing method&#x3D;&quot;exception&quot; throwing&#x3D;&quot;e&quot; pointcut&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">		&lt;aop:around method&#x3D;&quot;around&quot; pointcut&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">		&lt;aop:after method&#x3D;&quot;after&quot; pointcut&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">		</span><br><span class="line">	&lt;&#x2F;aop:aspect&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-3表现形式"><a href="#3-3表现形式" class="headerlink" title="3.3表现形式"></a>3.3表现形式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LogSchema &#123;</span><br><span class="line">	&#x2F;&#x2F;前置通知</span><br><span class="line">	public void before() &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;后置通知：JoinPoint，返回值returningValue在.xml文件中配置</span><br><span class="line">	public void afterReturning(JoinPoint js,Object returningValue) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;异常通知：</span><br><span class="line">	public void exception(NullPointerException e) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;环绕通知</span><br><span class="line">	public Object around(ProceedingJoinPoint jp) &#123;</span><br><span class="line">		&#x2F;&#x2F;前置</span><br><span class="line">		Object result&#x3D;null;</span><br><span class="line">		try &#123;</span><br><span class="line">			result&#x3D;jp.proceed();</span><br><span class="line">		&#125;catch(Throwable e) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;最终通知</span><br><span class="line">	public void after() &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="三、Spring开发Web项目"><a href="#三、Spring开发Web项目" class="headerlink" title="三、Spring开发Web项目"></a>三、Spring开发Web项目</h1><h2 id="1、Web项目初始化IOC容器"><a href="#1、Web项目初始化IOC容器" class="headerlink" title="1、Web项目初始化IOC容器"></a>1、Web项目初始化IOC容器</h2><h3 id="1-1过程"><a href="#1-1过程" class="headerlink" title="1.1过程"></a>1.1过程</h3><p>当服务启动时（tomcat），通过监听器将SpringIOC容器初始化一次（该监听器 spring-web.jar已经提供）<br>因此用spring开发web项目 至少需要7个jar： spring-java的6个jar + spring-web.jar，注意：web项目的jar包 是存入到WEB-INF/lib中</p>
<p>web项目启动时 ，会自动加载web.xml，因此需要在web.xml中加载 监听器（ioc容器初始化）。</p>
<h3 id="1-2配置"><a href="#1-2配置" class="headerlink" title="1.2配置"></a>1.2配置</h3><p>①方式一：自已配置<code>web.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 指定容器applicationContext.xml的位置 --&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">	&lt;!-- 监听器的父类ContextLoader中有一个contextConfigLocation属性保存着容器applicationContext.xml的位置 --&gt;</span><br><span class="line">	&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">	&lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">&lt;&#x2F;context-param&gt;</span><br><span class="line"></span><br><span class="line">&lt;listener&gt;</span><br><span class="line">		&lt;!-- 配置监听器，初始化容器applicationContext.xml --&gt;</span><br><span class="line">&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line">&lt;&#x2F;listener&gt;</span><br></pre></td></tr></table></figure>

<p>②方式二：在默认位置<code>WEB-INF</code>放置容器<code>applicationContext.xml</code></p>
<h2 id="2、Spring配置文件的拆分"><a href="#2、Spring配置文件的拆分" class="headerlink" title="2、Spring配置文件的拆分"></a>2、Spring配置文件的拆分</h2><h3 id="2-1按照三层结构拆分"><a href="#2-1按照三层结构拆分" class="headerlink" title="2.1按照三层结构拆分"></a>2.1按照三层结构拆分</h3><p>①拆分</p>
<blockquote>
<p>UI(html/css/jsp  、Servlet)  applicationContext-Controller.xml<br>Service :applicationContext-Service.xml<br>Dao :applicationContext-Dao.xml<br>公共 数据库:applicationContext-DB.xml</p>
</blockquote>
<p>②配置（3种方式）</p>
<blockquote>
<p>方式一：配置<code>web.xml</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">	&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">	&lt;param-value&gt;classpath:applicationContext-Controller.xml,</span><br><span class="line">				classpath:applicationContext-Service.xml,</span><br><span class="line">				classpath:applicationContext-Dao.xml</span><br><span class="line">	&lt;&#x2F;param-value&gt;</span><br><span class="line">&lt;&#x2F;context-param&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方式二：配置<code>web.xml</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">	&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">	&lt;param-value&gt;classpath:applicationContext-*.xml</span><br><span class="line">	&lt;&#x2F;param-value&gt;</span><br><span class="line">&lt;&#x2F;context-param&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方式三：在<code>applicationContext.xml</code>主容器中通过import引入其他容器，再在<code>web.xml</code>中配置主容器</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">	xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">	xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line">	&lt;import resource&#x3D;&quot;applicationContext-Controller.xml&quot;&#x2F;&gt;</span><br><span class="line">	&lt;import resource&#x3D;&quot;applicationContext-Service.xml&quot;&#x2F;&gt;</span><br><span class="line">	&lt;import resource&#x3D;&quot;applicationContext-Dao.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2按照功能拆分"><a href="#2-2按照功能拆分" class="headerlink" title="2.2按照功能拆分"></a>2.2按照功能拆分</h3><p>①例如：</p>
<blockquote>
<p>学生相关配置 applicationContextStudent.xml<br>班级相关配置 applicationContextClass.xml</p>
</blockquote>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-themes-Next Setting</title>
    <url>/2020/08/25/hexo-themes-Next%20Setting/</url>
    <content><![CDATA[<h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><p>【1】Config：  <strong><em>_config.xml</em></strong>（themes）</p>
<p><code>avatar: </code></p>
<p><code>url: /images/头像.jpg</code></p>
<a id="more"></a>

<hr>
<h3 id="头像设置为圆形及头像旋转"><a href="#头像设置为圆形及头像旋转" class="headerlink" title="头像设置为圆形及头像旋转"></a>头像设置为圆形及头像旋转</h3><p>【1】Config ： <strong><em>\themes\next\source\css_common\outline\sidebar\sidebar-author.styl</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: site-author-image-border-width solid site-author-image-border-color;</span><br><span class="line">  &#x2F;&#x2F;头像设置为圆形</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  -webkit-border-radius: 50%;</span><br><span class="line">  -moz-border-radius: 50%;</span><br><span class="line">  transition: 1.4s all;</span><br><span class="line">&#125;</span><br><span class="line"> &#x2F;&#x2F;鼠标点击360度旋转</span><br><span class="line">.site-author-image:hover &#123;</span><br><span class="line">    -webkit-transform: rotate(360deg);</span><br><span class="line">    -moz-transform: rotate(360deg);</span><br><span class="line">    -ms-transform: rotate(360deg);</span><br><span class="line">    -transform: rotate(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-author-name &#123;</span><br><span class="line">  margin: $site-author-name-margin;</span><br><span class="line">  text-align: $site-author-name-align;</span><br><span class="line">  color: $site-author-name-color;</span><br><span class="line">  font-weight: $site-author-name-weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-description &#123;</span><br><span class="line">  margin-top: $site-description-margin-top;</span><br><span class="line">  text-align: $site-description-align;</span><br><span class="line">  font-size: $site-description-font-size;</span><br><span class="line">  color: $site-description-color;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="背景图片及透明度"><a href="#背景图片及透明度" class="headerlink" title="背景图片及透明度"></a>背景图片及透明度</h3><p>【1】Config（custom_file_path）：  <strong><em>_config.xml</em></strong>（themes）</p>
<blockquote>
<p> 只要取消最后一行的 #</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source&#x2F;_data&#x2F;head.njk</span><br><span class="line">  #header: source&#x2F;_data&#x2F;header.njk</span><br><span class="line">  #sidebar: source&#x2F;_data&#x2F;sidebar.njk</span><br><span class="line">  #postMeta: source&#x2F;_data&#x2F;post-meta.njk</span><br><span class="line">  #postBodyEnd: source&#x2F;_data&#x2F;post-body-end.njk</span><br><span class="line">  #footer: source&#x2F;_data&#x2F;footer.njk</span><br><span class="line">  #bodyEnd: source&#x2F;_data&#x2F;body-end.njk</span><br><span class="line">  #variable: source&#x2F;_data&#x2F;variables.styl</span><br><span class="line">  #mixin: source&#x2F;_data&#x2F;mixins.styl</span><br><span class="line">  style: source&#x2F;_data&#x2F;styles.styl</span><br></pre></td></tr></table></figure>

<p>【2】创建 source/_data/styles.styl（此source为blog根目录下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line"> 	background:url(&#x2F;images&#x2F;background.jpg);</span><br><span class="line"> 	background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【3】创建source/images文件夹，用于放置背景图片（此source为blog根目录下）</p>
<hr>
<h3 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h3><p>【1】主题自带：Config <code>_config.yml</code>（themes）</p>
<blockquote>
<figure class="highlight plain"><figcaption><span>Canvas ribbon</span></figcaption><table><tr><td class="code"><pre><span class="line"># Canvas ribbon</span><br><span class="line"># For more information: https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;ribbon.js</span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 300 # The width of the ribbon</span><br><span class="line">  alpha: 0.6 # The transparency of the ribbon</span><br><span class="line">  zIndex: -1 # The display level of the ribbon</span><br></pre></td></tr></table></figure>
</blockquote>
<p>【2】自己添加：</p>
<p>①在<code>\themes\next\layout\layout.njk</code>添加以下代码：</p>
<p><code>&lt;body&gt;</code>中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;bg_content&quot;&gt;</span><br><span class="line">  &lt;canvas id&#x3D;&quot;canvas&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><code>文件末</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;dynamic_bg.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>②创建 \themes\next\source\js\dynamic_bg.js 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var canvas &#x3D; document.getElementById(&quot;canvas&quot;);</span><br><span class="line">var ctx &#x3D; canvas.getContext(&quot;2d&quot;);</span><br><span class="line">var cw &#x3D; canvas.width &#x3D; window.innerWidth,</span><br><span class="line">  cx &#x3D; cw &#x2F; 2;</span><br><span class="line">var ch &#x3D; canvas.height &#x3D; window.innerHeight,</span><br><span class="line">  cy &#x3D; ch &#x2F; 2;</span><br><span class="line"></span><br><span class="line">ctx.fillStyle &#x3D; &quot;#000&quot;;</span><br><span class="line">var linesNum &#x3D; 16;</span><br><span class="line">var linesRy &#x3D; [];</span><br><span class="line">var requestId &#x3D; null;</span><br><span class="line"></span><br><span class="line">function Line(flag) &#123;</span><br><span class="line">  this.flag &#x3D; flag;</span><br><span class="line">  this.a &#x3D; &#123;&#125;;</span><br><span class="line">  this.b &#x3D; &#123;&#125;;</span><br><span class="line">  if (flag &#x3D;&#x3D; &quot;v&quot;) &#123;</span><br><span class="line">    this.a.y &#x3D; 0;</span><br><span class="line">    this.b.y &#x3D; ch;</span><br><span class="line">    this.a.x &#x3D; randomIntFromInterval(0, ch);</span><br><span class="line">    this.b.x &#x3D; randomIntFromInterval(0, ch);</span><br><span class="line">  &#125; else if (flag &#x3D;&#x3D; &quot;h&quot;) &#123;</span><br><span class="line">    this.a.x &#x3D; 0;</span><br><span class="line">    this.b.x &#x3D; cw;</span><br><span class="line">    this.a.y &#x3D; randomIntFromInterval(0, cw);</span><br><span class="line">    this.b.y &#x3D; randomIntFromInterval(0, cw);</span><br><span class="line">  &#125;</span><br><span class="line">  this.va &#x3D; randomIntFromInterval(25, 100) &#x2F; 100;</span><br><span class="line">  this.vb &#x3D; randomIntFromInterval(25, 100) &#x2F; 100;</span><br><span class="line"></span><br><span class="line">  this.draw &#x3D; function() &#123;</span><br><span class="line">    ctx.strokeStyle &#x3D; &quot;#ccc&quot;;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(this.a.x, this.a.y);</span><br><span class="line">    ctx.lineTo(this.b.x, this.b.y);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.update &#x3D; function() &#123;</span><br><span class="line">    if (this.flag &#x3D;&#x3D; &quot;v&quot;) &#123;</span><br><span class="line">      this.a.x +&#x3D; this.va;</span><br><span class="line">      this.b.x +&#x3D; this.vb;</span><br><span class="line">    &#125; else if (flag &#x3D;&#x3D; &quot;h&quot;) &#123;</span><br><span class="line">      this.a.y +&#x3D; this.va;</span><br><span class="line">      this.b.y +&#x3D; this.vb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.edges();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.edges &#x3D; function() &#123;</span><br><span class="line">    if (this.flag &#x3D;&#x3D; &quot;v&quot;) &#123;</span><br><span class="line">      if (this.a.x &lt; 0 || this.a.x &gt; cw) &#123;</span><br><span class="line">        this.va *&#x3D; -1;</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.b.x &lt; 0 || this.b.x &gt; cw) &#123;</span><br><span class="line">        this.vb *&#x3D; -1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (flag &#x3D;&#x3D; &quot;h&quot;) &#123;</span><br><span class="line">      if (this.a.y &lt; 0 || this.a.y &gt; ch) &#123;</span><br><span class="line">        this.va *&#x3D; -1;</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.b.y &lt; 0 || this.b.y &gt; ch) &#123;</span><br><span class="line">        this.vb *&#x3D; -1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (var i &#x3D; 0; i &lt; linesNum; i++) &#123;</span><br><span class="line">  var flag &#x3D; i % 2 &#x3D;&#x3D; 0 ? &quot;h&quot; : &quot;v&quot;;</span><br><span class="line">  var l &#x3D; new Line(flag);</span><br><span class="line">  linesRy.push(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Draw() &#123;</span><br><span class="line">  requestId &#x3D; window.requestAnimationFrame(Draw);</span><br><span class="line">  ctx.clearRect(0, 0, cw, ch);</span><br><span class="line"></span><br><span class="line">  for (var i &#x3D; 0; i &lt; linesRy.length; i++) &#123;</span><br><span class="line">    var l &#x3D; linesRy[i];</span><br><span class="line">    l.draw();</span><br><span class="line">    l.update();</span><br><span class="line">  &#125;</span><br><span class="line">  for (var i &#x3D; 0; i &lt; linesRy.length; i++) &#123;</span><br><span class="line">    var l &#x3D; linesRy[i];</span><br><span class="line">    for (var j &#x3D; i + 1; j &lt; linesRy.length; j++) &#123;</span><br><span class="line">      var l1 &#x3D; linesRy[j]</span><br><span class="line">      Intersect2lines(l, l1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Init() &#123;</span><br><span class="line">  linesRy.length &#x3D; 0;</span><br><span class="line">  for (var i &#x3D; 0; i &lt; linesNum; i++) &#123;</span><br><span class="line">    var flag &#x3D; i % 2 &#x3D;&#x3D; 0 ? &quot;h&quot; : &quot;v&quot;;</span><br><span class="line">    var l &#x3D; new Line(flag);</span><br><span class="line">    linesRy.push(l);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (requestId) &#123;</span><br><span class="line">    window.cancelAnimationFrame(requestId);</span><br><span class="line">    requestId &#x3D; null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cw &#x3D; canvas.width &#x3D; window.innerWidth,</span><br><span class="line">    cx &#x3D; cw &#x2F; 2;</span><br><span class="line">  ch &#x3D; canvas.height &#x3D; window.innerHeight,</span><br><span class="line">    cy &#x3D; ch &#x2F; 2;</span><br><span class="line"></span><br><span class="line">  Draw();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">  Init();</span><br><span class="line"></span><br><span class="line">  addEventListener(&#39;resize&#39;, Init, false);</span><br><span class="line">&#125;, 15);</span><br><span class="line"></span><br><span class="line">function Intersect2lines(l1, l2) &#123;</span><br><span class="line">  var p1 &#x3D; l1.a,</span><br><span class="line">    p2 &#x3D; l1.b,</span><br><span class="line">    p3 &#x3D; l2.a,</span><br><span class="line">    p4 &#x3D; l2.b;</span><br><span class="line">  var denominator &#x3D; (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);</span><br><span class="line">  var ua &#x3D; ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) &#x2F; denominator;</span><br><span class="line">  var ub &#x3D; ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) &#x2F; denominator;</span><br><span class="line">  var x &#x3D; p1.x + ua * (p2.x - p1.x);</span><br><span class="line">  var y &#x3D; p1.y + ua * (p2.y - p1.y);</span><br><span class="line">  if (ua &gt; 0 &amp;&amp; ub &gt; 0) &#123;</span><br><span class="line">    markPoint(&#123;</span><br><span class="line">      x: x,</span><br><span class="line">      y: y</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function markPoint(p) &#123;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.arc(p.x, p.y, 2, 0, 2 * Math.PI);</span><br><span class="line">  ctx.fill();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function randomIntFromInterval(mn, mx) &#123;</span><br><span class="line">  return ~~(Math.random() * (mx - mn + 1) + mn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="增加卡通人物"><a href="#增加卡通人物" class="headerlink" title="增加卡通人物"></a>增加卡通人物</h3><p>【1】Installation</p>
<p><code>npm install --save hexo-helper-live2d</code></p>
<p>【2】Models</p>
<p><code>npm install &#123;packagename&#125;</code></p>
<blockquote>
<p> {packagename} ==</p>
<ul>
<li><code>live2d-widget-model-chitose</code></li>
<li><code>live2d-widget-model-epsilon2_1</code></li>
<li><code>live2d-widget-model-gf</code></li>
<li><code>live2d-widget-model-haru/01</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>
<li><code>live2d-widget-model-haru/02</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>
<li><code>live2d-widget-model-haruto</code></li>
<li><code>live2d-widget-model-hibiki</code></li>
<li><code>live2d-widget-model-hijiki</code></li>
<li><code>live2d-widget-model-izumi</code></li>
<li><code>live2d-widget-model-koharu</code></li>
<li><code>live2d-widget-model-miku</code></li>
<li><code>live2d-widget-model-ni-j</code></li>
<li><code>live2d-widget-model-nico</code></li>
<li><code>live2d-widget-model-nietzsche</code></li>
<li><code>live2d-widget-model-nipsilon</code></li>
<li><code>live2d-widget-model-nito</code></li>
<li><code>live2d-widget-model-shizuku</code></li>
<li><code>live2d-widget-model-tororo</code></li>
<li><code>live2d-widget-model-tsumiki</code></li>
<li><code>live2d-widget-model-unitychan</code></li>
<li><code>live2d-widget-model-wanko</code></li>
<li><code>live2d-widget-model-z16</code></li>
</ul>
</blockquote>
<p>【3】Config  <strong><em>_config.xml</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  tagMode: false</span><br><span class="line">  log: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">  react:</span><br><span class="line">    opacity: 0.7</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h3><p>【1】创建~\source_data\styles.styl 在<code>&lt;body&gt;</code>添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    cursor: url(https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;TRHX&#x2F;CDN-for-itrhx.com@2.1.6&#x2F;images&#x2F;mouse.cur),auto;</span><br><span class="line">    background-color: @theme_background;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【2】鼠标样式：图片格式为.ico、.ani、.cur，建议使用.cur，如果使用.ani或者其他格式无效，原因是浏览器兼容问题，请阅读<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Basic_User_Interface/Using_URL_values_for_the_cursor_property">参考文档</a></p>
<p> <a href="https://www.axialis.com/">Axialis CursorWorkshop</a> 制作样</p>
<hr>
<h3 id="鼠标点击出现爱心"><a href="#鼠标点击出现爱心" class="headerlink" title="鼠标点击出现爱心"></a>鼠标点击出现爱心</h3><p>【1】创建 themes\next\source\js\love.js ，添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e&#x3D;0;e&lt;d.length;e++)d[e].alpha&lt;&#x3D;0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+&#x3D;.004,d[e].alpha-&#x3D;.013,d[e].el.style.cssText&#x3D;&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t&#x3D;&quot;function&quot;&#x3D;&#x3D;typeof e.onclick&amp;&amp;e.onclick;e.onclick&#x3D;function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a&#x3D;t.createElement(&quot;div&quot;);a.className&#x3D;&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a&#x3D;t.createElement(&quot;style&quot;);a.type&#x3D;&quot;text&#x2F;css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText&#x3D;e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d&#x3D;[];e.requestAnimationFrame&#x3D;function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3&#x2F;60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>



<p>【2】在 themes\next\layout\layout.njk 文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;love.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="鼠标点击显示字体"><a href="#鼠标点击显示字体" class="headerlink" title="鼠标点击显示字体"></a>鼠标点击显示字体</h3><p>【1】创建 themes\next\source\js\text.js ，添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a_idx &#x3D; 0;</span><br><span class="line">jQuery(document).ready(function($) &#123;</span><br><span class="line">    $(&quot;body&quot;).click(function(e) &#123;</span><br><span class="line">        var a &#x3D; new Array</span><br><span class="line">        (&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot;, &quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;);</span><br><span class="line">        var $i &#x3D; $(&quot;&lt;span&#x2F;&gt;&quot;).text(a[a_idx]);</span><br><span class="line">        a_idx &#x3D; (a_idx + 1) % a.length;</span><br><span class="line">        var x &#x3D; e.pageX,</span><br><span class="line">        y &#x3D; e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            &quot;z-index&quot;: 5,</span><br><span class="line">            &quot;top&quot;: y - 20,</span><br><span class="line">            &quot;left&quot;: x,</span><br><span class="line">            &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">            &quot;font-weight&quot;: &quot;bold&quot;,</span><br><span class="line">            &quot;color&quot;: &quot;#FF0000&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">        $(&quot;body&quot;).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">            &quot;top&quot;: y - 180,</span><br><span class="line">            &quot;opacity&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">      3000,</span><br><span class="line">      function() &#123;</span><br><span class="line">          $i.remove();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(&#39;delay()&#39;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function delay() &#123;</span><br><span class="line">    $(&quot;.buryit&quot;).removeAttr(&quot;onclick&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【2】在 themes\next\layout\layout.njk 文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--单击显示文字--&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;text.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="鼠标点击出现烟花效果"><a href="#鼠标点击出现烟花效果" class="headerlink" title="鼠标点击出现烟花效果"></a>鼠标点击出现烟花效果</h3><p>【1】创建 themes\next\source\js\fireworks.js ，添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX&#x3D;(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY&#x3D;e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t&#x3D;anime.random(0,360)*Math.PI&#x2F;180,a&#x3D;anime.random(50,180),n&#x3D;[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;colors[anime.random(0,colors.length-1)],a.radius&#x3D;anime.random(16,32),a.endPos&#x3D;setParticuleDirection(a),a.draw&#x3D;function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle&#x3D;a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;&quot;#F00&quot;,a.radius&#x3D;0.1,a.alpha&#x3D;0.5,a.lineWidth&#x3D;6,a.draw&#x3D;function()&#123;ctx.globalAlpha&#x3D;a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth&#x3D;a.lineWidth,ctx.strokeStyle&#x3D;a.color,ctx.stroke(),ctx.globalAlpha&#x3D;1&#125;,a&#125;function renderParticule(e)&#123;for(var t&#x3D;0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a&#x3D;createCircle(e,t),n&#x3D;[],i&#x3D;0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n&#x3D;this,i&#x3D;arguments;clearTimeout(a),a&#x3D;setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl&#x3D;document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx&#x3D;canvasEl.getContext(&quot;2d&quot;),numberOfParticules&#x3D;30,pointerX&#x3D;0,pointerY&#x3D;0,tap&#x3D;&quot;mousedown&quot;,colors&#x3D;[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize&#x3D;debounce(function()&#123;canvasEl.width&#x3D;2*window.innerWidth,canvasEl.height&#x3D;2*window.innerHeight,canvasEl.style.width&#x3D;window.innerWidth+&quot;px&quot;,canvasEl.style.height&#x3D;window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render&#x3D;anime(&#123;duration:1&#x2F;0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;A&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;&quot;IMG&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX&#x3D;(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY&#x3D;e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t&#x3D;anime.random(0,360)*Math.PI&#x2F;180,a&#x3D;anime.random(50,180),n&#x3D;[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;colors[anime.random(0,colors.length-1)],a.radius&#x3D;anime.random(16,32),a.endPos&#x3D;setParticuleDirection(a),a.draw&#x3D;function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle&#x3D;a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;&quot;#F00&quot;,a.radius&#x3D;0.1,a.alpha&#x3D;0.5,a.lineWidth&#x3D;6,a.draw&#x3D;function()&#123;ctx.globalAlpha&#x3D;a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth&#x3D;a.lineWidth,ctx.strokeStyle&#x3D;a.color,ctx.stroke(),ctx.globalAlpha&#x3D;1&#125;,a&#125;function renderParticule(e)&#123;for(var t&#x3D;0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a&#x3D;createCircle(e,t),n&#x3D;[],i&#x3D;0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n&#x3D;this,i&#x3D;arguments;clearTimeout(a),a&#x3D;setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl&#x3D;document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx&#x3D;canvasEl.getContext(&quot;2d&quot;),numberOfParticules&#x3D;30,pointerX&#x3D;0,pointerY&#x3D;0,tap&#x3D;&quot;mousedown&quot;,colors&#x3D;[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize&#x3D;debounce(function()&#123;canvasEl.width&#x3D;2*window.innerWidth,canvasEl.height&#x3D;2*window.innerHeight,canvasEl.style.width&#x3D;window.innerWidth+&quot;px&quot;,canvasEl.style.height&#x3D;window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render&#x3D;anime(&#123;duration:1&#x2F;0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;A&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;&quot;IMG&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</span><br></pre></td></tr></table></figure>

<p>【2】在 themes\next\layout\layout.njk 文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt; </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt; </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;fireworks.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h3 id="增加背景音乐"><a href="#增加背景音乐" class="headerlink" title="增加背景音乐"></a>增加背景音乐</h3><p>【1】选择<a href="https://music.163.com/#">音乐</a>，生成外链</p>
<img src="http://qflrz833q.hn-bkt.clouddn.com/Snipaste_2020-08-25_21-30-01.png" style="zoom: 50%;" />

<p>【2】复制代码</p>
<img src="http://qflrz833q.hn-bkt.clouddn.com/Snipaste_2020-08-25_21-31-28.png" style="zoom:50%;" />

<p>【3】增加到相对应的位置（比如：themes\next\layout_macro\sidebar.njk）</p>
<hr>
<h3 id="增加背景音乐（aplayer）"><a href="#增加背景音乐（aplayer）" class="headerlink" title="增加背景音乐（aplayer）"></a>增加背景音乐（aplayer）</h3><p>【1】下载<a href="https://github.com/MoePlayer/APlayer">aplayer</a>,解压后将<code>disk</code>文件夹复制到 \themes\next\source 中</p>
<p>【2】创建 \themes\next\source\dist\music.js ,添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const ap &#x3D; new APlayer(&#123;</span><br><span class="line">    container: document.getElementById(&#39;aplayer&#39;),</span><br><span class="line">    autoplay: false,</span><br><span class="line">    loop: &#39;all&#39;,</span><br><span class="line">    volume: 0.7,</span><br><span class="line">    listFolded: true,</span><br><span class="line">    listMaxHeight: 60,</span><br><span class="line">    audio: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#39;name1&#39;,</span><br><span class="line">            artist: &#39;artist1&#39;,</span><br><span class="line">            url: &#39;url1.mp3&#39;,</span><br><span class="line">            cover: &#39;cover1.jpg&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#39;name2&#39;,</span><br><span class="line">            artist: &#39;artist2&#39;,</span><br><span class="line">            url: &#39;url2.mp3&#39;,</span><br><span class="line">            cover: &#39;cover2.jpg&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>【3】配置：</p>
<ul>
<li>普通模式代码</li>
<li>播放列表模式代码</li>
<li>吸底模式代码</li>
<li>迷你模式代码</li>
</ul>
<blockquote>
<p>参考<a href="%5Bhttps://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html#%E4%B8%8B%E8%BD%BDaplayer%5D(https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html#%E4%B8%8B%E8%BD%BDaplayer)">blog</a> </p>
<p><a href="https://aplayer.js.org/#/zh-Hans/">中文文档</a></p>
</blockquote>
<p>【4】参数解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const ap &#x3D; new APlayer(&#123;</span><br><span class="line">    container: document.getElementById(&#39;aplayer&#39;), &#x2F;&#x2F;播放器容器元素</span><br><span class="line">    mini: false, &#x2F;&#x2F;迷你模式</span><br><span class="line">    autoplay: false, &#x2F;&#x2F;自动播放</span><br><span class="line">    theme: &#39;#FADFA3&#39;, &#x2F;&#x2F;主题色</span><br><span class="line">    loop: &#39;all&#39;, &#x2F;&#x2F;音频循环播放, 可选值: &#39;all&#39;全部循环, &#39;one&#39;单曲循环, &#39;none&#39;不循环</span><br><span class="line">    order: &#39;random&#39;, &#x2F;&#x2F;音频循环顺序, 可选值: &#39;list&#39;列表循环, &#39;random&#39;随机循环</span><br><span class="line">    preload: &#39;auto&#39;, &#x2F;&#x2F;预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;</span><br><span class="line">    volume: 0.7, &#x2F;&#x2F;默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span><br><span class="line">    mutex: true, &#x2F;&#x2F;互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</span><br><span class="line">    listFolded: false, &#x2F;&#x2F;列表默认折叠</span><br><span class="line">    listMaxHeight: 90, &#x2F;&#x2F;列表最大高度</span><br><span class="line">    lrcType: 3, &#x2F;&#x2F;歌词传递方式</span><br><span class="line">    audio: [ &#x2F;&#x2F;音频信息,包含以下</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#39;name1&#39;, &#x2F;&#x2F;音频名称</span><br><span class="line">            artist: &#39;artist1&#39;, &#x2F;&#x2F;音频艺术家</span><br><span class="line">            url: &#39;url1.mp3&#39;, &#x2F;&#x2F;音频外链</span><br><span class="line">            cover: &#39;cover1.jpg&#39;, &#x2F;&#x2F;音频封面</span><br><span class="line">            lrc: &#39;lrc1.lrc&#39;, &#x2F;&#x2F;音频歌词，配合上面的lrcType使用</span><br><span class="line">            theme: &#39;#ebd0c2&#39; &#x2F;&#x2F;切换到此音频时的主题色，比上面的 theme 优先级高</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#39;name2&#39;, &#x2F;&#x2F;如果只有一首歌，删掉这一块，如有更多歌曲按此格式逐渐往下添加</span><br><span class="line">            artist: &#39;artist2&#39;,</span><br><span class="line">            url: &#39;url2.mp3&#39;,</span><br><span class="line">            cover: &#39;cover2.jpg&#39;,</span><br><span class="line">            lrc: &#39;lrc2.lrc&#39;,</span><br><span class="line">            theme: &#39;#46718b&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>【5】部署：放置在自己想的位置（比如：\themes\next\layout_macro\sidebar.njk）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;dist&#x2F;APlayer.min.css&quot;&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;aplayer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;dist&#x2F;APlayer.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;dist&#x2F;music.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="添加博客运行时间"><a href="#添加博客运行时间" class="headerlink" title="添加博客运行时间"></a>添加博客运行时间</h3><p>【1】在 \themes\next\layout_partials\footer.njk 下添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span id&#x3D;&quot;timeDate&quot;&gt;载入天数...&lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;times&quot;&gt;载入时分秒...&lt;&#x2F;span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now &#x3D; new Date(); </span><br><span class="line">    function createtime() &#123; </span><br><span class="line">        var grt&#x3D; new Date(&quot;08&#x2F;10&#x2F;2018 17:38:00&quot;);&#x2F;&#x2F;在此处修改你的建站时间，格式：月&#x2F;日&#x2F;年 时:分:秒</span><br><span class="line">        now.setTime(now.getTime()+250); </span><br><span class="line">        days &#x3D; (now - grt ) &#x2F; 1000 &#x2F; 60 &#x2F; 60 &#x2F; 24; dnum &#x3D; Math.floor(days); </span><br><span class="line">        hours &#x3D; (now - grt ) &#x2F; 1000 &#x2F; 60 &#x2F; 60 - (24 * dnum); hnum &#x3D; Math.floor(hours); </span><br><span class="line">        if(String(hnum).length &#x3D;&#x3D;1 )&#123;hnum &#x3D; &quot;0&quot; + hnum;&#125; minutes &#x3D; (now - grt ) &#x2F; 1000 &#x2F;60 - (24 * 60 * dnum) - (60 * hnum); </span><br><span class="line">        mnum &#x3D; Math.floor(minutes); if(String(mnum).length &#x3D;&#x3D;1 )&#123;mnum &#x3D; &quot;0&quot; + mnum;&#125; </span><br><span class="line">        seconds &#x3D; (now - grt ) &#x2F; 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span><br><span class="line">        snum &#x3D; Math.round(seconds); if(String(snum).length &#x3D;&#x3D;1 )&#123;snum &#x3D; &quot;0&quot; + snum;&#125; </span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML &#x3D; &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;; </span><br><span class="line">        document.getElementById(&quot;times&quot;).innerHTML &#x3D; hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;; </span><br><span class="line">    &#125; </span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="增加动态线条效果"><a href="#增加动态线条效果" class="headerlink" title="增加动态线条效果"></a>增加动态线条效果</h3><p>【1】在 \themes\next\layout\layout.njk 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--动态线条背景--&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;</span><br><span class="line">color&#x3D;&quot;220,220,220&quot; opacity&#x3D;&#39;0.7&#39; zIndex&#x3D;&quot;-2&quot; count&#x3D;&quot;200&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;canvas-nest.js&#x2F;1.0.0&#x2F;canvas-nest.min.js&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="数字雨效果"><a href="#数字雨效果" class="headerlink" title="数字雨效果"></a>数字雨效果</h3><p>【1】创建 themes\next\source\js\DigitalRain.js ，添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    &#x2F;&#x2F;获取画布对象</span><br><span class="line">    var canvas &#x3D; document.getElementById(&quot;canvas&quot;);</span><br><span class="line">    &#x2F;&#x2F;获取画布的上下文</span><br><span class="line">    var context &#x3D;canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    var s &#x3D; window.screen;</span><br><span class="line">    var W &#x3D; canvas.width &#x3D; s.width;</span><br><span class="line">    var H &#x3D; canvas.height;</span><br><span class="line">    &#x2F;&#x2F;获取浏览器屏幕的宽度和高度</span><br><span class="line">    &#x2F;&#x2F;var W &#x3D; window.innerWidth;</span><br><span class="line">    &#x2F;&#x2F;var H &#x3D; window.innerHeight;</span><br><span class="line">    &#x2F;&#x2F;设置canvas的宽度和高度</span><br><span class="line">    canvas.width &#x3D; W;</span><br><span class="line">    canvas.height &#x3D; H;</span><br><span class="line">    &#x2F;&#x2F;每个文字的字体大小</span><br><span class="line">    var fontSize &#x3D; 12;</span><br><span class="line">    &#x2F;&#x2F;计算列</span><br><span class="line">    var colunms &#x3D; Math.floor(W &#x2F;fontSize);	</span><br><span class="line">    &#x2F;&#x2F;记录每列文字的y轴坐标</span><br><span class="line">    var drops &#x3D; [];</span><br><span class="line">    &#x2F;&#x2F;给每一个文字初始化一个起始点的位置</span><br><span class="line">    for(var i&#x3D;0;i&lt;colunms;i++)&#123;</span><br><span class="line">        drops.push(0);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;运动的文字</span><br><span class="line">    var str &#x3D;&quot;WELCOME TO WWW.ITRHX.COM&quot;;</span><br><span class="line">    &#x2F;&#x2F;4:fillText(str,x,y);原理就是去更改y的坐标位置</span><br><span class="line">    &#x2F;&#x2F;绘画的函数</span><br><span class="line">    function draw()&#123;</span><br><span class="line">        context.fillStyle &#x3D; &quot;rgba(238,238,238,.08)&quot;;&#x2F;&#x2F;遮盖层</span><br><span class="line">        context.fillRect(0,0,W,H);</span><br><span class="line">        &#x2F;&#x2F;给字体设置样式</span><br><span class="line">        context.font &#x3D; &quot;600 &quot;+fontSize+&quot;px  Georgia&quot;;</span><br><span class="line">        &#x2F;&#x2F;给字体添加颜色</span><br><span class="line">        context.fillStyle &#x3D; [&quot;#33B5E5&quot;, &quot;#0099CC&quot;, &quot;#AA66CC&quot;, &quot;#9933CC&quot;, &quot;#99CC00&quot;, &quot;#669900&quot;, &quot;#FFBB33&quot;, &quot;#FF8800&quot;, &quot;#FF4444&quot;, &quot;#CC0000&quot;][parseInt(Math.random() * 10)];&#x2F;&#x2F;randColor();可以rgb,hsl, 标准色，十六进制颜色</span><br><span class="line">        &#x2F;&#x2F;写入画布中</span><br><span class="line">        for(var i&#x3D;0;i&lt;colunms;i++)&#123;</span><br><span class="line">            var index &#x3D; Math.floor(Math.random() * str.length);</span><br><span class="line">            var x &#x3D; i*fontSize;</span><br><span class="line">            var y &#x3D; drops[i] *fontSize;</span><br><span class="line">            context.fillText(str[index],x,y);</span><br><span class="line">            &#x2F;&#x2F;如果要改变时间，肯定就是改变每次他的起点</span><br><span class="line">            if(y &gt;&#x3D; canvas.height &amp;&amp; Math.random() &gt; 0.99)&#123;</span><br><span class="line">                drops[i] &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">            drops[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    function randColor()&#123;&#x2F;&#x2F;随机颜色</span><br><span class="line">        var r &#x3D; Math.floor(Math.random() * 256);</span><br><span class="line">        var g &#x3D; Math.floor(Math.random() * 256);</span><br><span class="line">        var b &#x3D; Math.floor(Math.random() * 256);</span><br><span class="line">        return &quot;rgb(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    draw();</span><br><span class="line">    setInterval(draw,35);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>【2】在 \themes\next\source\css\main.styl 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canvas &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  right: 0px;</span><br><span class="line">  bottom: 0px;</span><br><span class="line">  min-width: 100%;</span><br><span class="line">  min-height: 100%;</span><br><span class="line">  height: auto;</span><br><span class="line">  width: auto;</span><br><span class="line">  z-index: -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【3】在 \themes\next\layout\layout.njk 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 数字雨 --&gt;</span><br><span class="line">&lt;canvas id&#x3D;&quot;canvas&quot; width&#x3D;&quot;1440&quot; height&#x3D;&quot;900&quot; &gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;DigitalRain.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="icon修改"><a href="#icon修改" class="headerlink" title="icon修改"></a>icon修改</h3><p>【1】Config <code>_config.yml</code>（themes）</p>
<hr>
<h3 id="字体修改"><a href="#字体修改" class="headerlink" title="字体修改"></a>字体修改</h3><p><a href="https://fonts.google.com/">Google Fonts</a></p>
<p>【1】Config <code>_config.yml</code>（themes）</p>
<hr>
<h3 id="添加文章结束标语"><a href="#添加文章结束标语" class="headerlink" title="添加文章结束标语"></a>添加文章结束标语</h3><p>【1】创建 \themes\next\layout_macro\passage-end-tag.njk 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style&#x3D;&quot;text-align:center;color: #FA8072;font-size:10px;&quot;&gt;------------- End  &lt;i class&#x3D;&quot;fa fa-hourglass-end&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;  Thank For Your Reading -------------&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>其中的icon可以去<a href="http://www.fontawesome.com.cn/faicons/">Font Awesome</a>自行查找替换。字体大小修改其中的<code>font-size</code>，位置修改其中的<code>text-align</code>，颜色修改其中的<code>color</code>,可以参考<a href="https://blog.yleao.com/2018/0731/%E5%AD%97%E4%BD%93%E3%80%81%E5%AD%97%E5%8F%B7%E4%B8%8E%E9%A2%9C%E8%89%B2%E6%B5%8B%E8%AF%95.html#%E9%A2%9C%E8%89%B2%E5%88%97%E8%A1%A8">这里</a>。</p>
<p>【2】在 \themes\next\layout_macro\post.njk 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#39;passage-end-tag.njk&#39; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>【3】Config <code>_config.yml</code>（themes）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="tag标记的更改"><a href="#tag标记的更改" class="headerlink" title="tag标记的更改"></a>tag标记的更改</h3><p>【1】替换 \themes\next\layout_macro\post.njk 中的<code>&#123;%- set tag_indicate = '<i class="fa fa-tag"></i>' if theme.tag_icon else '#"></i>' %&#125;</code>为<code>&#123;%- set tag_indicate = '<i class="fa fa-tag"></i>' if theme.tag_icon else '<i class="fa fa-tag"></i>' %&#125;</code></p>
<p>想使用其他图标可在<a href="http://www.fontawesome.com.cn/faicons/">Fontawesome</a>内自行查找。</p>
<hr>
<h3 id="给文章添加脚注"><a href="#给文章添加脚注" class="headerlink" title="给文章添加脚注"></a>给文章添加脚注</h3><p>【1】<code>npm install hexo-footnotes --save</code></p>
<p>【2】Config <code>_config.yml</code>（hexo）增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins:</span><br><span class="line">  - hexo-footnotes</span><br></pre></td></tr></table></figure>

<p>【3】安装完成后按官方<a href="https://githut.com/LouisBarranqueiro/hexo-footnotes#syntax">readme</a>的方式书写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">basic footnote[^1]</span><br><span class="line">here is an inline footnote[^2](inline footnote)</span><br><span class="line">and another one[^3]</span><br><span class="line">and another one[^4]</span><br><span class="line"></span><br><span class="line">[^1]: basic footnote content</span><br><span class="line">[^3]: paragraph</span><br><span class="line">footnote</span><br><span class="line">content</span><br><span class="line">[^4]: footnote content with some [markdown](https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Markdown)</span><br></pre></td></tr></table></figure>

<p>注脚的内容最好放在文章的最后面，否则可能会出错误。</p>
<hr>
<h3 id="增加本地搜索"><a href="#增加本地搜索" class="headerlink" title="增加本地搜索"></a>增加本地搜索</h3><p>【1】<code>npm install hexo-generator-searchdb --save</code></p>
<p>【2】Config <code>_config.yml</code>（hexo）增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: excerpt</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>【3】Config <code>_config.yml</code>（themes）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>【1】创建 \themes\next\source\404.html 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8;&quot;&#x2F;&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge,chrome&#x3D;1&quot; &#x2F;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;all&quot; &#x2F;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;index,follow&quot;&#x2F;&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;style&#x2F;404style.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;plain&quot; src&#x3D;&quot;http:&#x2F;&#x2F;www.qq.com&#x2F;404&#x2F;search_children.js&quot;</span><br><span class="line">          charset&#x3D;&quot;utf-8&quot; homePageUrl&#x3D;&quot;&#x2F;&quot;</span><br><span class="line">          homePageName&#x3D;&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;data.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;page.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>其中<code>homePageUrl</code>与<code>homePageName</code>可自定义。</p>
<hr>
<h3 id="添加置顶"><a href="#添加置顶" class="headerlink" title="添加置顶"></a>添加置顶</h3><p>【1】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>【2】在文章中加入<code>top: x</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: </span><br><span class="line">tags:</span><br><span class="line">  - life</span><br><span class="line">  - music</span><br><span class="line">categories:</span><br><span class="line">  - </span><br><span class="line">abbrlink: 31015</span><br><span class="line">date: </span><br><span class="line">top: 1</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>【3】在 \themes\next\layout_macro\post.njk文件中<code>&lt;div class=&quot;post-meta-container&quot;&gt;</code>后 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    &lt;font color&#x3D;#FFFFFF&gt;&lt;b style&#x3D;&quot;background-color:#A9A9A9&quot;&gt;　Top　&lt;&#x2F;b&gt;&lt;&#x2F;font&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="加密文章"><a href="#加密文章" class="headerlink" title="加密文章"></a>加密文章</h3><p>首先<code>npm install --save hexo-blog-encrypt</code>下载插件。</p>
<p>下好插件后将<code>password, abstract, message</code>等字段添加到要加密文章的头部，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2020-05-02 18:00:00</span><br><span class="line">password: 设定的密码</span><br><span class="line">abstract: 该博客的摘要，会显示在博客的列表页</span><br><span class="line">message:  查看博客时，密码输入框上面的描述性文字</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<p>最后再使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>在本地预览加密的文章。</p>
<hr>
<h3 id="Hitokoto"><a href="#Hitokoto" class="headerlink" title="Hitokoto"></a>Hitokoto</h3><p><a href="https://hitokoto.cn/api">点击此处 </a>访问官方  API</p>
<p>【1】创建 ~blog\source_data\sidebar.njk 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- none-select-br --&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- hitokoto --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;hitokoto-title&quot;&gt;</span><br><span class="line">	&lt;i class&#x3D;&quot;fa fa-paragraph&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">	&lt;b&gt;一言&lt;&#x2F;b&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;hitokoto&quot;&gt;:D 获取中...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;i id&#x3D;&quot;hitofrom&quot;&gt;:D 获取中...&lt;&#x2F;i&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bluebird@3&#x2F;js&#x2F;browser&#x2F;bluebird.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;whatwg-fetch@2.0.3&#x2F;fetch.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  fetch(&#39;https:&#x2F;&#x2F;v1.hitokoto.cn&#39;)</span><br><span class="line">    .then(function (res)&#123;</span><br><span class="line">      return res.json();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(function (data) &#123;</span><br><span class="line">      var hitokoto &#x3D; document.getElementById(&#39;hitokoto&#39;);</span><br><span class="line">      hitokoto.innerText &#x3D; &#39;\xa0\xa0\xa0\xa0\xa0\xa0\xa0&#39; + data.hitokoto;</span><br><span class="line">      var hitofrom &#x3D; document.getElementById(&#39;hitofrom&#39;);</span><br><span class="line">      hitofrom.innerText &#x3D; &quot;——&quot; + data.from + &#39;\xa0&#39;; </span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(function (err) &#123;</span><br><span class="line">      console.error(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>【2】在~blog\source_data\styles.styl 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;hitokoto</span><br><span class="line"></span><br><span class="line">.hitokoto-title &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#hitokoto &#123;</span><br><span class="line">  text-align: left;</span><br><span class="line">  font-family: &quot;Microsoft YaHei&quot;;</span><br><span class="line">  font-size: 11px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#hitofrom &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  font-family: &quot;Microsoft YaHei&quot;;</span><br><span class="line">  font-size: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【3】Config <code>_congig.yml</code> （themes）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source&#x2F;_data&#x2F;head.njk</span><br><span class="line">  #header: source&#x2F;_data&#x2F;header.njk</span><br><span class="line">  sidebar: source&#x2F;_data&#x2F;sidebar.njk</span><br><span class="line">  #postMeta: source&#x2F;_data&#x2F;post-meta.njk</span><br><span class="line">  #postBodyEnd: source&#x2F;_data&#x2F;post-body-end.njk</span><br><span class="line">  #footer: source&#x2F;_data&#x2F;footer.njk</span><br><span class="line">  #bodyEnd: source&#x2F;_data&#x2F;body-end.njk</span><br><span class="line">  #variable: source&#x2F;_data&#x2F;variables.styl</span><br><span class="line">  #mixin: source&#x2F;_data&#x2F;mixins.styl</span><br><span class="line">  style: source&#x2F;_data&#x2F;styles.styl</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h3><p>【1】创建 blog\scripts\tags\fold_tag.js 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* global hexo *&#x2F;</span><br><span class="line">&#x2F;&#x2F; Usage: &#123;% fold 点击显&#x2F;隐内容 %&#125; Something &#123;% endfold %&#125;</span><br><span class="line">function fold (args, content) &#123;</span><br><span class="line">  var text &#x3D; args[0];</span><br><span class="line">  if(!text) text &#x3D; &quot;点击显&#x2F;隐&quot;;</span><br><span class="line">  return &#39;&lt;div&gt;&lt;div class&#x3D;&quot;fold_hider&quot;&gt;&lt;div class&#x3D;&quot;close hider_title&quot;&gt;&#39; + text + &#39;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;fold&quot;&gt;\n&#39; + hexo.render.renderSync(&#123;text: content, engine: &#39;markdown&#39;&#125;) + &#39;\n&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">hexo.extend.tag.register(&#39;fold&#39;, fold, &#123;ends: true&#125;);</span><br></pre></td></tr></table></figure>

<p>【2】创建 blog\source\js\fold_action.js 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $(document).on(&#39;click&#39;, &#39;.fold_hider&#39;, function()&#123;</span><br><span class="line">        $(&#39;&gt;.fold&#39;, this.parentNode).slideToggle();</span><br><span class="line">        $(&#39;&gt;:first&#39;, this).toggleClass(&#39;open&#39;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F;默认情况下折叠</span><br><span class="line">    $(&quot;div.fold&quot;).css(&quot;display&quot;,&quot;none&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>【3】创建 blog\source_data\body-end.njk 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 代码压缩 #&#125;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;fold_action.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>【4】在 blog\source_data\style.styl 添加样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 代码折叠功能添加</span><br><span class="line">.hider_title&#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    color: #ef4a05;</span><br><span class="line">&#125;</span><br><span class="line">.close:before&#123;</span><br><span class="line">    content: &quot;▼&quot;;</span><br><span class="line">&#125;</span><br><span class="line">.open:before&#123;</span><br><span class="line">    content: &quot;▲&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div><div class="fold_hider"><div class="close hider_title">【5】使用</div></div><div class="fold">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% fold 点击显&#x2F;隐内容 %&#125;</span><br><span class="line">something you want to fold, include code block.</span><br><span class="line">&#123;% endfold %&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<hr>
<h3 id="简体-繁体切换"><a href="#简体-繁体切换" class="headerlink" title="简体/繁体切换"></a>简体/繁体切换</h3><p>【1】创建 blog\source\js\tw_cn.js 添加<a href="https://tding.top/js/tw_cn.js">这里</a>复制的代码</p>
<p>【2】创建 blog\source_data\footer.njk 添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;translate-style&quot;&gt;</span><br><span class="line">繁&#x2F;简：&lt;a id&#x3D;&quot;translateLink&quot; href&#x3D;&quot;javascript:translatePage();&quot;&gt;繁体</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;tw_cn.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var defaultEncoding &#x3D; 2; &#x2F;&#x2F;网站编写字体是否繁体，1-繁体，2-简体</span><br><span class="line">var translateDelay &#x3D; 0; &#x2F;&#x2F;延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span><br><span class="line">var cookieDomain &#x3D; &quot;https:&#x2F;&#x2F;tding.top&#x2F;&quot;; &#x2F;&#x2F;Cookie地址, 一定要设定, 通常为你的网址</span><br><span class="line">var msgToTraditionalChinese &#x3D; &quot;繁体&quot;; &#x2F;&#x2F;此处可以更改为你想要显示的文字</span><br><span class="line">var msgToSimplifiedChinese &#x3D; &quot;简体&quot;; &#x2F;&#x2F;同上，但两处均不建议更改</span><br><span class="line">var translateButtonId &#x3D; &quot;translateLink&quot;; &#x2F;&#x2F;默认互换id</span><br><span class="line">translateInitilization();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>主题设置 going……</tag>
      </tags>
  </entry>
  <entry>
    <title>Exception</title>
    <url>/2020/08/29/Exception/</url>
    <content><![CDATA[<h2 id="一、SpringMVC请求方式为PUT和DELETE时出现405：方法不允许（已解决）"><a href="#一、SpringMVC请求方式为PUT和DELETE时出现405：方法不允许（已解决）" class="headerlink" title="一、SpringMVC请求方式为PUT和DELETE时出现405：方法不允许（已解决）"></a>一、SpringMVC请求方式为PUT和DELETE时出现405：方法不允许（已解决）</h2><a id="more"></a>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>对于这个问题网上虽然提供了不少的解决方案，但是不够全面。其实对于 <strong>DELETE</strong> 和 <strong>PUT</strong> 早就不推荐使用了，就连 <strong>JSP</strong> 都很少使用了，所以你会发现在一些老的版本使用起来没有问题。</p>
</blockquote>
<h3 id="1、将-Tomcat-换至-7-0-以下版本"><a href="#1、将-Tomcat-换至-7-0-以下版本" class="headerlink" title="1、将 Tomcat 换至 7.0 以下版本"></a>1、将 Tomcat 换至 7.0 以下版本</h3><blockquote>
<p>待测试，目前版本为8.5</p>
</blockquote>
<h3 id="2、将转发改为重定向"><a href="#2、将转发改为重定向" class="headerlink" title="2、将转发改为重定向"></a>2、将转发改为重定向</h3><blockquote>
<p><code>return &quot;test&quot;;</code> 这种方式是转发，而 <strong>DELETE</strong> 和 <strong>PUT</strong> 是不支持转发的，<strong>只支持重定向</strong>，所以只需要将这行代码改为：<code>return &quot;redirect:/vews/test.jsp&quot;;</code> ，实际测试得到解决。</p>
</blockquote>
<h1 id="二、springMVC文件上传时出现500错误（内部服务器错误）：Current-request-is-not-a-multipart-request（70-）"><a href="#二、springMVC文件上传时出现500错误（内部服务器错误）：Current-request-is-not-a-multipart-request（70-）" class="headerlink" title="二、springMVC文件上传时出现500错误（内部服务器错误）：Current request is not a multipart request（70%）"></a>二、springMVC文件上传时出现500错误（内部服务器错误）：Current request is not a multipart request（70%）</h1><h3 id="1、网上解决办法都是在请求表单添加enctype-quot-multipart-form-data-quot-，但是我之前就已经有了，所以一直不行。"><a href="#1、网上解决办法都是在请求表单添加enctype-quot-multipart-form-data-quot-，但是我之前就已经有了，所以一直不行。" class="headerlink" title="1、网上解决办法都是在请求表单添加enctype=&quot;multipart/form-data&quot;，但是我之前就已经有了，所以一直不行。"></a>1、网上解决办法都是在请求表单添加<code>enctype=&quot;multipart/form-data&quot;</code>，但是我之前就已经有了，所以一直不行。</h3><h3 id="2、我的解决办法："><a href="#2、我的解决办法：" class="headerlink" title="2、我的解决办法："></a>2、我的解决办法：</h3><p>把springmvc.xml在wen.xml中的配置从默认地址改为自己自定义的地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  	&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">  	&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">  	&lt;!-- 拦截处理 --&gt;</span><br><span class="line">  	&lt;init-param&gt;</span><br><span class="line">  		&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">  		&lt;param-value&gt;classpath:springmvc.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">  	&lt;&#x2F;init-param&gt;</span><br><span class="line">  	&lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">  &lt;&#x2F;servlet&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>-java -Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记</title>
    <url>/2020/08/29/SpringMVC%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>f335fe81d0894ce1de0333d7b824dd61fde7b173</p>
<p>1680e0879157ecaa2d8af2251a39d42a</p>
<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><a id="more"></a>

<h2 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h2><blockquote>
<p>spring-aop.jar<br>spring-bean.jar<br>spring-context.jar<br>spring-core.jar<br>spring-web.jar</p>
<p>spring-webmvc.jar<br>commons-logging.jar</p>
</blockquote>
<h2 id="2、创建配置文件springmvc-xml-bean"><a href="#2、创建配置文件springmvc-xml-bean" class="headerlink" title="2、创建配置文件springmvc.xml(bean)"></a>2、创建配置文件<code>springmvc.xml</code>(bean)</h2><h1 id="二、程序配置"><a href="#二、程序配置" class="headerlink" title="二、程序配置"></a>二、程序配置</h1><h2 id="1、普通的servlet流程："><a href="#1、普通的servlet流程：" class="headerlink" title="1、普通的servlet流程："></a>1、普通的servlet流程：</h2><p>1.1、新建servlet文件</p>
<p>1.2、在<code>web.xml</code>中会请求-url-pattern -交给对应的servlet去处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line">    &lt;description&gt;&lt;&#x2F;description&gt;</span><br><span class="line">    &lt;display-name&gt;a&lt;&#x2F;display-name&gt;</span><br><span class="line">    &lt;servlet-name&gt;a&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;a.a&lt;&#x2F;servlet-class&gt;</span><br><span class="line">  &lt;&#x2F;servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;a&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;a&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>其中：<br><code>&lt;url-pattern&gt;.action&lt;/url-pattern&gt;</code></p>
<p>/:一切请求  ，注意不是 /*<br>/user:拦截以 /user开头的请求<br>/user/abc.do  :只拦截该请求<br>.action:只拦截 .action结尾的请求</p>
<h2 id="2、SpringMVC配置servlet（DispatcherServlet）"><a href="#2、SpringMVC配置servlet（DispatcherServlet）" class="headerlink" title="2、SpringMVC配置servlet（DispatcherServlet）"></a>2、SpringMVC配置servlet（<code>DispatcherServlet</code>）</h2><blockquote>
<p>前端发请求a-&gt; @RequestMappting(“a”)<br>处理请求中的参数xyz：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMappting(&quot;a&quot;) </span><br><span class="line">	public String  aa(@Xxx注解(&quot;xyz&quot;)  xyz)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">​	&#125;</span><br></pre></td></tr></table></figure>

<p>使用对象（实体类Student）接受请求参数</p>
</blockquote>
<p>2.1、在web.xml中进行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line"> 	&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line"> 	&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line"> 	&lt;!-- 拦截处理 --&gt;</span><br><span class="line"> 	&lt;init-param&gt;</span><br><span class="line"> 		&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line"> 		&lt;param-value&gt;classpath:springmvc.xml&lt;&#x2F;param-value&gt;</span><br><span class="line"> 	&lt;&#x2F;init-param&gt;</span><br><span class="line"> 	&lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line"> &lt;&#x2F;servlet&gt;</span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line"> 	&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line"> 	&lt;!-- &quot;&#x2F;&quot;表示拦截所有 --&gt;</span><br><span class="line"> 	&lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line"> &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>2.2、新建index.jsp文件<code>welcome</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;a href&#x3D;&quot;welcome&quot;&gt;springmvc&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>2.3、新建控制器文件（class）<code>通过@RequestMapping(&quot;welcome&quot;)拦截，return &quot;success&quot;</code></p>
<p>包名命名可遵从以下几种：</p>
<p>①cn.nap.handler</p>
<p>②cn.nap.servlet</p>
<p>③cn.nap.controller</p>
<p>④cn.nap.action</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class SpringMVCHandler &#123;</span><br><span class="line">	@RequestMapping(&quot;welcome&quot;)</span><br><span class="line">	public String welcome() &#123;</span><br><span class="line">		return &quot;success&quot;;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>PS</code>：①映射是 去匹配@RequestMapping注解，可以和方法名、类名不一致</p>
<p>②通过method指定请求方式（get  post  delete put）</p>
<p>③通过params属性指定必须有的参数，可以具体到某一个<br>params= {“name2=zs”,”age!=23”}</p>
<p>name2:必须有name=”name2”参数</p>
<p>age!=23 :    a.如果有name=”age”，则age值不能是23<br>         b.没有age<br>!name2  ：不能name=”name2”的属性</p>
<p>@RequestMapping(value=”welcome”,method=RequestMethod.POST,params={“name=zhao”,”age!=18”})//映射</p>
<p>2.4、在<code>springmvc.xml</code>中配置：``返回/views/success.jsp`</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 扫描器 --&gt;</span><br><span class="line">&lt;context:component-scan base-package&#x3D;&quot;package cn.nap.handler&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br><span class="line">&lt;!-- 配置视图解析器InternalResourceViewResolver --&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">	&lt;!-- 配置跳转文件 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;views&#x2F;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p><code>PS：</code>springmvc.xml默认位置在WEB-INF下，默认名字为：servlet-name的值-servlet.xml，例如springDispatcherServlet-servlet.xml，当为默认值时，在web.xml 中可以不用配置</p>
<p>2.5、创建/views/success.jsp文件<code>目标文件</code></p>
<h2 id="3、项目中同时兼容-springMVC和Servlet"><a href="#3、项目中同时兼容-springMVC和Servlet" class="headerlink" title="3、项目中同时兼容 springMVC和Servlet"></a>3、项目中同时兼容 springMVC和Servlet</h2><p>3.1、在<code>web.xml</code>配置：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  	&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">  	&lt;url-pattern&gt;.action&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>3.2、使用时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;a href&#x3D;&quot;welcome.action&quot;&gt;springmvc&lt;&#x2F;a&gt; &#x2F;&#x2F;由SpringMVC处理，@RequestMapping映射</span><br><span class="line">	&lt;a href&#x3D;&quot;welcome&quot;&gt;springmvc&lt;&#x2F;a&gt; &#x2F;&#x2F;由servlet处理，找url-parttern&#x2F;@WebServlet()</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4、补充"><a href="#4、补充" class="headerlink" title="4、补充"></a>4、补充</h2><p>4.1、 ant风格的请求路径<br>?   单字符</p>
<p>  *任意个字符（0或多个）<br>** 任意目录</p>
<p>4.2、通过@PathVariable获取动态参数</p>
<p>①请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;welcome&#x2F;zhao&quot;&gt;springmvc&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>②匹配@RequestMapping</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;welcome&#x2F;&#123;name&#125;&quot;)</span><br><span class="line">	public String welcome(@PathVariable(&quot;name&quot;) String name) &#123;</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>4.3、REST风格 ：软件编程风格</p>
<p>①Springmvc:  GET（查），POST（增），DELETE （删），PUT （改）；<br>普通浏览器只支持get post方式 ；其他请求方式 如 delelte|put请求是通过过滤器新加入的支持。</p>
<p>②在web.xml配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 增加HiddenHttpMethodFilte过滤器：目的是给普通浏览器 增加 put|delete请求方式 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">  	&lt;filter-name&gt;HiddenHttpMethodFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">  	&lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">  &lt;&#x2F;filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">  	&lt;filter-name&gt;HiddenHttpMethodFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">  	&lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>③在请求中添加：<code>&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;&quot;&gt;</code>,通过设置隐藏域的Value值设置成put和delete</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;testPut&#x2F;123&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;_method&quot; value&#x3D;&quot;PUT&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;put&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;testDelete&#x2F;123&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;_method&quot; value&#x3D;&quot;DELETE&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;delete&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>④指定请求方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   @RequestMapping(value&#x3D;&quot;testPut&#x2F;&#123;id&#125;&quot;,method &#x3D; RequestMethod.PUT)</span><br><span class="line">       public String testPut(@PathVariable(&quot;id&quot;) Integer id) &#123;</span><br><span class="line">           System.out.println(&quot;put&quot;+id);</span><br><span class="line">           return &quot;welcome&quot;;</span><br><span class="line">       &#125; </span><br><span class="line">@RequestMapping(value&#x3D;&quot;testDelete&#x2F;&#123;id&#125;&quot;,method &#x3D; RequestMethod.DELETE)</span><br><span class="line">public String testDelete(@PathVariable(&quot;id&quot;) Integer id) &#123;</span><br><span class="line">	System.out.println(&quot;delete&quot;+id);</span><br><span class="line">	return &quot;welcome&quot;;</span><br></pre></td></tr></table></figure>

<p>⑤此外，可以发现 ，当映射名相同时@RequestMapping(value=”testRest”)，可以通过method处理不同的请求。</p>
<p>⑥普通方式传值：等价于request.getParameter(“uname”)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testParam&quot;)</span><br><span class="line">	public String testParam(@RequestParam(&quot;uname&quot;) String name,@RequestParam(value &#x3D; &quot;uage&quot;,required &#x3D; false,defaultValue &#x3D; &quot;20&quot;) String age) &#123;</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		System.out.println(age);</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>4.4、获取请求头信息 @RequestHeader</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testRequestHeader&quot;)</span><br><span class="line">	public String testRequestHeader(@RequestHeader(&quot;Accept-Language&quot;) String al) &#123;</span><br><span class="line">		System.out.println(al);</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>4.5、通过mvc获取cookie值（JSESSIONID）<br>@CookieValue<br>(前置知识： 服务端在接受客户端第一次请求时，会给该客户端分配一个session （该session包含一个sessionId）),并且服务端会在第一次响应客户端时 ，请该sessionId赋值给JSESSIONID 并传递给客户端的cookie中</p>
<p>4.6、使用对象（实体类Student）接受请求参数（保持一致；支持级联）</p>
<p>①请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;testStudent&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">		id:&lt;input name&#x3D;&quot;id&quot;&gt;&lt;br&gt;</span><br><span class="line">		name:&lt;input name&#x3D;&quot;name&quot;&gt;&lt;br&gt;</span><br><span class="line">		address.homeAddress:&lt;input name&#x3D;&quot;address.homeAddress&quot;&gt;&lt;br&gt;</span><br><span class="line">		address.schoolAddress:&lt;input name&#x3D;&quot;address.schoolAddress&quot;&gt;&lt;br&gt;</span><br><span class="line">		&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;student&quot;&gt;</span><br><span class="line">	&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>②接受请求参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testStudent&quot;)</span><br><span class="line">	public String testStudent(Student student) &#123;</span><br><span class="line">		System.out.println(student.getId()+student.getName()+student.getAddress().getHomeAddress()+student.getAddress().getSchoolAddress());</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>4.7、在SpringMVC中使用原生态的Servlet API</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testSerletAPI&quot;)</span><br><span class="line">public String testSerletAPI(HttpServletRequest request,HttpServletResponse response) &#123;</span><br><span class="line">	&#x2F;&#x2F;request.getParameter(&quot;uname&quot;);</span><br><span class="line">	System.out.println(request);</span><br><span class="line">	return &quot;welcome&quot;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h1 id="三、处理模型数据"><a href="#三、处理模型数据" class="headerlink" title="三、处理模型数据"></a>三、处理模型数据</h1><h2 id="1、将数据存入request作用域（4种方式）"><a href="#1、将数据存入request作用域（4种方式）" class="headerlink" title="1、将数据存入request作用域（4种方式）"></a>1、将数据存入<code>request作用域</code>（4种方式）</h2><p>1.1、将数据存入<code>request作用域</code>（4种方式）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testModelAndView&quot;)</span><br><span class="line">public ModelAndView testModelAndView() &#123;</span><br><span class="line">	ModelAndView mv&#x3D;new ModelAndView(&quot;welcome&quot;);&#x2F;&#x2F;view目标文件：&#x2F;views&#x2F;welcome.xml</span><br><span class="line">	</span><br><span class="line">	Student student&#x3D;new Student();</span><br><span class="line">	student.setId(1);</span><br><span class="line">	student.setName(&quot;zhao&quot;);</span><br><span class="line">	</span><br><span class="line">	mv.addObject(&quot;student&quot;, student);&#x2F;&#x2F;相当于request.setAttribute(&quot;student&quot;, student);</span><br><span class="line">	return mv;</span><br><span class="line">&#125; </span><br><span class="line">@RequestMapping(value&#x3D;&quot;testModelAndViewMap&quot;)</span><br><span class="line">public String testModelAndViewMap(Map&lt;String,Object&gt; m) &#123;</span><br><span class="line">	</span><br><span class="line">	Student student1&#x3D;new Student();</span><br><span class="line">	student1.setId(1);</span><br><span class="line">	student1.setName(&quot;zhao&quot;);</span><br><span class="line">	m.put(&quot;student1&quot;, student1);</span><br><span class="line">	return &quot;welcome&quot;;</span><br><span class="line">&#125; </span><br><span class="line">@RequestMapping(value&#x3D;&quot;testModelAndViewModel&quot;)</span><br><span class="line">public String testModelAndViewModel(Model model) &#123;</span><br><span class="line">	</span><br><span class="line">	Student student2&#x3D;new Student();</span><br><span class="line">	student2.setId(1);</span><br><span class="line">	student2.setName(&quot;zhao&quot;);</span><br><span class="line">	</span><br><span class="line">	model.addAttribute(&quot;student2&quot;, student2);</span><br><span class="line">	return &quot;welcome&quot;;</span><br><span class="line">&#125; </span><br><span class="line">@RequestMapping(value&#x3D;&quot;testModelAndViewModelMap&quot;)</span><br><span class="line">public String testModelAndViewModelMap(ModelMap mm) &#123;</span><br><span class="line">	</span><br><span class="line">	Student student3&#x3D;new Student();</span><br><span class="line">	student3.setId(1);</span><br><span class="line">	student3.setName(&quot;zhao&quot;);</span><br><span class="line">	</span><br><span class="line">	mm.addAttribute(&quot;student3&quot;, student3);</span><br><span class="line">	return &quot;welcome&quot;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>1.2、在目标文件中获取M</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	Welcome to SpringMVC&lt;br&gt;</span><br><span class="line">	$&#123;requestScope.student.id&#125;-$&#123;requestScope.student.name&#125;</span><br><span class="line">	$&#123;requestScope.student.id&#125;-$&#123;requestScope.student.name&#125;</span><br><span class="line">	$&#123;requestScope.student1.id&#125;-$&#123;requestScope.student1.name&#125;</span><br><span class="line">	$&#123;requestScope.student2.id&#125;-$&#123;requestScope.student2.name&#125;</span><br><span class="line">	$&#123;requestScope.student3.id&#125;-$&#123;requestScope.student3.name&#125;</span><br><span class="line">&lt;&#x2F;body&gt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2、数据放入session中-SessionAttributes"><a href="#2、数据放入session中-SessionAttributes" class="headerlink" title="2、数据放入session中@SessionAttributes(..)"></a>2、数据放入session中<code>@SessionAttributes(..)</code></h2><p>2.1、value属性和type属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SessionAttributes(value&#x3D;&quot;student3&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SessionAttributes(type&#x3D;&#123;Student.class,Address.class&#125;)</span><br></pre></td></tr></table></figure>

<p>2.2、目标文件：sessionScope</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	$&#123;sessionScope.student.id&#125;-$&#123;sessionScope.student.name&#125;</span><br><span class="line">	$&#123;sessionScope.student.id&#125;-$&#123;sessionScope.student.name&#125;</span><br><span class="line">	$&#123;sessionScope.student1.id&#125;-$&#123;sessionScope.student1.name&#125;</span><br><span class="line">	$&#123;sessionScope.student2.id&#125;-$&#123;sessionScope.student2.name&#125;</span><br><span class="line">	$&#123;sessionScope.student3.id&#125;-$&#123;sessionScope.student3.name&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3、更新数据-ModelAttribute"><a href="#3、更新数据-ModelAttribute" class="headerlink" title="3、更新数据@ModelAttribute "></a>3、更新数据<code>@ModelAttribute </code></h2><p>3.1、通过@ModelAttribute修饰的方法 ，会在每次请求前先执行；并且该方法的参数map.put()可以将 对象 放入 即将查询的参数中；<br>3.2、必须满足的约定：<br>①map.put(k,v) 其中的k 必须是即将查询的方法参数 的首字母小写。testModelAttribute(Student xxx)  ，即student；<br>②如果不一致，需要通过@ModelAttribute声明。如下：</p>
<pre><code>    @ModelAttribute//在任何一次请求前，都会先执行@ModelAttribute修饰的方法
    public void queryStudentById(Map&lt;String,Object&gt; map) &#123;
        //StuentService stuService = new StudentServiceImpl();
        //Student student = stuService.queryStudentById(31);
        //模拟调用三层查询数据库的操作
        Student student = new Student();
        student.setId(31);
        student.setName(&quot;zs&quot;);
        student.setAge(23);
        map.put(&quot;stu&quot;, student) ;//约定：map的key 就是方法参数 类型的首字母小写
    &#125;
    @RequestMapping(value=&quot;testModelAttribute&quot;)
    public String testModelAttribute(@ModelAttribute(&quot;stu&quot;)Student student) &#123;
        student.setName(student.getName());//将名字修改为ls
        System.out.println(student.getId()+&quot;,&quot;+student.getName()+&quot;,&quot;+student.getAge());
        return &quot;success&quot;;
    &#125;</code></pre>
<p>3.3、一个Servlet 对应一个功能：增删改查  对应于 4个Servlet</p>
<p>更新：    Servlet  - SpringMVC的Controller</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询</span><br><span class="line">@ModelAttribute</span><br><span class="line">public void query()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">修改</span><br><span class="line">public String update()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@ModelAttribute会在 该类的每个方法执行前 均被执行一次，因为使用时需要注意。</p>
<h1 id="四、视图解析器：ViewResolver"><a href="#四、视图解析器：ViewResolver" class="headerlink" title="四、视图解析器：ViewResolver"></a>四、视图解析器：ViewResolver</h1><h2 id="1、常见的视图解析器"><a href="#1、常见的视图解析器" class="headerlink" title="1、常见的视图解析器"></a>1、常见的视图解析器</h2><p>1.1、</p>
<table>
<thead>
<tr>
<th>URL视图资源图</th>
<th>① <strong>InternalResourceView</strong>  <br />②JstlView <br />springMVC解析jsp时 会默认使用InternalResourceView，如果发现Jsp中包含了jstl语言相关的内容，则自动转为JstlView。</th>
<th>① 将JSP或其他资源封装成一个视图。被视图解析器InternalResourceViewResolver默认使用。 <br /> ②InternalResourceView的子类。  如果JSP中使用了JSTL的国际化标签，就需要使用该视图类。</th>
</tr>
</thead>
<tbody><tr>
<td>文档视图</td>
<td>①AbstractExcelView  <br />②AbstractPdfView</td>
<td>①Excel文档视图的抽象类。<br /> ②PDF文档视图的抽象类</td>
</tr>
<tr>
<td>报表视图</td>
<td>①ConfigurableJasperReportsView<br />②JasperReportsHtmlView  <br />③JasperReportsPdfView  <br />④JasperReportsXlsView</td>
<td>常用的JasperReports报表视图</td>
</tr>
<tr>
<td>JSON视图</td>
<td>MappingJackson2JsonView</td>
<td>将数据通过Jackson框架的ObjectMapper对象，以JSON方式输出</td>
</tr>
</tbody></table>
<h2 id="2、JstlView-可以解析jstl-实现国际化操作"><a href="#2、JstlView-可以解析jstl-实现国际化操作" class="headerlink" title="2、JstlView 可以解析jstl\实现国际化操作"></a>2、JstlView 可以解析jstl\实现国际化操作</h2><p>2.1创建资源文件,常见的命名：</p>
<table>
<thead>
<tr>
<th>资源文件名</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>基_en.properties</td>
<td>所有英文语言的资源</td>
</tr>
<tr>
<td>基名_en_US.properties</td>
<td>针对美国地区、英文语言的资源</td>
</tr>
<tr>
<td>基名_zh.properties</td>
<td>所有的中文语言的资源</td>
</tr>
<tr>
<td>基名_zh_CN.properties</td>
<td>针对中国大陆的、中文语言的资源</td>
</tr>
<tr>
<td>基名_zh_HK.properties</td>
<td>针对中国香港的、中文语言的资源</td>
</tr>
<tr>
<td>基名.properties</td>
<td>默认资源文件。如果请求相应语言的资源文件不存在，将使用此资源文件。例如，若是中国大陆地区用户，应该访问“基名_zh_CN.properties”，而如果不存在此文件，就会去访问默认的“基名.properties”。</td>
</tr>
</tbody></table>
<p>2.2配置springmvc.xml，加载资源文件</p>
<pre><code>&lt;!-- 加载国际化资源文件 --&gt;
&lt;bean id=&quot;messageSource&quot; class=&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;&gt;
&lt;property name=&quot;basename&quot; value=&quot;i18n&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre>
<p>ResourceBundleMessageSource会在springmvc响应程序时 介入（解析国际化资源文件）</p>
<p>2.3通过jstl使用国际化</p>
<blockquote>
<p>jstl.jar </p>
<p>standar.jar</p>
</blockquote>
<p>2.4约定：</p>
<p>springmvc在启动时，会自动查找一个id=”messageSource”的bean，如果有  则自动加载</p>
<h2 id="3、InternalResourceViewResolver其他功能"><a href="#3、InternalResourceViewResolver其他功能" class="headerlink" title="3、InternalResourceViewResolver其他功能"></a>3、InternalResourceViewResolver其他功能</h2><p>3.1、替代@RequsetMapping(“a”)</p>
<p>①创建一个请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;testResourceViewResolver&quot;&gt;testResourceViewResolver&lt;&#x2F;a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<p>②在springmvc.xml中配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;testResourceViewResolver&quot;&gt;testResourceViewResolver&lt;&#x2F;a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<p>③以上注解 ，会让所有的请求 转入<a href="mvc:..">mvc:..</a>中匹配映射地址，而会忽略调@RequsetMapping()；<br>如果想让 @RequsetMapping(“a”)  和<a href="mvc:..">mvc:..</a>共存，则需要加入一个注解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

<p>3.2、指定请求方式</p>
<p>①指定跳转方式：return “forward:/views/success.jsp”;    </p>
<p>②forward:   redirect: ，需要注意此种方式，不会被视图解析器加上前缀(/views)、后缀(.jsp)</p>
<p>3.3、处理静态资源：html、css、js、图片、视频</p>
<p>①在SpringMVC中，如果直接访问静态资源：404 。原因：之前将所有的请求 通过通配符“、” 拦截，进而交给 SPringMVC的入口DispatcherServlet去处理：找该请求映射对应的 @requestMapping</p>
<p>②解决：如果是 需要mvc处理的，则交给@RequsetMapping(“img.png”)处理；如果不需要springmvc处理，则使用 tomcat默认的Servlet去处理。<br>③tomcat默认的Servlet（在tomcat配置文件\conf\web.xml）去处理：如果有对应的请求拦截,则交给相应的Servlet去处理；如果没有对应的servlet，则直接访问。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line">&lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>④实现方法：在springmvc.xml增加2个注解即可 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mvc:default-servlet-handler&gt;&lt;&#x2F;mvc:default-servlet-handler&gt;</span><br><span class="line">&lt;mvc:annotation-driven&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

<p>3.4、类型转换</p>
<p>①Spring自带一些 常见的类型转换器：<br>public String  testDelete(@PathVariable(“id”) String id) ，即可以接受int类型数据id  也可以接受String类型的id</p>
<p>②自定义类型转换器</p>
<p>步骤一：编写 自定义类型转器的类 （实现Converter接口）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyConverter implements Converter&lt;String,Student&gt;&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Student convert(String source) &#123;</span><br><span class="line">		String[] studentArr&#x3D;source.split(&quot;-&quot;);</span><br><span class="line">		Student student&#x3D;new Student();</span><br><span class="line">		student.setId(Integer.parseInt(studentArr[0]));</span><br><span class="line">		student.setName(studentArr[1]);</span><br><span class="line">		return student;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤二：配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 1将 自定义转换器 纳入SpringIOC容器 --&gt;</span><br><span class="line">	&lt;bean  id&#x3D;&quot;myConverter&quot; class&#x3D;&quot;cn.nap.converter.MyConverter&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- 2将myConverter再纳入 SpringMVC提供的转换器Bean --&gt;</span><br><span class="line">	&lt;bean id&#x3D;&quot;conversionService&quot;  class&#x3D;&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;converters&quot;&gt;</span><br><span class="line">			&lt;set&gt;</span><br><span class="line">				&lt;ref bean&#x3D;&quot;myConverter&quot;&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;set&gt;</span><br><span class="line">		&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- 3将conversionService注册到annotation-driven中 --&gt;</span><br><span class="line">	&lt;!--此配置是SpringMVC的基础配置，很功能都需要通过该注解来协调  --&gt;</span><br><span class="line">	&lt;mvc:annotation-driven conversion-service&#x3D;&quot;conversionService&quot;&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

<p>③使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testConverter&quot;)</span><br><span class="line">	public String testConverter(@RequestParam(&quot;studentInfo&quot;) Student student) &#123;</span><br><span class="line">		System.out.println(student.getId()+&quot;,&quot;+student.getName());</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>其中@RequestParam(“studentInfo”)是触发转换器的桥梁</p>
<p>3.5、数据格式化：SPringMVC提供了很多注解，方便我们数据格式化</p>
<p>①配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置 数据格式化 注解 所依赖的bean --&gt;</span><br><span class="line">	&lt;bean id&#x3D;&quot;conversionService1&quot; class&#x3D;&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p>②注解：在实体类的属性前</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@DateTimeFormat(pattern&#x3D;&quot;yyyy-MM-dd&quot;)</span><br><span class="line">@NumberFormat(pattern&#x3D;&quot;###,#&quot;)  </span><br></pre></td></tr></table></figure>

<p>③打印错误信息：BindingResult result（约定：放在需要校验的参数之后）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testDateTimeFormat&quot;)</span><br><span class="line">	public String testDateTimeFormat(Student student,BindingResult result) &#123;</span><br><span class="line">		System.out.println(student.getId()+&quot;,&quot;+student.getName());</span><br><span class="line">		if(result.getErrorCount()&gt;0) &#123;</span><br><span class="line">			for(FieldError error:result.getFieldErrors()) &#123;</span><br><span class="line">				System.out.println(error.getDefaultMessage());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<h1 id="五、数据检验JSR303、Hibernate-Validator"><a href="#五、数据检验JSR303、Hibernate-Validator" class="headerlink" title="五、数据检验JSR303、Hibernate Validator"></a>五、数据检验JSR303、Hibernate Validator</h1><h2 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h2><blockquote>
<p>hibernate-validator-5.0.0.CR2.jar     </p>
<p>classmate-0.8.0.jar     </p>
<p>jboss-logging-3.1.1.GA.jar</p>
<p>validation-api-1.1.0.CR1.jar     </p>
<p>hibernate-validator-annotation-processor-5.0.0.CR2.jar</p>
</blockquote>
<h2 id="2、配置：实现接口ValidatorFactory"><a href="#2、配置：实现接口ValidatorFactory" class="headerlink" title="2、配置：实现接口ValidatorFactory"></a>2、配置：实现接口ValidatorFactory</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven &gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

<p>此时mvc:annotation-driven的作用：要实现Hibernate Validator/JSR303 校验（或者其他各种校验），必须实现SpringMVC提供的一个接口：ValidatorFactory</p>
<p>LocalValidatorFactoryBean是ValidatorFactory的一个实现类。<br><code>&lt;mvc:annotation-driven &gt;&lt;/mvc:annotation-driven&gt;</code>会在springmvc容器中 自动加载一个LocalValidatorFactoryBean类，因此可以直接实现数据校验。</p>
<h2 id="3、注释使用"><a href="#3、注释使用" class="headerlink" title="3、注释使用"></a>3、注释使用</h2><p>3.1、JSR303注解</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>@Null</td>
<td>被注释的元素必须为 null。</td>
</tr>
<tr>
<td>@NotNull</td>
<td>被注释的元素必须不为 null。</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>被注释的元素必须为 true。</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>被注释的元素必须为 false。</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>被注释的元素必须是一个数字，其值必须大于或等于value。</td>
</tr>
<tr>
<td>@Max(value)</td>
<td>被注释的元素必须是一个数字，其值必须小于或等于value。</td>
</tr>
<tr>
<td>@DecimalMin(value)</td>
<td>被注释的元素必须是一个数字，其值必须大于或等于value。</td>
</tr>
<tr>
<td>@DecimalMax(value)</td>
<td>被注释的元素必须是一个数字，其值必须小于或等于value。</td>
</tr>
<tr>
<td>@Size(max,  min)</td>
<td>被注释的元素的取值范围必须是介于min和max之间。</td>
</tr>
<tr>
<td>@Digits  (integer, fraction)</td>
<td>被注释的元素必须是一个数字，其值必须在可接受的范围内。</td>
</tr>
<tr>
<td>@Past</td>
<td>被注释的元素必须是一个过去的日期。</td>
</tr>
<tr>
<td>@Future</td>
<td>被注释的元素必须是一个将来的日期。</td>
</tr>
<tr>
<td>@Pattern(value)</td>
<td>被注释的元素必须符合指定的正则表达式。</td>
</tr>
</tbody></table>
<p>3.2、Hibernate Validator中增加的注释：</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>@Email</td>
<td>被注释的元素值必须是合法的电子邮箱地址。</td>
</tr>
<tr>
<td>@Length</td>
<td>被注释的字符串的长度必须在指定的范围内。</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>被注释的字符串的必须非空。</td>
</tr>
<tr>
<td>@Range</td>
<td>被注释的元素必须在合适的范围内。</td>
</tr>
</tbody></table>
<p>3.3、直接使用注解</p>
<p>①public class Student {</p>
<pre><code>@Past//当前时间以前
private Date birthday ;</code></pre>
<p>}</p>
<p>②在校验的Controller中 ，给校验的对象前增加 @Valid</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public String testDateTimeFormat(@Valid Student student, BindingResult result ,Map&lt;String,Object&gt; map) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="六、Ajax请求SpringMVC，并且JSON格式的数据"><a href="#六、Ajax请求SpringMVC，并且JSON格式的数据" class="headerlink" title="六、Ajax请求SpringMVC，并且JSON格式的数据"></a>六、Ajax请求SpringMVC，并且JSON格式的数据</h1><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2><h1 id="七、文件上传"><a href="#七、文件上传" class="headerlink" title="七、文件上传"></a>七、文件上传</h1><h2 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h2><p>1.1、SpringMVC实现文件上传和Servlet方式的本质一样，都是通过commons-fileupload.jar和commons-io.jar<br>1.2、SpringMVC可以简化文件上传的代码，但是必须满足条件：实现MultipartResolver接口 ；而该接口的实现类SpringMVC也已经提供了CommonsMultipartResolver</p>
<h2 id="2、导包"><a href="#2、导包" class="headerlink" title="2、导包"></a>2、导包</h2><blockquote>
<p>commons-fileupload.jar</p>
<p>commons-io.jar</p>
</blockquote>
<h2 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h2><p>3.1、springmvc.xml</p>
<pre><code>&lt;!-- 配置CommonsMultipartResolver用于文件上传
    其中id值固定为multipartResolver，
    sprigIOC在初始化时，会自动寻找id=multipartResolver的bean，并将其加入容器
 --&gt;
&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;
    &lt;property name=&quot;maxUploadSize&quot; value=&quot;10240000&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre>
<p>3.2、请求：</p>
<pre><code>&lt;form action=&quot;testFileUpLoad&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
    &lt;input name=&quot;file&quot; type=&quot;file&quot;&gt;&lt;br&gt;
    描述：&lt;input name=&quot;desc&quot; type=&quot;text&quot;&gt;&lt;br&gt;
    &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;
&lt;/form&gt;</code></pre>
<p>3.3、控制器实现：</p>
<pre><code>@RequestMapping(value=&quot;testFileUpLoad&quot;)
public String testFileUpLoad(@RequestParam(&quot;desc&quot;) String desc,@RequestParam(&quot;file&quot;) MultipartFile file) throws IOException &#123;
    System.out.println(desc);
    //将文件保存到服务器
    InputStream input = file.getInputStream();
    String fileName=file.getOriginalFilename();
    OutputStream out=new FileOutputStream(&quot;d:\\&quot;+fileName);
    byte[] bs=new byte[1024];
    int len=-1;
    while((len=input.read(bs))!=-1) &#123;
        out.write(bs, 0, len);
    &#125;
    out.close();
    input.close();
    return &quot;welcome&quot;;
&#125; </code></pre>
<h1 id="八、拦截器"><a href="#八、拦截器" class="headerlink" title="八、拦截器"></a>八、拦截器</h1><h2 id="1、实现一个接口HandlerInterceptor"><a href="#1、实现一个接口HandlerInterceptor" class="headerlink" title="1、实现一个接口HandlerInterceptor"></a>1、实现一个接口HandlerInterceptor</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Myinterceptor implements HandlerInterceptor&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		System.out.println(&quot;拦截请求&quot;);</span><br><span class="line">		return true;&#x2F;&#x2F;true:拦截之后放行；false:不放行</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,</span><br><span class="line">			ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">		System.out.println(&quot;拦截响应&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		System.out.println(&quot;视图（jsp）渲染完毕被调用&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2、配置到spring-xml中"><a href="#2、配置到spring-xml中" class="headerlink" title="2、配置到spring.xml中"></a>2、配置到spring.xml中</h2><pre><code>&lt;!-- 默认拦截全部 --&gt;
&lt;mvc:interceptors&gt;
    &lt;!-- 配置具体拦截的路径 --&gt;
    &lt;mvc:interceptor&gt;
        &lt;!-- 指定具体拦截的路径 ，ant风格--&gt;
        &lt;mvc:mapping path=&quot;/**&quot;/&gt;
        &lt;!-- 指定具体不拦截的路径 --&gt;
        &lt;mvc:exclude-mapping path=&quot;testConverter&quot;/&gt;
        &lt;bean class=&quot;cn.nap.interceptor.Myinterceptor&quot;&gt;&lt;/bean&gt;
    &lt;/mvc:interceptor&gt;
&lt;/mvc:interceptors&gt;</code></pre>
<h1 id="九、异常处理"><a href="#九、异常处理" class="headerlink" title="九、异常处理"></a>九、异常处理</h1><h2 id="1、HandlerExceptionResolver接口"><a href="#1、HandlerExceptionResolver接口" class="headerlink" title="1、HandlerExceptionResolver接口"></a>1、HandlerExceptionResolver接口</h2><h3 id="1-1、通过注解-ExceptionHandler（只能捕获当前类：catch）"><a href="#1-1、通过注解-ExceptionHandler（只能捕获当前类：catch）" class="headerlink" title="1.1、通过注解@ExceptionHandler（只能捕获当前类：catch）"></a>1.1、通过注解@ExceptionHandler（只能捕获当前类：catch）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;testException&quot;)</span><br><span class="line">public class secondSpringMVCHandler &#123;</span><br><span class="line">	@RequestMapping(&quot;testExceptionHandler&quot;)</span><br><span class="line">	public String  testExceptionHandler() &#123;</span><br><span class="line">		System.out.println(1&#x2F;0);</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	@RequestMapping(&quot;testExceptionHandler1&quot;)</span><br><span class="line">	public String  testExceptionHandler1() &#123;</span><br><span class="line">		int[] num&#x3D;new int[2];</span><br><span class="line">		System.out.println(num[2]);</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@ExceptionHandler(&#123;ArithmeticException.class,ArrayIndexOutOfBoundsException.class&#125;)</span><br><span class="line">	public ModelAndView  handlerArithmeticException(Exception e) &#123;</span><br><span class="line">		ModelAndView mv&#x3D;new ModelAndView(&quot;exception&quot;);</span><br><span class="line">		System.out.println(e+&quot;,&quot;);</span><br><span class="line">		mv.addObject(&quot;e&quot;,e);</span><br><span class="line">&#x2F;&#x2F;		map.put(&quot;e&quot;, e);&#x2F;&#x2F;使用map显示会报错</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.1.1@ExceptionHandler标识的方法的参数为异常类型(Throwable或其子类) ，如果要在把异常信息放入作用域用于显示，可以用Model对象（此外还可以使用ModelAndView）不能包含其他类型的参数（Map、ModelMap,否则会报500）</p>
<p><img src="https://gitee.com/devilnaps/picbed/raw/master/img/20200830120723.png"></p>
<p>1.1.2、异常处理路径：最短优先</p>
<h3 id="1-2、-ControllerAdvice（专门放置异常处理的类）"><a href="#1-2、-ControllerAdvice（专门放置异常处理的类）" class="headerlink" title="1.2、@ControllerAdvice（专门放置异常处理的类）"></a>1.2、@ControllerAdvice（专门放置异常处理的类）</h3><p>@ExceptionHandler默认只能捕获当前类中的异常方法。如果发生异常的方法和处理异常的方法不在同一个类中，使用@ControllerAdvice</p>
<blockquote>
<p>①如果一个方法用于处理异常，并且只处理当前类中的异常：@ExceptionHandler</p>
<p>②如果一个方法用于处理异常，并且处理所有类中的异常： 类前加@ControllerAdvice、 处理异常的方法前加@ExceptionHandler</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class MyExceptionHandler &#123;</span><br><span class="line">	@ExceptionHandler(&#123;ArithmeticException.class,ArrayIndexOutOfBoundsException.class&#125;)</span><br><span class="line">	public ModelAndView  handlerArithmeticException(Exception e,Model mm) &#123;</span><br><span class="line">		ModelAndView mv&#x3D;new ModelAndView(&quot;exception&quot;);</span><br><span class="line">		System.out.println(e+&quot;,&quot;);</span><br><span class="line">		mm.addAttribute(&quot;e&quot;, e);</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、ResponseStatusExceptionResolver：自定义异常显示页面"><a href="#2、ResponseStatusExceptionResolver：自定义异常显示页面" class="headerlink" title="2、ResponseStatusExceptionResolver：自定义异常显示页面"></a>2、ResponseStatusExceptionResolver：自定义异常显示页面</h2><h3 id="2-1-ResponseStatus"><a href="#2-1-ResponseStatus" class="headerlink" title="2.1@ResponseStatus"></a>2.1@ResponseStatus</h3><p>2.1.1、单独创建异常类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ResponseStatus(value &#x3D; HttpStatus.FORBIDDEN,reason &#x3D; &quot;数组越界&quot;)</span><br><span class="line">public class MyArrayIndexOutOfBoundsException extends Exception&#123;&#x2F;&#x2F;自定义异常</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testException&quot;)</span><br><span class="line">	public String testException(@RequestParam(&quot;i&quot;) Integer i) throws Exception &#123;</span><br><span class="line">		if(i&#x3D;&#x3D;5) &#123;</span><br><span class="line">			throw new MyArrayIndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<p>2.1.2、可以放在方法前面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;testException&quot;)</span><br><span class="line">	public String testException(@RequestParam(&quot;i&quot;) Integer i)&#123;</span><br><span class="line">		if(i&#x3D;&#x3D;5) &#123;</span><br><span class="line">			return &quot;redirect:testException1&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br><span class="line">	@ResponseStatus(value &#x3D; HttpStatus.TOO_MANY_REQUESTS,reason &#x3D; &quot;异常加在方法前&quot;)</span><br><span class="line">	@RequestMapping(value&#x3D;&quot;testException1&quot;)</span><br><span class="line">	public String testException1() &#123;</span><br><span class="line">		return &quot;welcome&quot;;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>

<h2 id="3、异常处理的实现类"><a href="#3、异常处理的实现类" class="headerlink" title="3、异常处理的实现类"></a>3、异常处理的实现类</h2><p>DefaultHandlerExceptionResolver:SPringMVC在一些常见异常的基础上（300 500  405），新增了一些异常，例如：</p>
<ul>
<li>@see org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler<ul>
<li>@see #handleNoSuchRequestHandlingMethod</li>
<li>@see #handleHttpRequestMethodNotSupported  ：如果springmvc的处理方法限制为post方式，如果实际请求为get,则会触发此异常显示的页面</li>
<li>@see #handleHttpMediaTypeNotSupported</li>
<li>@see #handleMissingServletRequestParameter</li>
<li>@see #handleServletRequestBindingException</li>
<li>@see #handleTypeMismatch</li>
<li>@see #handleHttpMessageNotReadable</li>
<li>@see #handleHttpMessageNotWritable</li>
<li>@see #handleMethodArgumentNotValidException</li>
<li>@see #handleMissingServletRequestParameter</li>
<li>@see #handleMissingServletRequestPartException</li>
<li>@see #handleBindException</li>
</ul>
</li>
</ul>
<h2 id="4、通过配置来实现异常的处理"><a href="#4、通过配置来实现异常的处理" class="headerlink" title="4、通过配置来实现异常的处理"></a>4、通过配置来实现异常的处理</h2><p>SimpleMappingExceptionResolver</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean  class&#x3D;&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;</span><br><span class="line">		&lt;!-- 如果发生异常，异常对象会被保存在  exceptionAttribute的value值中；并且会放入request域中 ；异常变量的默认值是 exception--&gt;</span><br><span class="line">		&lt;!--&lt;property name&#x3D;&quot;exceptionAttribute&quot; value&#x3D;&quot;exception&quot;&gt;&lt;&#x2F;property&gt;--&gt;</span><br><span class="line">			&lt;property name&#x3D;&quot;exceptionMappings&quot;&gt;</span><br><span class="line">					&lt;props&gt;</span><br><span class="line">						&lt;!-- 相当于catch(ArithmeticException ex)&#123; 跳转：error &#125; --&gt;</span><br><span class="line">						&lt;prop key&#x3D;&quot;java.lang.ArithmeticException&quot;&gt;</span><br><span class="line">							exception</span><br><span class="line">						&lt;&#x2F;prop&gt;</span><br><span class="line">						&lt;prop key&#x3D;&quot;java.lang.NullPointerException&quot;&gt;</span><br><span class="line">							exception</span><br><span class="line">						&lt;&#x2F;prop&gt;</span><br><span class="line">					</span><br><span class="line">					&lt;&#x2F;props&gt;</span><br><span class="line">			&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h1 id="十、SSM整合"><a href="#十、SSM整合" class="headerlink" title="十、SSM整合"></a>十、SSM整合</h1><h2 id="1、Spring-MyBatis-需要整合：将MyBatis的SqlSessionFactory-交给Spring"><a href="#1、Spring-MyBatis-需要整合：将MyBatis的SqlSessionFactory-交给Spring" class="headerlink" title="1、Spring -  MyBatis   :    需要整合：将MyBatis的SqlSessionFactory 交给Spring"></a>1、Spring -  MyBatis   :    需要整合：将MyBatis的SqlSessionFactory 交给Spring</h2><p>1.1、导包</p>
<p>1.2、类——表 对应（创建entity包以及entity类）</p>
<p>1.3、通过mapper.xml将类——表建立映射关系（创建mapper包XXXMapper.xml）</p>
<p>1.4、配置Spring配置文件（applicationContext.xml）  （Web项目）：</p>
<p>之前使用MyBatis:    conf.xml -&gt;SqlSessionFacotry web.xml</p>
<p>现在整合的时候，需要通过Spring管理SqlSessionFacotry ，因此 产生qlSessionFacotry 所需要的数据库信息 不在放入conf.xml  而需要放入spring配置文件中    </p>
<p>①<code>web.xml</code></p>
<pre><code>&lt;!-- needed for ContextLoaderListener --&gt;
    &lt;context-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
    &lt;/context-param&gt;

    &lt;!-- Bootstraps the root web application context before servlet initialization --&gt;
    &lt;listener&gt;
        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
    &lt;/listener&gt;</code></pre>
<p>②<code>applicationContext.xml</code>数据源（db.properties）、mapper.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;config&quot; class&#x3D;&quot;org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer&quot; &gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;locations&quot;&gt;</span><br><span class="line">			&lt;array&gt;</span><br><span class="line">			&lt;value&gt;classpath:db.properties&lt;&#x2F;value&gt;</span><br><span class="line">			&lt;&#x2F;array&gt;</span><br><span class="line">		&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;</span><br><span class="line">		&lt;!-- 配置database --&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;usename&#125;&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p>③<code>applicationContext.xml</code>配置mapper.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在SpringIoc容器中 创建MyBatis的核心类 SqlSesionFactory --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot; &gt;</span><br><span class="line">	&lt;property ref&#x3D;&quot;dataSource&quot; name&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">	&lt;!-- 加载mapper.xml路径 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;mapperLocations&quot; value&#x3D;&quot;classpath:cn&#x2F;nap&#x2F;mapper&#x2F;*.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 将MyBatis的SqlSessionFactory 交给Spring --&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;sqlSessionFactoryBeanName&quot; value&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;cn.nap.mapper&quot;&#x2F;&gt;</span><br><span class="line">	&lt;!--上面basePackage所在的property的作用：</span><br><span class="line">	将cn.nap.mapper包中，所有的接口 产生与之对应的 动态代理对象（对象名 就是 首字母小写的接口名） </span><br><span class="line">	studentMapper.querystudentByNO();</span><br><span class="line">	 --&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p>1.5、使用Spring整合MyBatis ：将MyBatis的SqlSessionFactory 交给Spring</p>
<p>（见1.4③）</p>
<h2 id="2、继续整合SpringMVC：将springmvc加入项目即可"><a href="#2、继续整合SpringMVC：将springmvc加入项目即可" class="headerlink" title="2、继续整合SpringMVC：将springmvc加入项目即可"></a>2、继续整合SpringMVC：将springmvc加入项目即可</h2><p>2.1、给项目加入SpringMVC支持，<code>web.xml: dispatcherServlet</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;</span><br><span class="line">	&lt;servlet&gt;</span><br><span class="line">		&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">		&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">		&lt;init-param&gt;</span><br><span class="line">			&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">			&lt;param-value&gt;classpath:applicationContext-controller.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">		&lt;&#x2F;init-param&gt;</span><br><span class="line">		&lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">	&lt;&#x2F;servlet&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span><br><span class="line">	&lt;servlet-mapping&gt;</span><br><span class="line">		&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">		&lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">	&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>2.2、配置<code>applicationContext-controller.xml</code>：视图解析器、基础配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置视图解析器InternalResourceViewResolver --&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">	&lt;!-- 配置跳转文件 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;views&#x2F;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 基础配置 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h2>]]></content>
      <tags>
        <tag>-java -SpringMVC -servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybaatis 笔记</title>
    <url>/2020/08/27/Mybatis-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、Mybatis简介"><a href="#一、Mybatis简介" class="headerlink" title="一、Mybatis简介"></a>一、Mybatis简介</h1><a id="more"></a>

<h2 id="1、ORM"><a href="#1、ORM" class="headerlink" title="1、ORM"></a>1、ORM</h2><p>1.1  ORM：Object Relational Mapping（对象映射关系），是一个将对象与表一一对应的概念，</p>
<p>Mybatis是ORM的一种实现方式，此外还有Hibernate也是一种实现。</p>
<p>1.2  Mybatis通过操作对象来进行对表（数据）的操作</p>
<h2 id="2、Mybatis文档"><a href="#2、Mybatis文档" class="headerlink" title="2、Mybatis文档"></a>2、<a href="https://mybatis.org/mybatis-3/zh/index.html">Mybatis文档</a></h2><h1 id="二、第一个Mybatis程序（基础方式的crud）"><a href="#二、第一个Mybatis程序（基础方式的crud）" class="headerlink" title="二、第一个Mybatis程序（基础方式的crud）"></a>二、第一个Mybatis程序（基础方式的crud）</h1><h2 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h2><blockquote>
<p>mybatis.jar 驱动包</p>
<p>mysql-connector-java.jar</p>
</blockquote>
<h2 id="2、创建要对应的类（包含于包entity）和表"><a href="#2、创建要对应的类（包含于包entity）和表" class="headerlink" title="2、创建要对应的类（包含于包entity）和表"></a>2、创建要对应的<code>类</code>（包含于包entity）和<code>表</code></h2><h2 id="3、创建并配置映射文件XXXMapper-xml"><a href="#3、创建并配置映射文件XXXMapper-xml" class="headerlink" title="3、创建并配置映射文件XXXMapper.xml"></a>3、创建并配置映射文件<code>XXXMapper.xml</code></h2><h3 id="3-1XXXMapper-xml"><a href="#3-1XXXMapper-xml" class="headerlink" title="3.1XXXMapper.xml"></a>3.1<code>XXXMapper.xml</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!-- namespace:此映射文件的唯一标识符 --&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;cn.nap.entity.personMapper&quot;&gt;</span><br><span class="line">	&lt;!-- Sql语句的获取：namespace.id --&gt;</span><br><span class="line">	&lt;!-- 增删查改标签的属性：</span><br><span class="line">		parameterType：输入参数类型</span><br><span class="line">		resultType：返回值的类型（全类名）</span><br><span class="line">	 --&gt;</span><br><span class="line">	&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		select * from person where id &#x3D; #&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br><span class="line">	&lt;select id&#x3D;&quot;queryAllPerson&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		select * from person</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br><span class="line">	&lt;insert id&#x3D;&quot;addPerson&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		insert into person(id,name,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line">	&lt;&#x2F;insert&gt;</span><br><span class="line">	&lt;delete id&#x3D;&quot;deletePersonById&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		delete from person where id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;delete&gt;</span><br><span class="line">	&lt;update id&#x3D;&quot;updatePersonById&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">		update person set name&#x3D;#&#123;name&#125;,age&#x3D;#&#123;age&#125; where id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;update&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>

<p>其中放置了增删改查标签，如<code>&lt;select&gt;</code></p>
<h3 id="3-2Mybatis对于sql语句的规定"><a href="#3-2Mybatis对于sql语句的规定" class="headerlink" title="3.2Mybatis对于sql语句的规定"></a>3.2Mybatis对于sql语句的规定</h3><p>①mybatis约定：输入参数parameterType 和 输出参数resultType ，在形式上都只能有一个</p>
<p>②如果输入参数 ：是简单类型（8个基本类型+String） 是可以使用任何占位符,#{xxxx}<br>如果是对象类型，则必须是对象的属性 #{属性名}</p>
<p>③输出参数：  如果返回值类型是一个 对象（如Student），则无论返回一个、还是多个，在resultType都写成cn.nap.entity.Student</p>
<h2 id="4、创建并配置Mybatis的配置文件：conf-xml"><a href="#4、创建并配置Mybatis的配置文件：conf-xml" class="headerlink" title="4、创建并配置Mybatis的配置文件：conf.xml"></a>4、创建并配置Mybatis的配置文件：<code>conf.xml</code></h2><h3 id="4-1conf-xml"><a href="#4-1conf-xml" class="headerlink" title="4.1conf.xml"></a>4.1<code>conf.xml</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 通过environments的default属性和environment的id属性指定Mybatis运行环境，该环境可以再SqlSessionFactoryBuilder().build(reader,&quot;development&quot;)进行最终的更改 --&gt;</span><br><span class="line">	&lt;environments default&#x3D;&quot;development&quot;&gt;</span><br><span class="line">		&lt;!-- 开发环境（自己的计算机） --&gt;</span><br><span class="line">		&lt;environment id&#x3D;&quot;development&quot;&gt;</span><br><span class="line">		</span><br><span class="line">			&lt;!-- 事务提交方式：</span><br><span class="line">				JDBC：利用JDBC方式处理事务（commit rollback close）</span><br><span class="line">				MANAGED：将事务交给其他组件托管，比如spring。默认会关闭连接，可通过&lt;property name&#x3D;&quot;closeConnection&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;来取消</span><br><span class="line">			 --&gt;</span><br><span class="line">			&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">			&lt;!-- 指定数据源类型</span><br><span class="line">			UNPOOLED:传统JDBC模式</span><br><span class="line">			POOLED:使用数据库连接池，属于第三方</span><br><span class="line">			JNDI:从Tomcat中获取一个内置的数据库连接池</span><br><span class="line">			 --&gt;</span><br><span class="line">			&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">				&lt;!-- 配置database --&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root123&quot;&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;dataSource&gt;</span><br><span class="line">		&lt;&#x2F;environment&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!-- 开发环境（真正项目所在的计算机） --&gt;</span><br><span class="line">		&lt;environment id&#x3D;&quot;deployer&quot;&gt;</span><br><span class="line">			&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">			&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">				&lt;!-- 配置database --&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root123&quot;&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;dataSource&gt;</span><br><span class="line">		&lt;&#x2F;environment&gt;</span><br><span class="line">		&lt;!-- 开发环境（测试项目所在的计算机） --&gt;</span><br><span class="line">		&lt;environment id&#x3D;&quot;testdeployer&quot;&gt;</span><br><span class="line">			&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">			&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">				&lt;!-- 配置database --&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">				&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root123&quot;&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;dataSource&gt;</span><br><span class="line">		&lt;&#x2F;environment&gt;</span><br><span class="line">	&lt;&#x2F;environments&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;!-- 加载映射文件 --&gt;</span><br><span class="line">&lt;mapper resource&#x3D;&quot;cn&#x2F;nap&#x2F;entity&#x2F;personMapper.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<p>其中包括配置数据库和映射文件的载入（包名+文件名）。</p>
<h2 id="4、创建测试"><a href="#4、创建测试" class="headerlink" title="4、创建测试"></a>4、创建测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestMybatis &#123;</span><br><span class="line">	public static void main(String[] args) throws IOException &#123;</span><br><span class="line">		queryPersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line">&#x2F;&#x2F;		addPerson();</span><br><span class="line">		updatePersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line">		deletePersonById();</span><br><span class="line">		queryAllPerson();</span><br><span class="line">	&#125;</span><br><span class="line">	public static void queryPersonById() throws IOException &#123;</span><br><span class="line">		&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">		Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">		SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		&#x2F;&#x2F;session -connection</span><br><span class="line">		SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">		String statement &#x3D; &quot;cn.nap.entity.personMapper.queryPersonById&quot;;</span><br><span class="line">		Person person &#x3D; session.selectOne(statement,1);</span><br><span class="line">		System.out.println(person);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	public static void queryAllPerson() throws IOException &#123;</span><br><span class="line">		&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">		Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">		SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		&#x2F;&#x2F;session -connection</span><br><span class="line">		SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">		String statement &#x3D; &quot;cn.nap.entity.personMapper.queryAllPerson&quot;;</span><br><span class="line">		List&lt;Person&gt; persons &#x3D; session.selectList(statement);</span><br><span class="line">		System.out.println(persons);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	public static void addPerson() throws IOException &#123;</span><br><span class="line">		&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">		Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">		SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		&#x2F;&#x2F;session -connection</span><br><span class="line">		SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">		String statement &#x3D; &quot;cn.nap.entity.personMapper.addPerson&quot;;</span><br><span class="line">		int count &#x3D; session.insert(statement, new Person(2,&quot;zhao2&quot;,20));</span><br><span class="line">		&#x2F;&#x2F;&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;,需要手动提交</span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(&quot;增加了&quot;+count+&quot;个&quot;);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	public static void deletePersonById() throws IOException &#123;</span><br><span class="line">		&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">		Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">		SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		&#x2F;&#x2F;session -connection</span><br><span class="line">		SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">		String statement &#x3D; &quot;cn.nap.entity.personMapper.deletePersonById&quot;;</span><br><span class="line">		int count &#x3D; session.delete(statement,2);</span><br><span class="line">		&#x2F;&#x2F;&lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;,需要手动提交</span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(&quot;删除了&quot;+count+&quot;个&quot;);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">	public static void updatePersonById() throws IOException &#123;</span><br><span class="line">		&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">		Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">		SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">		&#x2F;&#x2F;session -connection</span><br><span class="line">		SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">		String statement &#x3D; &quot;cn.nap.entity.personMapper.updatePersonById&quot;;</span><br><span class="line">		Person person&#x3D;new Person();</span><br><span class="line">		person.setName(&quot;zhao3&quot;);</span><br><span class="line">		person.setAge(22);</span><br><span class="line">		person.setId(1);</span><br><span class="line">		int count &#x3D; session.update(statement, person);</span><br><span class="line">		session.commit();</span><br><span class="line">		System.out.println(&quot;修改了&quot;+count+&quot;个&quot;);</span><br><span class="line">		session.close();		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>String statement = &quot;cn.nap.entity.personMapper.queryPersonById&quot;;</code>Sql语句的组成为<code>XXXMpper.xml</code>文件内的namespace和id 组成。</p>
<p>如果使用的 事务方式为 jdbc,则需要 手工commit提交，即session.commit();</p>
<h1 id="三、mapper动态代理方式（接口开发，基于约定）的crud"><a href="#三、mapper动态代理方式（接口开发，基于约定）的crud" class="headerlink" title="三、mapper动态代理方式（接口开发，基于约定）的crud"></a>三、mapper动态代理方式（接口开发，基于约定）的crud</h1><h2 id="1、实现"><a href="#1、实现" class="headerlink" title="1、实现"></a>1、实现</h2><h3 id="1-1环境"><a href="#1-1环境" class="headerlink" title="1.1环境"></a>1.1环境</h3><blockquote>
<p>mybatis.jar 驱动包</p>
<p>mysql-connector-java.jar</p>
<p>conf.xml</p>
<p>mapper.xml</p>
</blockquote>
<h3 id="1-2约定Sql语句"><a href="#1-2约定Sql语句" class="headerlink" title="1.2约定Sql语句"></a>1.2约定Sql语句</h3><p>①创建接口（Mapper包），接口如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface PersonMapper &#123;</span><br><span class="line">	&#x2F;&#x2F;1、方法名和mapper.xml中的sql标签id一致</span><br><span class="line">	&#x2F;&#x2F;2、方法的参数与mapper.xml中的输入类型parameterType一致</span><br><span class="line">	&#x2F;&#x2F;3、方法的返回值与mapper.xml中的返回类型resultType一致</span><br><span class="line">	Person queryPersonById(int id);</span><br><span class="line">	List&lt;Person&gt; queryAllPerson();</span><br><span class="line">	void addPerson(Person person);</span><br><span class="line">	void deletePersonById(int id);</span><br><span class="line">	void updatePersonById(Person person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②设置mapper.xml 中namespace值为接口全类名，实现对应关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;cn.nap.mapper.PersonMapper&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>③使用：</p>
<p>a.根据 接口名 找到 mapper.xml文件（根据的是namespace=接口全类名）<br>b.根据 接口的方法名 找到 mapper.xml文件中的SQL标签 （方法名=SQL标签Id值）</p>
<p>c.表现形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void queryPersonById() throws IOException &#123;</span><br><span class="line">	&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">	Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">	SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	&#x2F;&#x2F;session -connection</span><br><span class="line">	SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;动态代理</span><br><span class="line">	PersonMapper personMapper &#x3D; session.getMapper(PersonMapper.class);&#x2F;&#x2F;通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	Person person &#x3D; personMapper.queryPersonById(1);&#x2F;&#x2F;再调用该接口中的方法，程序会自动执行该方法对应的SQL</span><br><span class="line">	</span><br><span class="line">	System.out.println(person);</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3db-properties"><a href="#1-3db-properties" class="headerlink" title="1.3db.properties"></a>1.3<code>db.properties</code></h3><p>①创建file：db.properties，保存数据库信息（key-value）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC</span><br><span class="line">usename&#x3D;root</span><br><span class="line">password&#x3D;root123</span><br></pre></td></tr></table></figure>

<p>②将db.properties在conf.xml中进行配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">	&lt;properties resource&#x3D;&quot;db.properties&quot;&gt;&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>

<p>③conf.xml关于数据库部分的配置更改为：<code>$&#123;...&#125;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">&lt;!-- 配置database --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;usename&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4Mybatis全局参数"><a href="#1-4Mybatis全局参数" class="headerlink" title="1.4Mybatis全局参数"></a>1.4Mybatis全局参数</h3><p>在conf.xml中设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">		&lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;false&quot;  &#x2F;&gt;</span><br><span class="line">		&lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;false&quot;  &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2、别名"><a href="#2、别名" class="headerlink" title="2、别名"></a>2、别名</h2><h3 id="2-1设置单个别名"><a href="#2-1设置单个别名" class="headerlink" title="2.1设置单个别名"></a>2.1设置单个别名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;typeAliases&gt;</span><br><span class="line">		&lt;!-- 单个别名 --&gt;</span><br><span class="line">		&lt;typeAlias type&#x3D;&quot;cn.nap.mapper.PersonMapper&quot; alias&#x3D;&quot;personMapper&quot;&#x2F;&gt;</span><br><span class="line">		&lt;typeAlias type&#x3D;&quot;&quot; alias&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2批量设置别名"><a href="#2-2批量设置别名" class="headerlink" title="2.2批量设置别名"></a>2.2批量设置别名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">	&lt;!-- 批量设置别名 --&gt;</span><br><span class="line">	&lt;package name&#x3D;&quot;cn.nap.entity&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure>

<p>自动将该包中的所有类批量定义别名： 别名就是类名（不带包名，忽略大小写）</p>
<h3 id="2-3Mybatis自带别名"><a href="#2-3Mybatis自带别名" class="headerlink" title="2.3Mybatis自带别名"></a>2.3Mybatis自带别名</h3><p><img src="http://qflrz833q.hn-bkt.clouddn.com/MyBatis%E5%86%85%E7%BD%AE%E5%88%AB%E5%90%8D.png"></p>
<h2 id="3、类型处理器"><a href="#3、类型处理器" class="headerlink" title="3、类型处理器"></a>3、类型处理器</h2><h3 id="3-1Mybatis自带常见处理器"><a href="#3-1Mybatis自带常见处理器" class="headerlink" title="3.1Mybatis自带常见处理器"></a>3.1Mybatis自带常见处理器</h3><table>
<thead>
<tr>
<th>类型处理器</th>
<th>Java类型</th>
<th>JDBC类型</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean<strong>TypeHandler</strong></td>
<td>Boolean，boolean</td>
<td>任何兼容的布尔值</td>
</tr>
<tr>
<td>ByteTypeHandler</td>
<td>Byte，byte</td>
<td>任何兼容的数字或字节类型</td>
</tr>
<tr>
<td>ShortTypeHandler</td>
<td>Short，short</td>
<td>任何兼容的数字或短整型</td>
</tr>
<tr>
<td>IntegerTypeHandler</td>
<td>Integer，int</td>
<td>任何兼容的数字和整型</td>
</tr>
<tr>
<td>LongTypeHandler</td>
<td>Long，long</td>
<td>任何兼容的数字或长整型</td>
</tr>
<tr>
<td>FloatTypeHandler</td>
<td>Float，float</td>
<td>任何兼容的数字或单精度浮点型</td>
</tr>
<tr>
<td>DoubleTypeHandler</td>
<td>Double，double</td>
<td>任何兼容的数字或双精度浮点型</td>
</tr>
<tr>
<td>BigDecimalTypeHandler</td>
<td>BigDecimal</td>
<td>任何兼容的数字或十进制小数类型</td>
</tr>
<tr>
<td>StringTypeHandler</td>
<td>String</td>
<td>CHAR和VARCHAR类型</td>
</tr>
<tr>
<td>ClobTypeHandler</td>
<td>String</td>
<td>CLOB和LONGVARCHAR类型</td>
</tr>
<tr>
<td>NStringTypeHandler</td>
<td>String</td>
<td>NVARCHAR和NCHAR类型</td>
</tr>
<tr>
<td>NClobTypeHandler</td>
<td>String</td>
<td>NCLOB类型</td>
</tr>
<tr>
<td>ByteArrayTypeHandler</td>
<td>byte[]</td>
<td>任何兼容的字节流类型</td>
</tr>
<tr>
<td>BlobTypeHandler</td>
<td>byte[]</td>
<td>BLOB和LONGVARBINARY类型</td>
</tr>
<tr>
<td>DateTypeHandler</td>
<td>Date（java.util）</td>
<td>TIMESTAMP类型</td>
</tr>
<tr>
<td>DateOnlyTypeHandler</td>
<td>Date（java.util）</td>
<td>DATE类型</td>
</tr>
<tr>
<td>TimeOnlyTypeHandler</td>
<td>Date（java.util）</td>
<td>TIME类型</td>
</tr>
<tr>
<td>SqlTimestampTypeHandler</td>
<td>Timestamp（java.sql）</td>
<td>TIMESTAMP类型</td>
</tr>
<tr>
<td>SqlDateTypeHandler</td>
<td>Date（java.sql）</td>
<td>DATE类型</td>
</tr>
<tr>
<td>SqlTimeTypeHandler</td>
<td>Time（java.sql）</td>
<td>TIME类型</td>
</tr>
<tr>
<td>ObjectTypeHandler</td>
<td>任意</td>
<td>其他或未指定类型</td>
</tr>
<tr>
<td>EnumTypeHandler</td>
<td>Enumeration类型</td>
<td>VARCHAR。任何兼容的字符串类型，作为代码存储（而不是索引）。</td>
</tr>
</tbody></table>
<h3 id="3-2自定义Mybatis类型处理器：java-—数据库-jdbc类型"><a href="#3-2自定义Mybatis类型处理器：java-—数据库-jdbc类型" class="headerlink" title="3.2自定义Mybatis类型处理器：java —数据库(jdbc类型)"></a>3.2自定义Mybatis类型处理器：java —数据库(jdbc类型)</h3><p>①创建类型转换器：</p>
<p>方式一：通过接口实现TypeHandler</p>
<p>方式二：通过继承BaseTypeHandler</p>
<p>其中BaseTypeHandler继承了TypeHandler</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BooleanToIntConverter extends BaseTypeHandler&lt;Boolean&gt;&#123;</span><br><span class="line">	&#x2F;&#x2F;java-&gt;db</span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * </span><br><span class="line">	 * @param ps：PreparedStatement对象</span><br><span class="line">	 * @param i：PreparedStatement对象操作参数的位置</span><br><span class="line">	 * @param parameter：java值</span><br><span class="line">	 * @param jdbcType：数据库类型</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	@Override</span><br><span class="line">	public void setNonNullParameter(PreparedStatement ps, int i, Boolean parameter, JdbcType jdbcType)</span><br><span class="line">			throws SQLException &#123;</span><br><span class="line">		if(parameter) &#123;</span><br><span class="line">			ps.setInt(i, 1);</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			ps.setInt(i, 0);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;db(number)-&gt;java(boolean)</span><br><span class="line">	</span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(ResultSet rs, String columnName) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; rs.getInt(columnName);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(ResultSet rs, int columnIndex) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; rs.getInt(columnIndex);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Boolean getNullableResult(CallableStatement cs, int columnIndex) throws SQLException &#123;</span><br><span class="line">		int sexNum &#x3D; cs.getInt(columnIndex);</span><br><span class="line">		return sexNum&#x3D;&#x3D;1?true:false;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②配置<code>conf.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeHandlers&gt;</span><br><span class="line">		&lt;typeHandler handler&#x3D;&quot;cn.nap.converter.BooleanToIntConverter&quot; javaType&#x3D;&quot;Boolean&quot; jdbcType&#x3D;&quot;INTEGER&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeHandlers&gt;</span><br></pre></td></tr></table></figure>

<p>③配置``mapper.xml`</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 带转换器的查看 --&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithConverser&quot;  parameterType&#x3D;&quot;int&quot; resultMap&#x3D;&quot;personResult&quot;&gt;</span><br><span class="line">	select * from person where id &#x3D; #&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap type&#x3D;&quot;cn.nap.entity.Person&quot; id&#x3D;&quot;personResult&quot;&gt;</span><br><span class="line">	&lt;!-- 主键id和非主键result --&gt;</span><br><span class="line">	&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;age&quot; column&#x3D;&quot;age&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot; javaType&#x3D;&quot;Boolean&quot; jdbcType&#x3D;&quot;INTEGER&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>resultMap可以实现2个功能：<br>1.类型转换<br>2.属性-字段的映射关系</p>
<p>④测试使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void queryPersonByIdWithConverser() throws IOException &#123;</span><br><span class="line">	&#x2F;&#x2F;加载Mybatis配置文件，访问数据库</span><br><span class="line">	Reader reader&#x3D;Resources.getResourceAsReader(&quot;conf.xml&quot;);</span><br><span class="line">	SqlSessionFactory sessioonFactory&#x3D;new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">	&#x2F;&#x2F;session -connection</span><br><span class="line">	SqlSession session &#x3D; sessioonFactory.openSession();</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;动态代理</span><br><span class="line">	PersonMapper personMapper &#x3D; session.getMapper(PersonMapper.class);&#x2F;&#x2F;通过session对象获取接口（session.getMapper(接口.class);）</span><br><span class="line">	Person person &#x3D; personMapper.queryPersonByIdWithConverser(1);&#x2F;&#x2F;再调用该接口中的方法，程序会自动执行该方法对应的SQL</span><br><span class="line">	</span><br><span class="line">	System.out.println(person);</span><br><span class="line">	session.close();		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、输入类型parameterType接受标识符-、-的区别"><a href="#4、输入类型parameterType接受标识符-、-的区别" class="headerlink" title="4、输入类型parameterType接受标识符#{}、${}的区别"></a>4、输入类型parameterType接受标识符#{}、${}的区别</h2><h3 id="4-1简单类型"><a href="#4-1简单类型" class="headerlink" title="4.1简单类型"></a>4.1简单类型</h3><p>①接受方式：</p>
<p>方式一：#{任意值}<br>方式二：${value} ，其中的标识符只能是value</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">	select * from person where id &#x3D; #&#123;xxx&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonById&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">		select * from person where id &#x3D; $&#123;value&#125; </span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>②两种方式区别</p>
<p>#{}自动给String类型加上’’  （自动类型转换）</p>
<p> ${} 原样输出，但是适合于动态排序（动态字段），手动添加</p>
<p><code>&#39;$&#123;value&#125;&#39;</code></p>
<p>动态排序：<br>select stuno,stuname,stuage  from student  order by ${value} asc</p>
<p>③此外：</p>
<p>#{}可以防止SQL注入<br> ${}不防止</p>
<p>④${}、#{}相同之处：<br>都可以 获取对象的值 （嵌套类型对象）</p>
<h3 id="4-2引用类型"><a href="#4-2引用类型" class="headerlink" title="4.2引用类型"></a>4.2引用类型</h3><p>方式一：#{属性名}<br>方式二：${属性名}</p>
<h2 id="5、parameterType值为HashMap"><a href="#5、parameterType值为HashMap" class="headerlink" title="5、parameterType值为HashMap"></a>5、parameterType值为HashMap</h2><p>①输入对象为HashMap：<br>where stuage= #{stuAge}</p>
<p>用map中key的值 匹配 占位符#{stuAge}，如果匹配成功 就用map的value替换占位符</p>
<h3 id="6、Mybatis调用存储过程"><a href="#6、Mybatis调用存储过程" class="headerlink" title="6、Mybatis调用存储过程"></a>6、Mybatis调用存储过程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryCountByGradeWithProcedure&quot; statementType&#x3D;&quot;CALLABLE&quot;  parameterType&#x3D;&quot;HashMap&quot; &gt;</span><br><span class="line">		&#123;</span><br><span class="line">			CALL queryCountByGradeWithProcedure(</span><br><span class="line">				#&#123;gName,jdbcType&#x3D;VARCHAR,mode&#x3D;IN&#125;,</span><br><span class="line">				#&#123;scount,jdbcType&#x3D;INTEGER,mode&#x3D;OUT&#125;</span><br><span class="line">			) </span><br><span class="line">		&#125;	</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>其中 通过statementType=”CALLABLE”设置SQL的执行方式是存储过程。 存储过程的输入参数gName需要通过HashMap来指定<br>在使用时，通过hashmap的put方法传入输入参数的值；通过hashmap的Get方法 获取输出参数的值。</p>
<h1 id="四、Mybatis实现动态Sql"><a href="#四、Mybatis实现动态Sql" class="headerlink" title="四、Mybatis实现动态Sql"></a>四、Mybatis实现动态Sql</h1><h2 id="1、动态SQL"><a href="#1、动态SQL" class="headerlink" title="1、动态SQL"></a>1、动态SQL</h2><h3 id="1-1where-1-1实现"><a href="#1-1where-1-1实现" class="headerlink" title="1.1where 1=1实现"></a>1.1<code>where 1=1</code>实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">	select id,name,age from person where 1&#x3D;1</span><br><span class="line">	&lt;!-- test&#x3D;&quot;cn.nap.entity.Person中有id属性且属性值不为null&quot; --&gt;</span><br><span class="line">	&lt;if test&#x3D;&quot;id!&#x3D;null and id!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">		and id&#x3D;#&#123;id&#125;</span><br><span class="line">	&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;if test&#x3D;&quot;name!&#x3D;null and name!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">		and name&#x3D;#&#123;name&#125;</span><br><span class="line">	&lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-2where-1-1-与-lt-where-gt-标签"><a href="#1-2where-1-1-与-lt-where-gt-标签" class="headerlink" title="1.2where 1=1 与&lt;where&gt;标签"></a>1.2<code>where 1=1</code> 与<code>&lt;where&gt;标签</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;cn.nap.entity.Person&quot;&gt;</span><br><span class="line">	select id,name,age from person</span><br><span class="line">	&lt;where&gt;</span><br><span class="line">		&lt;!-- test&#x3D;&quot;cn.nap.entity.Person中有id属性且属性值不为null&quot; --&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;id!&#x3D;null and id!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">			and id&#x3D;#&#123;id&#125;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;name!&#x3D;null and name!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">			and name&#x3D;#&#123;name&#125;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>说明：<code>&lt;where&gt;标签</code>会根据实际情况自动助理其后的第一个<code>and</code></p>
<h3 id="1-3foreach"><a href="#1-3foreach" class="headerlink" title="1.3foreach"></a>1.3<code>foreach</code></h3><p>①foreach迭代的类型：数组、对象数组、集合、属性</p>
<p>②将多个元素放入属性中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;Grade&quot;&gt;</span><br><span class="line">	select id,name,age from person</span><br><span class="line">	&lt;where&gt;</span><br><span class="line">		&lt;if test&#x3D;&quot;names!&#x3D;null and names.zize&gt;0&quot;&gt;</span><br><span class="line">			&lt;foreach collection&#x3D;&quot;names&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">				#&#123;name&#125;</span><br><span class="line">			&lt;&#x2F;foreach&gt;</span><br><span class="line">		&lt;&#x2F;if&gt;</span><br><span class="line">	&lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>③将多个元素放入<code>简单类型</code>数组中：<code>array</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;int[]&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;array!&#x3D;null and array.length&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;array&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>④将多个元素放入List中：<code>list</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;list&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;list!&#x3D;null and list.size&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;list&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;name&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>⑤对象数组：Person[] persons=new Person[]{person1,person2,personn3}  <code>Object[]</code>+<code>array</code>+<code>对象.属性</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryPersonByIdWithSQLTags&quot; resultType&#x3D;&quot;cn.nap.entity.Person&quot; parameterType&#x3D;&quot;Object[]&quot;&gt;</span><br><span class="line">		select id,name,age from person</span><br><span class="line">		&lt;where&gt;</span><br><span class="line">			&lt;if test&#x3D;&quot;array!&#x3D;null and array.length&gt;0&quot;&gt;</span><br><span class="line">				&lt;foreach collection&#x3D;&quot;array&quot; open&#x3D;&quot; and name in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;person&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">					#&#123;person.name&#125;</span><br><span class="line">				&lt;&#x2F;foreach&gt;</span><br><span class="line">			&lt;&#x2F;if&gt;</span><br><span class="line">		&lt;&#x2F;where&gt;</span><br><span class="line">	&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4SQL片段"><a href="#1-4SQL片段" class="headerlink" title="1.4SQL片段"></a>1.4SQL片段</h3><p><code>&lt;sql&gt;</code>和<code>&lt;include&gt;</code></p>
<h2 id="2、关联查询"><a href="#2、关联查询" class="headerlink" title="2、关联查询"></a>2、关联查询</h2><h3 id="2-1一对一"><a href="#2-1一对一" class="headerlink" title="2.1一对一"></a>2.1一对一</h3><p>①方式一：业务扩展类</p>
]]></content>
      <tags>
        <tag>-java -Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>图像测试</title>
    <url>/2020/08/25/%E5%9B%BE%E5%83%8F%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p><img src="http://qflrz833q.hn-bkt.clouddn.com/2019-09-05-20-49-27_0.png"></p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>My first BLOG</title>
    <url>/2020/08/22/My-first-BLOG/</url>
    <content><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><a id="more"></a>

<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><strong>加粗</strong></p>
<p><em>倾斜</em></p>
<p><strong><em>加粗倾斜</em></strong></p>
<p><del>删除</del></p>
<p>==高亮==</p>
<p>上标^上标^</p>
<p>下标<del>下标</del></p>
<p>==列表==</p>
<ul>
<li>一级列表<ul>
<li>一级分列表<ul>
<li>一级分分列表</li>
<li>……</li>
</ul>
</li>
<li>二级分列表</li>
</ul>
</li>
<li>二级列表</li>
<li>三级列表</li>
</ul>
<ol>
<li>一级列表<ol>
<li>一级分列表<ol>
<li>一级分分列表</li>
<li>……</li>
</ol>
</li>
<li>二级分列表</li>
</ol>
</li>
<li>二级列表</li>
<li>三级列表</li>
</ol>
<p>==表格==</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>==引用==</p>
<blockquote>
<p>一级引用</p>
<blockquote>
<p>二级引用</p>
<blockquote>
<p>三级引用</p>
<blockquote>
<p>……</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>==分割线==</p>
<hr>
<p>==代码==</p>
<p><code>public static viod main(String[] args)&#123;&#125;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>==链接==</p>
<p><a href="http://www.bilibili.com/" title="bilibili">哔哩哔哩</a></p>
<p>==图片==</p>
<p><img src="My-first-BLOG.assets/2019-09-05-20-49-27_0.png" alt="图片"></p>
<p>==脚注==</p>
<p>待解释<a href="%E8%A7%A3%E9%87%8A%E6%96%87%E6%9C%AC">^1</a></p>
<hr>
<p>==缩进==</p>
<p>缩进</p>
<p>&emsp;缩进</p>
<p>&ensp;缩进</p>
<p>&nbsp;缩进</p>
<hr>
<p>==居中==</p>
<div align=center>居中</div>

<hr>
<p><img src="My-first-BLOG.assets/2019-09-05-20-49-27_0.png"></p>
]]></content>
  </entry>
</search>
